/*! For license information please see main.js.LICENSE.txt */
(()=>{var e,t,n={41:(e,t,n)=>{"use strict";function r(e,t,n){var r="";return n.split(" ").forEach((function(n){void 0!==e[n]?t.push(e[n]+";"):n&&(r+=n+" ")})),r}n.d(t,{Rk:()=>r,SF:()=>a,sk:()=>o});var a=function(e,t,n){var r=e.key+"-"+t.name;!1===n&&void 0===e.registered[r]&&(e.registered[r]=t.styles)},o=function(e,t,n){a(e,t,n);var r=e.key+"-"+t.name;if(void 0===e.inserted[t.name]){var o=t;do{e.insert(t===o?"."+r:"",o,e.sheet,!0),o=o.next}while(void 0!==o)}}},215:(e,t,n)=>{"use strict";e.exports=n.p+"6717b002a1b6af350543.ttf"},386:(e,t,n)=>{"use strict";n.d(t,{A:()=>C});var r=n(1354),a=n.n(r),o=n(6314),i=n.n(o),l=n(4417),c=n.n(l),s=new URL(n(9995),n.b),u=new URL(n(2614),n.b),d=new URL(n(4115),n.b),p=new URL(n(4063),n.b),f=new URL(n(215),n.b),m=new URL(n(7961),n.b),h=new URL(n(7335),n.b),g=i()(a()),v=c()(s),y=c()(u),b=c()(d),A=c()(p),w=c()(f),x=c()(m),k=c()(h);g.push([e.id,`html,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,aside,canvas,details,embed,figure,figcaption,footer,header,hgroup,menu,nav,output,ruby,section,summary,time,mark,audio,video{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:top}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}body{line-height:1}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:before,blockquote:after,q:before,q:after{content:'';content:none}table{border-collapse:collapse;border-spacing:0}@font-face{font-family:mainfont;src:url(${v})}@font-face{font-family:navfont;src:url(${y})}@font-face{font-family:imgfont;src:url(${b})}@font-face{font-family:cocktailName;src:url(${A})}@font-face{font-family:recipeName;src:url(${w})}@font-face{font-family:category;src:url(${x})}@font-face{font-family:homeTitle;src:url(${k})}body{font-family:mainfont;font-size:18px}.navContainer{margin:auto;width:1300px;height:70px;background-color:#80cbc4}.navContainer .navigation{display:flex;position:fixed;background-color:#014421;width:1300px;height:90px;font-size:26px;font-family:navfont;z-index:3;align-items:end}.navContainer .navigation .button1,.navContainer .navigation .button2,.navContainer .navigation .button3,.navContainer .navigation .button4{background-image:linear-gradient(#8eaaff, #2323d5);border-top-right-radius:15px;border-top-left-radius:15px;display:flex;height:20px;padding:25px 25px;text-decoration:none;vertical-align:middle;text-align:center;color:#014421}.navContainer .navigation .button1:hover,.navContainer .navigation .button2:hover,.navContainer .navigation .button3:hover,.navContainer .navigation .button4:hover{color:#fffcd6}.navContainer .navigation .button1{background-image:linear-gradient(#33723a 10%, #9ec34e 90%);height:55px;padding:15px 20px 0px 20px;color:#014421;width:90px;text-align:center}.navContainer .navigation .button1 .logoImg{width:90px}.navContainer .navigation .button1 .logoImg img{width:100%}.navContainer .navigation .button2{background-image:linear-gradient(#b2dfdb 10%, #80cbc4 90%)}.navContainer .navigation .button3{background-image:linear-gradient(#FF5F00 10%, #ffcc29 90%)}.navContainer .navigation .button4{background-image:linear-gradient(#2a58b4 10%, #b2f0ec 90%)}.navContainer .navigation .button1.active,.navContainer .navigation .button2.active,.navContainer .navigation .button3.active,.navContainer .navigation .button4.active{color:#ef6c00}.food,.titleLine,.titleLineDrink,.titleLineFood,.home,.drinkMain,.groceries{margin:auto;width:1300px;font-size:22px;display:flex}.food h1,.titleLine h1,.titleLineDrink h1,.titleLineFood h1,.home h1,.drinkMain h1,.groceries h1{width:1300px;text-align:center;font-family:mainFont;font-size:32px;padding:35px 0px 15px 0px;color:#014421}.food h2,.titleLine h2,.titleLineDrink h2,.titleLineFood h2,.home h2,.drinkMain h2,.groceries h2{width:1300px;text-align:center;font-family:homeTitle;font-size:45px}.food .slide-container,.titleLine .slide-container,.titleLineDrink .slide-container,.titleLineFood .slide-container,.home .slide-container,.drinkMain .slide-container,.groceries .slide-container{padding-top:40px;margin:auto;width:500px}.food .suggestion,.food .homeSearch,.titleLine .suggestion,.titleLine .homeSearch,.titleLineDrink .suggestion,.titleLineDrink .homeSearch,.titleLineFood .suggestion,.titleLineFood .homeSearch,.home .suggestion,.home .homeSearch,.drinkMain .suggestion,.drinkMain .homeSearch,.groceries .suggestion,.groceries .homeSearch{width:33%;padding:0px 30px}.food .suggestion .drink,.food .homeSearch .drink,.titleLine .suggestion .drink,.titleLine .homeSearch .drink,.titleLineDrink .suggestion .drink,.titleLineDrink .homeSearch .drink,.titleLineFood .suggestion .drink,.titleLineFood .homeSearch .drink,.home .suggestion .drink,.home .homeSearch .drink,.drinkMain .suggestion .drink,.drinkMain .homeSearch .drink,.groceries .suggestion .drink,.groceries .homeSearch .drink{position:relative;display:inline-block;cursor:pointer}.food .suggestion .drink .sugestImg,.food .homeSearch .drink .sugestImg,.titleLine .suggestion .drink .sugestImg,.titleLine .homeSearch .drink .sugestImg,.titleLineDrink .suggestion .drink .sugestImg,.titleLineDrink .homeSearch .drink .sugestImg,.titleLineFood .suggestion .drink .sugestImg,.titleLineFood .homeSearch .drink .sugestImg,.home .suggestion .drink .sugestImg,.home .homeSearch .drink .sugestImg,.drinkMain .suggestion .drink .sugestImg,.drinkMain .homeSearch .drink .sugestImg,.groceries .suggestion .drink .sugestImg,.groceries .homeSearch .drink .sugestImg{width:420px}.food .suggestion .drink img,.food .homeSearch .drink img,.titleLine .suggestion .drink img,.titleLine .homeSearch .drink img,.titleLineDrink .suggestion .drink img,.titleLineDrink .homeSearch .drink img,.titleLineFood .suggestion .drink img,.titleLineFood .homeSearch .drink img,.home .suggestion .drink img,.home .homeSearch .drink img,.drinkMain .suggestion .drink img,.drinkMain .homeSearch .drink img,.groceries .suggestion .drink img,.groceries .homeSearch .drink img{width:420px}.food .suggestion .drink .drinkDown,.food .homeSearch .drink .drinkDown,.titleLine .suggestion .drink .drinkDown,.titleLine .homeSearch .drink .drinkDown,.titleLineDrink .suggestion .drink .drinkDown,.titleLineDrink .homeSearch .drink .drinkDown,.titleLineFood .suggestion .drink .drinkDown,.titleLineFood .homeSearch .drink .drinkDown,.home .suggestion .drink .drinkDown,.home .homeSearch .drink .drinkDown,.drinkMain .suggestion .drink .drinkDown,.drinkMain .homeSearch .drink .drinkDown,.groceries .suggestion .drink .drinkDown,.groceries .homeSearch .drink .drinkDown{display:none;font-size:20px;color:#f0fcf2;text-align:center;position:absolute;top:0px;z-index:2;width:420px;min-height:420px;background-image:linear-gradient(rgba(83,160,186,0.579), rgba(11,12,124,0.976471));vertical-align:bottom}.food .suggestion .drink .drinkDown .categ,.food .homeSearch .drink .drinkDown .categ,.titleLine .suggestion .drink .drinkDown .categ,.titleLine .homeSearch .drink .drinkDown .categ,.titleLineDrink .suggestion .drink .drinkDown .categ,.titleLineDrink .homeSearch .drink .drinkDown .categ,.titleLineFood .suggestion .drink .drinkDown .categ,.titleLineFood .homeSearch .drink .drinkDown .categ,.home .suggestion .drink .drinkDown .categ,.home .homeSearch .drink .drinkDown .categ,.drinkMain .suggestion .drink .drinkDown .categ,.drinkMain .homeSearch .drink .drinkDown .categ,.groceries .suggestion .drink .drinkDown .categ,.groceries .homeSearch .drink .drinkDown .categ{padding:20px;font-size:18px;text-align:center}.food .suggestion .drink .drinkDown .measur,.food .homeSearch .drink .drinkDown .measur,.titleLine .suggestion .drink .drinkDown .measur,.titleLine .homeSearch .drink .drinkDown .measur,.titleLineDrink .suggestion .drink .drinkDown .measur,.titleLineDrink .homeSearch .drink .drinkDown .measur,.titleLineFood .suggestion .drink .drinkDown .measur,.titleLineFood .homeSearch .drink .drinkDown .measur,.home .suggestion .drink .drinkDown .measur,.home .homeSearch .drink .drinkDown .measur,.drinkMain .suggestion .drink .drinkDown .measur,.drinkMain .homeSearch .drink .drinkDown .measur,.groceries .suggestion .drink .drinkDown .measur,.groceries .homeSearch .drink .drinkDown .measur{padding:5px;text-align:right}.food .suggestion .drink .drinkDown .ingred,.food .homeSearch .drink .drinkDown .ingred,.titleLine .suggestion .drink .drinkDown .ingred,.titleLine .homeSearch .drink .drinkDown .ingred,.titleLineDrink .suggestion .drink .drinkDown .ingred,.titleLineDrink .homeSearch .drink .drinkDown .ingred,.titleLineFood .suggestion .drink .drinkDown .ingred,.titleLineFood .homeSearch .drink .drinkDown .ingred,.home .suggestion .drink .drinkDown .ingred,.home .homeSearch .drink .drinkDown .ingred,.drinkMain .suggestion .drink .drinkDown .ingred,.drinkMain .homeSearch .drink .drinkDown .ingred,.groceries .suggestion .drink .drinkDown .ingred,.groceries .homeSearch .drink .drinkDown .ingred{padding:5px;text-align:left}.food .suggestion .drink .drinkDown .instruc,.food .homeSearch .drink .drinkDown .instruc,.titleLine .suggestion .drink .drinkDown .instruc,.titleLine .homeSearch .drink .drinkDown .instruc,.titleLineDrink .suggestion .drink .drinkDown .instruc,.titleLineDrink .homeSearch .drink .drinkDown .instruc,.titleLineFood .suggestion .drink .drinkDown .instruc,.titleLineFood .homeSearch .drink .drinkDown .instruc,.home .suggestion .drink .drinkDown .instruc,.home .homeSearch .drink .drinkDown .instruc,.drinkMain .suggestion .drink .drinkDown .instruc,.drinkMain .homeSearch .drink .drinkDown .instruc,.groceries .suggestion .drink .drinkDown .instruc,.groceries .homeSearch .drink .drinkDown .instruc{padding:20px;font-size:22px;text-align:justify}.food .suggestion .drink:hover .drinkDown,.food .homeSearch .drink:hover .drinkDown,.titleLine .suggestion .drink:hover .drinkDown,.titleLine .homeSearch .drink:hover .drinkDown,.titleLineDrink .suggestion .drink:hover .drinkDown,.titleLineDrink .homeSearch .drink:hover .drinkDown,.titleLineFood .suggestion .drink:hover .drinkDown,.titleLineFood .homeSearch .drink:hover .drinkDown,.home .suggestion .drink:hover .drinkDown,.home .homeSearch .drink:hover .drinkDown,.drinkMain .suggestion .drink:hover .drinkDown,.drinkMain .homeSearch .drink:hover .drinkDown,.groceries .suggestion .drink:hover .drinkDown,.groceries .homeSearch .drink:hover .drinkDown{display:block}.food .suggestion .drinkLink,.food .homeSearch .drinkLink,.titleLine .suggestion .drinkLink,.titleLine .homeSearch .drinkLink,.titleLineDrink .suggestion .drinkLink,.titleLineDrink .homeSearch .drinkLink,.titleLineFood .suggestion .drinkLink,.titleLineFood .homeSearch .drinkLink,.home .suggestion .drinkLink,.home .homeSearch .drinkLink,.drinkMain .suggestion .drinkLink,.drinkMain .homeSearch .drinkLink,.groceries .suggestion .drinkLink,.groceries .homeSearch .drinkLink{font-size:25px;padding:10px;font-family:cocktailname}.food .homeSearch,.titleLine .homeSearch,.titleLineDrink .homeSearch,.titleLineFood .homeSearch,.home .homeSearch,.drinkMain .homeSearch,.groceries .homeSearch{width:300px;padding:0px}.food .homeSearch .cont,.titleLine .homeSearch .cont,.titleLineDrink .homeSearch .cont,.titleLineFood .homeSearch .cont,.home .homeSearch .cont,.drinkMain .homeSearch .cont,.groceries .homeSearch .cont{width:300px}.food .homeSearch .cont .paper,.titleLine .homeSearch .cont .paper,.titleLineDrink .homeSearch .cont .paper,.titleLineFood .homeSearch .cont .paper,.home .homeSearch .cont .paper,.drinkMain .homeSearch .cont .paper,.groceries .homeSearch .cont .paper{width:300px;margin-left:0px;margin-top:30px;background-color:#fff}.food .homeSearch .cont .paper input,.titleLine .homeSearch .cont .paper input,.titleLineDrink .homeSearch .cont .paper input,.titleLineFood .homeSearch .cont .paper input,.home .homeSearch .cont .paper input,.drinkMain .homeSearch .cont .paper input,.groceries .homeSearch .cont .paper input{font-size:22px;width:235px;overflow:hidden;padding-left:10px}.food .container,.titleLine .container,.titleLineDrink .container,.titleLineFood .container,.home .container,.drinkMain .container,.groceries .container{min-width:450px}.food .container .area,.titleLine .container .area,.titleLineDrink .container .area,.titleLineFood .container .area,.home .container .area,.drinkMain .container .area,.groceries .container .area{padding:20px;display:grid;grid-template-columns:auto auto auto auto auto;gap:5px}.food .container .area .countryT,.titleLine .container .area .countryT,.titleLineDrink .container .area .countryT,.titleLineFood .container .area .countryT,.home .container .area .countryT,.drinkMain .container .area .countryT,.groceries .container .area .countryT{color:#014421;width:130px;margin:0px;padding:10px}.food .container .area .country,.food .container .area .glass,.titleLine .container .area .country,.titleLine .container .area .glass,.titleLineDrink .container .area .country,.titleLineDrink .container .area .glass,.titleLineFood .container .area .country,.titleLineFood .container .area .glass,.home .container .area .country,.home .container .area .glass,.drinkMain .container .area .country,.drinkMain .container .area .glass,.groceries .container .area .country,.groceries .container .area .glass{width:130px;padding:10px;border:1px solid #6b240c;background-image:linear-gradient(#f2a56d, #f58634);border-radius:8px;color:#6b240c;margin:0px;text-align:center;cursor:pointer}.food .container .area .country:hover,.food .container .area .glass:hover,.titleLine .container .area .country:hover,.titleLine .container .area .glass:hover,.titleLineDrink .container .area .country:hover,.titleLineDrink .container .area .glass:hover,.titleLineFood .container .area .country:hover,.titleLineFood .container .area .glass:hover,.home .container .area .country:hover,.home .container .area .glass:hover,.drinkMain .container .area .country:hover,.drinkMain .container .area .glass:hover,.groceries .container .area .country:hover,.groceries .container .area .glass:hover{background-image:linear-gradient(#bb8c6a, #a55a24);color:#f7ccbe}.food .container .area .glass,.titleLine .container .area .glass,.titleLineDrink .container .area .glass,.titleLineFood .container .area .glass,.home .container .area .glass,.drinkMain .container .area .glass,.groceries .container .area .glass{background-image:linear-gradient(#8eaaff, #4141d7);border:1px solid #1e68f2;color:#e7fffe}.food .container .area .glass:hover,.titleLine .container .area .glass:hover,.titleLineDrink .container .area .glass:hover,.titleLineFood .container .area .glass:hover,.home .container .area .glass:hover,.drinkMain .container .area .glass:hover,.groceries .container .area .glass:hover{background-image:linear-gradient(#2828b9, #11115f);color:#ababfd}.food .container p,.titleLine .container p,.titleLineDrink .container p,.titleLineFood .container p,.home .container p,.drinkMain .container p,.groceries .container p{text-align:left;margin:20px 30px;padding:10px;width:300px}.food .container .paper,.titleLine .container .paper,.titleLineDrink .container .paper,.titleLineFood .container .paper,.home .container .paper,.drinkMain .container .paper,.groceries .container .paper{width:300px;margin-left:30px;margin-top:30px;background-color:#fff}.food .container .paper input,.titleLine .container .paper input,.titleLineDrink .container .paper input,.titleLineFood .container .paper input,.home .container .paper input,.drinkMain .container .paper input,.groceries .container .paper input{font-size:22px;width:220px;overflow:hidden;padding-left:10px;background-color:#fff}.food .container .title,.titleLine .container .title,.titleLineDrink .container .title,.titleLineFood .container .title,.home .container .title,.drinkMain .container .title,.groceries .container .title{background-image:linear-gradient(#b2dfdb, #80cbc4);min-width:650px}.food .container .title th,.titleLine .container .title th,.titleLineDrink .container .title th,.titleLineFood .container .title th,.home .container .title th,.drinkMain .container .title th,.groceries .container .title th{padding:30px 20px 20px 20px;text-align:left}.food .container .title td,.titleLine .container .title td,.titleLineDrink .container .title td,.titleLineFood .container .title td,.home .container .title td,.drinkMain .container .title td,.groceries .container .title td{padding:20px 15px}.food .container .hydrates,.titleLine .container .hydrates,.titleLineDrink .container .hydrates,.titleLineFood .container .hydrates,.home .container .hydrates,.drinkMain .container .hydrates,.groceries .container .hydrates{padding:5px 20px;background-color:#aed581}.food .container .prot,.titleLine .container .prot,.titleLineDrink .container .prot,.titleLineFood .container .prot,.home .container .prot,.drinkMain .container .prot,.groceries .container .prot{background-color:#c5e1a5}.food .container .milk,.titleLine .container .milk,.titleLineDrink .container .milk,.titleLineFood .container .milk,.home .container .milk,.drinkMain .container .milk,.groceries .container .milk{background-color:#dcedc8}.food .container .oil,.titleLine .container .oil,.titleLineDrink .container .oil,.titleLineFood .container .oil,.home .container .oil,.drinkMain .container .oil,.groceries .container .oil{background-color:#f1f8e9}.food .container .almond,.titleLine .container .almond,.titleLineDrink .container .almond,.titleLineFood .container .almond,.home .container .almond,.drinkMain .container .almond,.groceries .container .almond{background-color:#81c784}.food .container .fruit,.titleLine .container .fruit,.titleLineDrink .container .fruit,.titleLineFood .container .fruit,.home .container .fruit,.drinkMain .container .fruit,.groceries .container .fruit{background-color:#a5d6a7}.food .container .carrot,.titleLine .container .carrot,.titleLineDrink .container .carrot,.titleLineFood .container .carrot,.home .container .carrot,.drinkMain .container .carrot,.groceries .container .carrot{background-color:#9de797}.food .container .alcohol,.titleLine .container .alcohol,.titleLineDrink .container .alcohol,.titleLineFood .container .alcohol,.home .container .alcohol,.drinkMain .container .alcohol,.groceries .container .alcohol{background-color:#e8f5e9}.food .container input,.titleLine .container input,.titleLineDrink .container input,.titleLineFood .container input,.home .container input,.drinkMain .container input,.groceries .container input{background-color:#c8e6c9;font-size:20px;padding-left:10px;width:220px}.food .container .protein,.titleLine .container .protein,.titleLineDrink .container .protein,.titleLineFood .container .protein,.home .container .protein,.drinkMain .container .protein,.groceries .container .protein{padding:5px 15px;min-width:60px;max-width:60px;overflow:hidden}.food .container .protein .inputPro,.titleLine .container .protein .inputPro,.titleLineDrink .container .protein .inputPro,.titleLineFood .container .protein .inputPro,.home .container .protein .inputPro,.drinkMain .container .protein .inputPro,.groceries .container .protein .inputPro{width:60px;background-color:#c8e6c9}.food .container .name,.titleLine .container .name,.titleLineDrink .container .name,.titleLineFood .container .name,.home .container .name,.drinkMain .container .name,.groceries .container .name{padding:5px 15px;color:#014421;cursor:pointer}.food .container .name:hover,.titleLine .container .name:hover,.titleLineDrink .container .name:hover,.titleLineFood .container .name:hover,.home .container .name:hover,.drinkMain .container .name:hover,.groceries .container .name:hover{color:#ef6c00}.food .container .noLink,.titleLine .container .noLink,.titleLineDrink .container .noLink,.titleLineFood .container .noLink,.home .container .noLink,.drinkMain .container .noLink,.groceries .container .noLink{padding:5px 15px;color:#014421}.home,.titleLine{background-color:#9ec34e}.titleLineDrink{background-color:#b2f0ec}.titleLineFood{background-color:#ffcc29}.drinkMain{background-color:#b2f0ec}.food{background-color:#ffcc29}.groceries{background-color:#d5ffe4}.sliderDiv{width:840px;background-color:#C0362C;margin:auto}.sliderDiv .imageFood{width:300px}.recipe,.drinkGrid,.areaMain{margin:auto;width:1300px;font-size:22px;background-color:#9ec34e}.recipe .abow,.drinkGrid .abow,.areaMain .abow{height:70px}.recipe .resTitle,.drinkGrid .resTitle,.areaMain .resTitle{text-align:left;padding:30px;font-family:cocktailName;font-size:26px;color:#014421}.recipe .results,.recipe .resHome,.drinkGrid .results,.drinkGrid .resHome,.areaMain .results,.areaMain .resHome{display:flex;padding:10px 20px}.recipe .results .recipeResult,.recipe .resHome .recipeResult,.drinkGrid .results .recipeResult,.drinkGrid .resHome .recipeResult,.areaMain .results .recipeResult,.areaMain .resHome .recipeResult{font-weight:500;padding:10px;font-size:28px;width:700px;font-family:recipeName;cursor:pointer}.recipe .results .recipeResult:hover,.recipe .resHome .recipeResult:hover,.drinkGrid .results .recipeResult:hover,.drinkGrid .resHome .recipeResult:hover,.areaMain .results .recipeResult:hover,.areaMain .resHome .recipeResult:hover{color:#fffcd6}.recipe .results .category,.recipe .resHome .category,.drinkGrid .results .category,.drinkGrid .resHome .category,.areaMain .results .category,.areaMain .resHome .category{width:480px;padding:0px 20px}.recipe .results .category .recipeName2,.recipe .resHome .category .recipeName2,.drinkGrid .results .category .recipeName2,.drinkGrid .resHome .category .recipeName2,.areaMain .results .category .recipeName2,.areaMain .resHome .category .recipeName2{font-weight:500;font-family:category;font-size:28px;padding:10px 20px;width:200px;height:30px;color:rgba(11,12,124,0.976471);text-align:left;cursor:pointer}.recipe .results .category .recipeName2:hover,.recipe .resHome .category .recipeName2:hover,.drinkGrid .results .category .recipeName2:hover,.drinkGrid .resHome .category .recipeName2:hover,.areaMain .results .category .recipeName2:hover,.areaMain .resHome .category .recipeName2:hover{color:#fffcd6}.recipe .results .category .imgThumbCat,.recipe .resHome .category .imgThumbCat,.drinkGrid .results .category .imgThumbCat,.drinkGrid .resHome .category .imgThumbCat,.areaMain .results .category .imgThumbCat,.areaMain .resHome .category .imgThumbCat{padding:20px;width:450px}.recipe .results .descr,.recipe .resHome .descr,.drinkGrid .results .descr,.drinkGrid .resHome .descr,.areaMain .results .descr,.areaMain .resHome .descr{width:700px;text-align:justify}.recipe .results .imgThumb,.recipe .resHome .imgThumb,.drinkGrid .results .imgThumb,.drinkGrid .resHome .imgThumb,.areaMain .results .imgThumb,.areaMain .resHome .imgThumb{padding:0px;width:60px;box-shadow:0px 4px 5px #060e5a;border-radius:5px;cursor:pointer}.recipe .results .imgThumb:hover,.recipe .resHome .imgThumb:hover,.drinkGrid .results .imgThumb:hover,.drinkGrid .resHome .imgThumb:hover,.areaMain .results .imgThumb:hover,.areaMain .resHome .imgThumb:hover{box-shadow:0px 4px 5px #fffcd6}.recipe .recipeName,.drinkGrid .recipeName,.areaMain .recipeName{font-weight:500;text-align:center;font-size:28px;padding:50px 0px 10px 0px;width:100%;font-family:recipeName}.recipe .recipeName p,.drinkGrid .recipeName p,.areaMain .recipeName p{padding-top:25px;font-size:20px}.recipe .mealImg,.drinkGrid .mealImg,.areaMain .mealImg{display:flex;padding:40px 0px;justify-content:center}.recipe .mealImg .imgMeal,.drinkGrid .mealImg .imgMeal,.areaMain .mealImg .imgMeal{width:550px}.recipe .glassGrid,.drinkGrid .glassGrid,.areaMain .glassGrid{padding:20px;display:grid;gap:10px;grid-template-columns:auto auto auto auto auto auto auto auto auto auto}.recipe .glassGrid .buttonG,.drinkGrid .glassGrid .buttonG,.areaMain .glassGrid .buttonG{background-image:linear-gradient(#8eaaff, #2323d5);border-radius:20px;padding:10px 5px;font-size:20px;text-align:center;color:#8be8e5;cursor:pointer;display:flex;align-items:center;justify-content:center;box-shadow:3px 5px 7px #a555ec;border:1px solid #c787ff}.recipe .glassGrid .buttonG:hover,.drinkGrid .glassGrid .buttonG:hover,.areaMain .glassGrid .buttonG:hover{color:#8be8e5;background-image:linear-gradient(#2323d5, #1e1e6d)}.recipe img,.drinkGrid img,.areaMain img{width:600px}.recipe .for,.recipe .serving,.drinkGrid .for,.drinkGrid .serving,.areaMain .for,.areaMain .serving{color:grey;padding:20px 10px 5px 60px}.recipe .serving,.drinkGrid .serving,.areaMain .serving{color:black}.recipe .ingPlace,.drinkGrid .ingPlace,.areaMain .ingPlace{display:flex}.recipe .ingPlace .recName,.drinkGrid .ingPlace .recName,.areaMain .ingPlace .recName{width:100%;margin-top:140px;text-align:center;font-size:28px;vertical-align:middle;font-family:cocktailName}.recipe .ingPlace .recName p,.drinkGrid .ingPlace .recName p,.areaMain .ingPlace .recName p{font-size:18px;text-align:center;padding:20px}.recipe .ingPlace .iframe,.drinkGrid .ingPlace .iframe,.areaMain .ingPlace .iframe{margin-top:30px;width:500px;height:310px}.recipe .ingPlace .imgProps,.drinkGrid .ingPlace .imgProps,.areaMain .ingPlace .imgProps{padding:40px 40px;width:550px}.recipe .ingPlace p,.drinkGrid .ingPlace p,.areaMain .ingPlace p{text-align:right;padding:25px 40px;font-size:20px}.recipe .ingPlace .measPlace,.drinkGrid .ingPlace .measPlace,.areaMain .ingPlace .measPlace{display:flex;width:50%}.recipe .ingPlace .measPlace .measure,.drinkGrid .ingPlace .measPlace .measure,.areaMain .ingPlace .measPlace .measure{display:flex;min-width:400px;font-size:28px;align-items:center;text-align:left;padding:0px 25px}.recipe .ingPlace .measPlace .ingImg,.drinkGrid .ingPlace .measPlace .ingImg,.areaMain .ingPlace .measPlace .ingImg{margin:3px 20px;width:60px;padding:0px}.recipe .ingPlace .context,.drinkGrid .ingPlace .context,.areaMain .ingPlace .context{padding:25px 40px;font-size:28px;text-align:justify}.recipe .imageNum,.drinkGrid .imageNum,.areaMain .imageNum{margin:auto;display:flex;width:1300px;overflow-x:auto;font-family:imgfont;background-image:linear-gradient(#014421, #2323d5)}.recipe .imageNum .another,.drinkGrid .imageNum .another,.areaMain .imageNum .another{padding:8px}.recipe .imageNum .numbIm,.drinkGrid .imageNum .numbIm,.areaMain .imageNum .numbIm{padding:8px;text-align:center;font-size:22px;font-weight:500;color:#e65100;cursor:pointer}.recipe .imageNum .numbIm:hover,.drinkGrid .imageNum .numbIm:hover,.areaMain .imageNum .numbIm:hover{color:#fffcd6}.recipe .imageNum .numbIm:active,.drinkGrid .imageNum .numbIm:active,.areaMain .imageNum .numbIm:active{color:#e65100}.recipe .imageNum .numbActIm,.drinkGrid .imageNum .numbActIm,.areaMain .imageNum .numbActIm{text-align:center;padding:8px;font-size:22px;font-weight:500;background-color:#2323d5;border-radius:5px;color:#fffcd6}.recipe .cocktailGrid,.drinkGrid .cocktailGrid,.areaMain .cocktailGrid{display:grid;padding:40px;grid-template-columns:auto auto;gap:20px}.recipe .cocktailGrid .wrap,.drinkGrid .cocktailGrid .wrap,.areaMain .cocktailGrid .wrap{background-image:linear-gradient(#e8f4f5, #b1c1f1);border-radius:5px;padding:20px;width:550px}.recipe .cocktailGrid .wrap .cocktailName,.drinkGrid .cocktailGrid .wrap .cocktailName,.areaMain .cocktailGrid .wrap .cocktailName{font-size:25px;text-align:center}.recipe .cocktailGrid .wrap .cocktailCont,.drinkGrid .cocktailGrid .wrap .cocktailCont,.areaMain .cocktailGrid .wrap .cocktailCont{padding:20px;font-size:20px}.recipe .pagin,.drinkGrid .pagin,.areaMain .pagin{margin:0;padding-bottom:30px;background-color:#d5ffe4}.recipe .paginDrink,.drinkGrid .paginDrink,.areaMain .paginDrink{margin:0;padding-bottom:30px;background-color:#b2f0ec}.recipe .photo,.drinkGrid .photo,.areaMain .photo{text-align:center;font-size:32px}.recipe .photo .subtitle,.drinkGrid .photo .subtitle,.areaMain .photo .subtitle{font-size:12px;text-align:center}.drinkGrid{background-color:#b2f0ec}.areaMain{background-color:#ffcc29}.cocktail{width:1240px;margin:auto;padding:30px 30px 0px 30px;background-color:#b2f0ec;display:grid;gap:35px;grid-template-columns:auto auto auto}.cocktail h3{background-color:#FFBF00;padding:20px 0px}.cocktail .drink{position:relative;display:inline-block;cursor:pointer}.cocktail .drink .imgCont{width:390px;border-radius:20px}.cocktail .drink .imgCont img{border-radius:20px;width:100%}.cocktail .drink .inerShadow{display:block;position:absolute;top:0px;z-index:1;width:390px;min-height:390px;box-shadow:inset 0px -25px 25px #b2f0ec}.cocktail .drink .drinkDown{display:none;font-size:20px;color:#f0fcf2;text-align:center;position:absolute;top:0px;z-index:2;width:390px;min-height:390px;background-image:linear-gradient(rgba(83,160,186,0.579), rgba(11,12,124,0.976471));vertical-align:bottom;border-radius:20px}.cocktail .drink .drinkDown .categ{padding:20px;font-size:18px;text-align:center}.cocktail .drink .drinkDown .measur{padding:5px;text-align:right}.cocktail .drink .drinkDown .ingred{padding:5px;text-align:left}.cocktail .drink .drinkDown .instruc{padding:20px 30px;font-size:22px;text-align:justify}.cocktail .drink:hover .drinkDown{display:block;box-shadow:inset 0px -25px 25px #b2f0ec}.cocktail .drinkLink{font-size:25px;padding:10px;text-align:center;font-family:cocktailname;text-shadow:2px 2px 4px #a555ec}.loader{margin:auto;display:flex;justify-content:center;align-items:center;background-color:#d5ffe4;width:1300px;height:850px;padding-bottom:200px}.footer{margin:auto;width:1300px;height:550px;background-color:#d5ffe4;display:flex;align-items:end;color:grey}.footer p{width:1300px;border-top:solid 1px grey;padding:15px 0px;text-align:center}.arrowup{width:15px;height:15px;border-radius:4px;text-align:center;border:3px solid #014421}@media screen and (max-width: 500px){body{font-size:14px}.navContainer{width:355px;height:34px}.navContainer .navigation{width:355px;font-size:18px;height:50px}.navContainer .navigation .button1,.navContainer .navigation .button2,.navContainer .navigation .button3,.navContainer .navigation .button4{height:14px;padding:10px 10px;border-top-right-radius:8px;border-top-left-radius:8px}.navContainer .navigation .button1{height:20px;padding:6px 10px 8px 10px;font-size:20px;width:55px}.navContainer .navigation .button1 .logoImg{width:50px}.food,.titleLine,.titleLineDrink,.titleLineFood,.home,.drinkMain,.groceries{width:355px;font-size:16px;display:block}.food h1,.titleLine h1,.titleLineDrink h1,.titleLineFood h1,.home h1,.drinkMain h1,.groceries h1{width:355px;font-size:20px;padding:30px 0px 10px 0px}.food h2,.titleLine h2,.titleLineDrink h2,.titleLineFood h2,.home h2,.drinkMain h2,.groceries h2{width:355px;font-size:30px}.food .slide-container,.titleLine .slide-container,.titleLineDrink .slide-container,.titleLineFood .slide-container,.home .slide-container,.drinkMain .slide-container,.groceries .slide-container{padding:0px;width:355px}.food .suggestion,.food .homeSearch,.titleLine .suggestion,.titleLine .homeSearch,.titleLineDrink .suggestion,.titleLineDrink .homeSearch,.titleLineFood .suggestion,.titleLineFood .homeSearch,.home .suggestion,.home .homeSearch,.drinkMain .suggestion,.drinkMain .homeSearch,.groceries .suggestion,.groceries .homeSearch{width:355px;padding:0px}.food .suggestion .drink,.food .homeSearch .drink,.titleLine .suggestion .drink,.titleLine .homeSearch .drink,.titleLineDrink .suggestion .drink,.titleLineDrink .homeSearch .drink,.titleLineFood .suggestion .drink,.titleLineFood .homeSearch .drink,.home .suggestion .drink,.home .homeSearch .drink,.drinkMain .suggestion .drink,.drinkMain .homeSearch .drink,.groceries .suggestion .drink,.groceries .homeSearch .drink{cursor:pointer}.food .suggestion .drink .sugestImg,.food .homeSearch .drink .sugestImg,.titleLine .suggestion .drink .sugestImg,.titleLine .homeSearch .drink .sugestImg,.titleLineDrink .suggestion .drink .sugestImg,.titleLineDrink .homeSearch .drink .sugestImg,.titleLineFood .suggestion .drink .sugestImg,.titleLineFood .homeSearch .drink .sugestImg,.home .suggestion .drink .sugestImg,.home .homeSearch .drink .sugestImg,.drinkMain .suggestion .drink .sugestImg,.drinkMain .homeSearch .drink .sugestImg,.groceries .suggestion .drink .sugestImg,.groceries .homeSearch .drink .sugestImg{width:355px}.food .suggestion .drink img,.food .homeSearch .drink img,.titleLine .suggestion .drink img,.titleLine .homeSearch .drink img,.titleLineDrink .suggestion .drink img,.titleLineDrink .homeSearch .drink img,.titleLineFood .suggestion .drink img,.titleLineFood .homeSearch .drink img,.home .suggestion .drink img,.home .homeSearch .drink img,.drinkMain .suggestion .drink img,.drinkMain .homeSearch .drink img,.groceries .suggestion .drink img,.groceries .homeSearch .drink img{width:355px}.food .suggestion .drink .drinkDown,.food .homeSearch .drink .drinkDown,.titleLine .suggestion .drink .drinkDown,.titleLine .homeSearch .drink .drinkDown,.titleLineDrink .suggestion .drink .drinkDown,.titleLineDrink .homeSearch .drink .drinkDown,.titleLineFood .suggestion .drink .drinkDown,.titleLineFood .homeSearch .drink .drinkDown,.home .suggestion .drink .drinkDown,.home .homeSearch .drink .drinkDown,.drinkMain .suggestion .drink .drinkDown,.drinkMain .homeSearch .drink .drinkDown,.groceries .suggestion .drink .drinkDown,.groceries .homeSearch .drink .drinkDown{display:none;font-size:18px;width:355px;min-height:355px}.food .suggestion .drink .drinkDown .categ,.food .homeSearch .drink .drinkDown .categ,.titleLine .suggestion .drink .drinkDown .categ,.titleLine .homeSearch .drink .drinkDown .categ,.titleLineDrink .suggestion .drink .drinkDown .categ,.titleLineDrink .homeSearch .drink .drinkDown .categ,.titleLineFood .suggestion .drink .drinkDown .categ,.titleLineFood .homeSearch .drink .drinkDown .categ,.home .suggestion .drink .drinkDown .categ,.home .homeSearch .drink .drinkDown .categ,.drinkMain .suggestion .drink .drinkDown .categ,.drinkMain .homeSearch .drink .drinkDown .categ,.groceries .suggestion .drink .drinkDown .categ,.groceries .homeSearch .drink .drinkDown .categ{padding:15px;font-size:18px;text-align:center}.food .suggestion .drink .drinkDown .measur,.food .homeSearch .drink .drinkDown .measur,.titleLine .suggestion .drink .drinkDown .measur,.titleLine .homeSearch .drink .drinkDown .measur,.titleLineDrink .suggestion .drink .drinkDown .measur,.titleLineDrink .homeSearch .drink .drinkDown .measur,.titleLineFood .suggestion .drink .drinkDown .measur,.titleLineFood .homeSearch .drink .drinkDown .measur,.home .suggestion .drink .drinkDown .measur,.home .homeSearch .drink .drinkDown .measur,.drinkMain .suggestion .drink .drinkDown .measur,.drinkMain .homeSearch .drink .drinkDown .measur,.groceries .suggestion .drink .drinkDown .measur,.groceries .homeSearch .drink .drinkDown .measur{padding:5px;text-align:right}.food .suggestion .drink .drinkDown .ingred,.food .homeSearch .drink .drinkDown .ingred,.titleLine .suggestion .drink .drinkDown .ingred,.titleLine .homeSearch .drink .drinkDown .ingred,.titleLineDrink .suggestion .drink .drinkDown .ingred,.titleLineDrink .homeSearch .drink .drinkDown .ingred,.titleLineFood .suggestion .drink .drinkDown .ingred,.titleLineFood .homeSearch .drink .drinkDown .ingred,.home .suggestion .drink .drinkDown .ingred,.home .homeSearch .drink .drinkDown .ingred,.drinkMain .suggestion .drink .drinkDown .ingred,.drinkMain .homeSearch .drink .drinkDown .ingred,.groceries .suggestion .drink .drinkDown .ingred,.groceries .homeSearch .drink .drinkDown .ingred{padding:5px;text-align:left}.food .suggestion .drink .drinkDown .instruc,.food .homeSearch .drink .drinkDown .instruc,.titleLine .suggestion .drink .drinkDown .instruc,.titleLine .homeSearch .drink .drinkDown .instruc,.titleLineDrink .suggestion .drink .drinkDown .instruc,.titleLineDrink .homeSearch .drink .drinkDown .instruc,.titleLineFood .suggestion .drink .drinkDown .instruc,.titleLineFood .homeSearch .drink .drinkDown .instruc,.home .suggestion .drink .drinkDown .instruc,.home .homeSearch .drink .drinkDown .instruc,.drinkMain .suggestion .drink .drinkDown .instruc,.drinkMain .homeSearch .drink .drinkDown .instruc,.groceries .suggestion .drink .drinkDown .instruc,.groceries .homeSearch .drink .drinkDown .instruc{padding:20px;font-size:22px;text-align:justify}.food .suggestion .drink:hover .drinkDown,.food .homeSearch .drink:hover .drinkDown,.titleLine .suggestion .drink:hover .drinkDown,.titleLine .homeSearch .drink:hover .drinkDown,.titleLineDrink .suggestion .drink:hover .drinkDown,.titleLineDrink .homeSearch .drink:hover .drinkDown,.titleLineFood .suggestion .drink:hover .drinkDown,.titleLineFood .homeSearch .drink:hover .drinkDown,.home .suggestion .drink:hover .drinkDown,.home .homeSearch .drink:hover .drinkDown,.drinkMain .suggestion .drink:hover .drinkDown,.drinkMain .homeSearch .drink:hover .drinkDown,.groceries .suggestion .drink:hover .drinkDown,.groceries .homeSearch .drink:hover .drinkDown{display:block}.food .suggestion .drinkLink,.food .homeSearch .drinkLink,.titleLine .suggestion .drinkLink,.titleLine .homeSearch .drinkLink,.titleLineDrink .suggestion .drinkLink,.titleLineDrink .homeSearch .drinkLink,.titleLineFood .suggestion .drinkLink,.titleLineFood .homeSearch .drinkLink,.home .suggestion .drinkLink,.home .homeSearch .drinkLink,.drinkMain .suggestion .drinkLink,.drinkMain .homeSearch .drinkLink,.groceries .suggestion .drinkLink,.groceries .homeSearch .drinkLink{font-size:20px;padding:10px}.food .homeSearch,.titleLine .homeSearch,.titleLineDrink .homeSearch,.titleLineFood .homeSearch,.home .homeSearch,.drinkMain .homeSearch,.groceries .homeSearch{width:260px;padding:0px}.food .homeSearch .cont,.titleLine .homeSearch .cont,.titleLineDrink .homeSearch .cont,.titleLineFood .homeSearch .cont,.home .homeSearch .cont,.drinkMain .homeSearch .cont,.groceries .homeSearch .cont{width:260px;padding:5px 25px}.food .homeSearch .cont .paper,.titleLine .homeSearch .cont .paper,.titleLineDrink .homeSearch .cont .paper,.titleLineFood .homeSearch .cont .paper,.home .homeSearch .cont .paper,.drinkMain .homeSearch .cont .paper,.groceries .homeSearch .cont .paper{width:260px;margin-left:0px;margin-top:30px}.food .homeSearch .cont .paper input,.titleLine .homeSearch .cont .paper input,.titleLineDrink .homeSearch .cont .paper input,.titleLineFood .homeSearch .cont .paper input,.home .homeSearch .cont .paper input,.drinkMain .homeSearch .cont .paper input,.groceries .homeSearch .cont .paper input{font-size:14px;width:200px;overflow:hidden;padding-left:10px}.food .homeSearch .cont .paper button,.titleLine .homeSearch .cont .paper button,.titleLineDrink .homeSearch .cont .paper button,.titleLineFood .homeSearch .cont .paper button,.home .homeSearch .cont .paper button,.drinkMain .homeSearch .cont .paper button,.groceries .homeSearch .cont .paper button{font-size:16px}.food .container,.titleLine .container,.titleLineDrink .container,.titleLineFood .container,.home .container,.drinkMain .container,.groceries .container{min-width:355px}.food .container .area,.titleLine .container .area,.titleLineDrink .container .area,.titleLineFood .container .area,.home .container .area,.drinkMain .container .area,.groceries .container .area{padding:10px;display:grid;grid-template-columns:auto auto auto;gap:3px}.food .container .area .countryT,.titleLine .container .area .countryT,.titleLineDrink .container .area .countryT,.titleLineFood .container .area .countryT,.home .container .area .countryT,.drinkMain .container .area .countryT,.groceries .container .area .countryT{width:90px;margin:0px;padding:5px;font-size:12px}.food .container .area .country,.food .container .area .glass,.titleLine .container .area .country,.titleLine .container .area .glass,.titleLineDrink .container .area .country,.titleLineDrink .container .area .glass,.titleLineFood .container .area .country,.titleLineFood .container .area .glass,.home .container .area .country,.home .container .area .glass,.drinkMain .container .area .country,.drinkMain .container .area .glass,.groceries .container .area .country,.groceries .container .area .glass{width:90px;padding:5px;font-size:12px;border-radius:5px;margin:0px}.food .container p,.titleLine .container p,.titleLineDrink .container p,.titleLineFood .container p,.home .container p,.drinkMain .container p,.groceries .container p{text-align:justify;font-size:18px;margin:0px 35px;padding:15px 0px;width:285px}.food .container .paper,.titleLine .container .paper,.titleLineDrink .container .paper,.titleLineFood .container .paper,.home .container .paper,.drinkMain .container .paper,.groceries .container .paper{width:285px;margin-left:35px;margin-top:15px}.food .container .paper input,.titleLine .container .paper input,.titleLineDrink .container .paper input,.titleLineFood .container .paper input,.home .container .paper input,.drinkMain .container .paper input,.groceries .container .paper input{font-size:14px;width:200px}.food .container .paper button,.titleLine .container .paper button,.titleLineDrink .container .paper button,.titleLineFood .container .paper button,.home .container .paper button,.drinkMain .container .paper button,.groceries .container .paper button{font-size:16px}.food .container .title,.titleLine .container .title,.titleLineDrink .container .title,.titleLineFood .container .title,.home .container .title,.drinkMain .container .title,.groceries .container .title{min-width:355px;font-size:12px}.food .container .title th,.titleLine .container .title th,.titleLineDrink .container .title th,.titleLineFood .container .title th,.home .container .title th,.drinkMain .container .title th,.groceries .container .title th{padding:25px 5px 5px 5px;text-align:left}.food .container .title td,.titleLine .container .title td,.titleLineDrink .container .title td,.titleLineFood .container .title td,.home .container .title td,.drinkMain .container .title td,.groceries .container .title td{padding:8px 8px}.food .container .hydrates,.titleLine .container .hydrates,.titleLineDrink .container .hydrates,.titleLineFood .container .hydrates,.home .container .hydrates,.drinkMain .container .hydrates,.groceries .container .hydrates{padding:5px 10px}.food .container .prot,.titleLine .container .prot,.titleLineDrink .container .prot,.titleLineFood .container .prot,.home .container .prot,.drinkMain .container .prot,.groceries .container .prot{background-color:#c5e1a5}.food .container .milk,.titleLine .container .milk,.titleLineDrink .container .milk,.titleLineFood .container .milk,.home .container .milk,.drinkMain .container .milk,.groceries .container .milk{background-color:#dcedc8}.food .container .oil,.titleLine .container .oil,.titleLineDrink .container .oil,.titleLineFood .container .oil,.home .container .oil,.drinkMain .container .oil,.groceries .container .oil{background-color:#f1f8e9}.food .container .almond,.titleLine .container .almond,.titleLineDrink .container .almond,.titleLineFood .container .almond,.home .container .almond,.drinkMain .container .almond,.groceries .container .almond{background-color:#81c784}.food .container .fruit,.titleLine .container .fruit,.titleLineDrink .container .fruit,.titleLineFood .container .fruit,.home .container .fruit,.drinkMain .container .fruit,.groceries .container .fruit{background-color:#a5d6a7}.food .container .carrot,.titleLine .container .carrot,.titleLineDrink .container .carrot,.titleLineFood .container .carrot,.home .container .carrot,.drinkMain .container .carrot,.groceries .container .carrot{background-color:#9de797}.food .container .alcohol,.titleLine .container .alcohol,.titleLineDrink .container .alcohol,.titleLineFood .container .alcohol,.home .container .alcohol,.drinkMain .container .alcohol,.groceries .container .alcohol{background-color:#e8f5e9}.food .container input,.titleLine .container input,.titleLineDrink .container input,.titleLineFood .container input,.home .container input,.drinkMain .container input,.groceries .container input{font-size:12px;padding-left:3px;width:220px}.food .container .paper button,.titleLine .container .paper button,.titleLineDrink .container .paper button,.titleLineFood .container .paper button,.home .container .paper button,.drinkMain .container .paper button,.groceries .container .paper button{font-size:14px}.food .container .protein,.titleLine .container .protein,.titleLineDrink .container .protein,.titleLineFood .container .protein,.home .container .protein,.drinkMain .container .protein,.groceries .container .protein{padding:5px 10px;min-width:30px;max-width:30px}.food .container .protein .inputPro,.titleLine .container .protein .inputPro,.titleLineDrink .container .protein .inputPro,.titleLineFood .container .protein .inputPro,.home .container .protein .inputPro,.drinkMain .container .protein .inputPro,.groceries .container .protein .inputPro{width:30px;background-color:#c8e6c9}.food .container .name,.titleLine .container .name,.titleLineDrink .container .name,.titleLineFood .container .name,.home .container .name,.drinkMain .container .name,.groceries .container .name{padding:5px 10px;color:#014421;cursor:pointer}.food .container .name:hover,.titleLine .container .name:hover,.titleLineDrink .container .name:hover,.titleLineFood .container .name:hover,.home .container .name:hover,.drinkMain .container .name:hover,.groceries .container .name:hover{color:#ef6c00}.food .container .noLink,.titleLine .container .noLink,.titleLineDrink .container .noLink,.titleLineFood .container .noLink,.home .container .noLink,.drinkMain .container .noLink,.groceries .container .noLink{padding:5px 10px;color:#014421}.titleLine{display:flex}.titleLineDrink{display:flex}.titleLineFood{display:flex}.recipe,.drinkGrid,.areaMain{width:355px;font-size:18px}.recipe .abow,.drinkGrid .abow,.areaMain .abow{height:50px}.recipe .resTitle,.drinkGrid .resTitle,.areaMain .resTitle{padding:20px;font-size:20px}.recipe .results,.recipe .resHome,.drinkGrid .results,.drinkGrid .resHome,.areaMain .results,.areaMain .resHome{display:flex;padding:10px 20px}.recipe .results .recipeResult,.recipe .resHome .recipeResult,.drinkGrid .results .recipeResult,.drinkGrid .resHome .recipeResult,.areaMain .results .recipeResult,.areaMain .resHome .recipeResult{font-weight:300;padding:10px;font-size:18px;width:235px}.recipe .results .category,.recipe .resHome .category,.drinkGrid .results .category,.drinkGrid .resHome .category,.areaMain .results .category,.areaMain .resHome .category{width:240px;padding:0px 20px}.recipe .results .category .recipeName2,.recipe .resHome .category .recipeName2,.drinkGrid .results .category .recipeName2,.drinkGrid .resHome .category .recipeName2,.areaMain .results .category .recipeName2,.areaMain .resHome .category .recipeName2{font-weight:300;font-size:24px;padding:10px 15px;width:200px;height:30px}.recipe .results .category .imgThumbCat,.recipe .resHome .category .imgThumbCat,.drinkGrid .results .category .imgThumbCat,.drinkGrid .resHome .category .imgThumbCat,.areaMain .results .category .imgThumbCat,.areaMain .resHome .category .imgThumbCat{padding:5px;width:315px}.recipe .results .descr,.recipe .resHome .descr,.drinkGrid .results .descr,.drinkGrid .resHome .descr,.areaMain .results .descr,.areaMain .resHome .descr{width:320px;text-align:justify}.recipe .results .imgThumbCat,.recipe .resHome .imgThumbCat,.drinkGrid .results .imgThumbCat,.drinkGrid .resHome .imgThumbCat,.areaMain .results .imgThumbCat,.areaMain .resHome .imgThumbCat{padding:10px;width:150px}.recipe .results .imgThumb,.recipe .resHome .imgThumb,.drinkGrid .results .imgThumb,.drinkGrid .resHome .imgThumb,.areaMain .results .imgThumb,.areaMain .resHome .imgThumb{width:60px;box-shadow:0px 4px 5px #060e5a;border-radius:5px;cursor:pointer}.recipe .results .imgThumb:hover,.recipe .resHome .imgThumb:hover,.drinkGrid .results .imgThumb:hover,.drinkGrid .resHome .imgThumb:hover,.areaMain .results .imgThumb:hover,.areaMain .resHome .imgThumb:hover{box-shadow:0px 4px 5px #fffcd6}.recipe .resHome,.drinkGrid .resHome,.areaMain .resHome{display:block}.recipe .recipeName,.drinkGrid .recipeName,.areaMain .recipeName{font-weight:400;font-size:18px;padding:10px;padding-top:30px}.recipe .recipeName p,.drinkGrid .recipeName p,.areaMain .recipeName p{font-size:14px}.recipe .mealImg,.drinkGrid .mealImg,.areaMain .mealImg{padding:15px 0px}.recipe .mealImg .imgMeal,.drinkGrid .mealImg .imgMeal,.areaMain .mealImg .imgMeal{width:355px;margin-top:20px}.recipe .glassGrid,.drinkGrid .glassGrid,.areaMain .glassGrid{padding:10px;gap:10px;grid-template-columns:auto auto auto}.recipe .glassGrid .buttonG,.drinkGrid .glassGrid .buttonG,.areaMain .glassGrid .buttonG{border-radius:10px;padding:10px 5px;font-size:14px;box-shadow:0px 5px 6px #a555ec}.recipe img,.drinkGrid img,.areaMain img{padding:10px;width:335px}.recipe .for,.recipe .serving,.drinkGrid .for,.drinkGrid .serving,.areaMain .for,.areaMain .serving{padding:15px 10px 5px 30px}.recipe .serving,.drinkGrid .serving,.areaMain .serving{color:black}.recipe .ingPlace,.drinkGrid .ingPlace,.areaMain .ingPlace{display:block}.recipe .ingPlace .recName,.drinkGrid .ingPlace .recName,.areaMain .ingPlace .recName{width:350px;margin-top:20px;text-align:center;font-size:20px;vertical-align:middle}.recipe .ingPlace .recName p,.drinkGrid .ingPlace .recName p,.areaMain .ingPlace .recName p{font-size:12px;padding:10px}.recipe .ingPlace .iframe,.drinkGrid .ingPlace .iframe,.areaMain .ingPlace .iframe{margin-top:20px;width:350px;height:217px}.recipe .ingPlace .imgProps,.drinkGrid .ingPlace .imgProps,.areaMain .ingPlace .imgProps{padding:20px 0px;width:355px}.recipe .ingPlace p,.drinkGrid .ingPlace p,.areaMain .ingPlace p{width:300px;font-size:12px;padding:20px 25px}.recipe .ingPlace .measPlace,.drinkGrid .ingPlace .measPlace,.areaMain .ingPlace .measPlace{display:flex;width:100%}.recipe .ingPlace .measPlace .measure,.drinkGrid .ingPlace .measPlace .measure,.areaMain .ingPlace .measPlace .measure{min-width:250px;padding:0px 15px;font-size:18px}.recipe .ingPlace .measPlace .ingImg,.drinkGrid .ingPlace .measPlace .ingImg,.areaMain .ingPlace .measPlace .ingImg{margin:2px 10px;width:40px;padding:0px}.recipe .ingPlace .context,.drinkGrid .ingPlace .context,.areaMain .ingPlace .context{position:relative;width:315px;padding:5px 20px;text-align:justify;font-size:18px}.recipe .imageNum,.drinkGrid .imageNum,.areaMain .imageNum{display:flex;width:355px}.recipe .imageNum .another,.drinkGrid .imageNum .another,.areaMain .imageNum .another{padding:8px}.recipe .imageNum .numbIm,.drinkGrid .imageNum .numbIm,.areaMain .imageNum .numbIm{padding:5px;font-size:14px;font-weight:400}.recipe .imageNum .numbActIm,.drinkGrid .imageNum .numbActIm,.areaMain .imageNum .numbActIm{padding:5px;font-size:18px;font-weight:500}.recipe .cocktailGrid,.drinkGrid .cocktailGrid,.areaMain .cocktailGrid{display:grid;padding:5px;grid-template-columns:auto;gap:20px}.recipe .cocktailGrid .wrap,.drinkGrid .cocktailGrid .wrap,.areaMain .cocktailGrid .wrap{border-radius:5px;padding:15px;width:315px}.recipe .cocktailGrid .wrap .cocktailName,.drinkGrid .cocktailGrid .wrap .cocktailName,.areaMain .cocktailGrid .wrap .cocktailName{font-size:18px}.recipe .cocktailGrid .wrap .cocktailCont,.drinkGrid .cocktailGrid .wrap .cocktailCont,.areaMain .cocktailGrid .wrap .cocktailCont{padding:15px;font-size:16px}.recipe .pagin,.drinkGrid .pagin,.areaMain .pagin{margin:0;padding-bottom:20px}.recipe .photo,.drinkGrid .photo,.areaMain .photo{text-align:center;font-size:20px}.cocktail{width:325px;padding:35px 15px 0px 15px;gap:10px;grid-template-columns:auto auto}.cocktail .drink{position:relative;display:inline-block;cursor:pointer}.cocktail .drink .imgCont{width:160px}.cocktail .drink .imgCont img{border-radius:10px}.cocktail .drink .inerShadow{width:160px;min-height:160px;box-shadow:inset 0px -20px 20px #b2f0ec}.cocktail .drink .drinkDown{font-size:16px;width:160px;min-height:160px;border-radius:10px}.cocktail .drink .drinkDown .categ{padding:10px;font-size:13px}.cocktail .drink .drinkDown .measur{padding:2px;text-align:right;font-size:12px}.cocktail .drink .drinkDown .ingred{padding:2px;text-align:left;font-size:12px}.cocktail .drink .drinkDown .instruc{padding:10px 20px;font-size:12px}.cocktail .drink:hover .drinkDown{display:block}.cocktail .drinkLink{font-size:18px;padding:10px}.loader{width:355px;height:750px;padding-bottom:200px}.footer{margin:auto;width:355px;height:350px;display:flex;align-items:end;color:grey}.footer p{width:355px;padding:15px 0px}.arrowup{width:15px;height:15px;border-radius:4px;text-align:center;border:3px solid #014421}}\n`,"",{version:3,sources:["webpack://./src/scss/_cssreset.scss","webpack://./src/scss/main.scss"],names:[],mappings:"AAAA,2ZAaC,QAAS,CACT,SAAU,CACV,QAAS,CACT,cAAe,CACf,YAAa,CACb,kBAAmB,CAEnB,8EAIA,aAAc,CACd,KAEA,aAAc,CACd,MAEA,eAAgB,CAChB,aAEA,WAAY,CACZ,oDAGA,UAAW,CACX,YAAa,CACb,MAEA,wBAAyB,CACzB,gBAAiB,CC0BlB,WACI,oBAAqB,CACrB,2CAA2C,CAG/C,WACI,mBAAoB,CACpB,2CAA8C,CAGlD,WACI,mBAAoB,CACpB,2CAAyC,CAG7C,WACI,wBAAyB,CACzB,2CAAwD,CAG5D,WACI,sBAAuB,CACvB,2CAA8C,CAGlD,WACI,oBAAqB,CACrB,2CAA8C,CAGlD,WACI,qBAAsB,CACtB,2CAA4C,CAGhD,KACI,oBAAqB,CACrB,cAAe,CAClB,cAGG,WAAY,CACZ,YAAa,CAEb,WAAY,CACZ,wBA1EY,CAqEhB,0BAUQ,YAAa,CACb,cAAe,CACf,wBArHQ,CAsHR,YAAa,CAEb,WAAY,CACZ,cAAe,CACf,mBAAoB,CAEpB,SAAU,CACV,eAAgB,CApBxB,4IA4BY,kDAAqD,CACrD,4BAA6B,CAC7B,2BAA4B,CAC5B,YAAa,CAGb,WAAY,CAEZ,iBAAkB,CAElB,oBAAqB,CACrB,qBAAsB,CACtB,iBAAkB,CAClB,aAlJI,CAyGhB,oKA+CgB,aArGQ,CAsDxB,mCAsDY,0DAA+D,CAE/D,WAAY,CAGZ,0BAA2B,CAG3B,aAvKI,CA0KJ,UAAW,CACX,iBAAkB,CAlE9B,4CAqEgB,UAAW,CArE3B,gDAwEoB,UAAW,CAxE/B,mCA8EY,0DAA2D,CA9EvE,mCAkFY,0DAA6D,CAlFzE,mCAsFY,0DAA+D,CAtF3E,wKA6FY,aA1IO,CA2IV,4EAWL,WAAY,CACZ,YAAa,CAEb,cAAe,CACf,YAAa,CAXjB,iGAcQ,YAAa,CACb,iBAAkB,CAClB,oBAAqB,CACrB,cAAe,CACf,yBAA0B,CAC1B,aA9NQ,CA2MhB,iGAuBQ,YAAa,CACb,iBAAkB,CAClB,qBAAsB,CACtB,cAAe,CA1BvB,mMA+BQ,gBAAiB,CACjB,WAAY,CACZ,WAAY,CAjCpB,gUAsCQ,SAAU,CACV,gBAAiB,CAvCzB,kaA0CY,iBAAkB,CAClB,oBAAqB,CAErB,cAAe,CA7C3B,4jBAgDgB,WAAY,CAhD5B,0dAoDgB,WAAY,CApD5B,4jBAwDgB,YAAa,CACb,cAAe,CACf,aA5MW,CA6MX,iBAAkB,CAClB,iBAAkB,CAClB,OAAQ,CACR,SAAU,CACV,WAAY,CACZ,gBAAiB,CACjB,kFAAmD,CACnD,qBAAsB,CAlEtC,8pBAqEoB,YAAa,CACb,cAAe,CACf,iBAAkB,CAvEtC,4qBA2EoB,WAAY,CACZ,gBAAiB,CA5ErC,4qBAgFoB,WAAY,CACZ,eAAgB,CAjFpC,0rBAqFoB,YAAa,CACb,cAAe,CACf,kBAAmB,CAvFvC,gpBA4FgB,aAAc,CA5F9B,0dAiGY,cAAe,CACf,YAAa,CACb,wBAAyB,CAnGrC,gKAwGQ,WAAY,CACZ,WAAY,CAzGpB,0MA6GY,WAAY,CA7GxB,2PAgHgB,WAAY,CACZ,eAAgB,CAChB,eAAgB,CAEhB,qBAjQH,CA6Ib,qSAuHoB,cAAe,CACf,WAAY,CACZ,eAAgB,CAChB,iBAAkB,CA1HtC,yJAoIQ,eAAgB,CApIxB,mMAwIY,YAAa,CACb,YAAa,CACb,8CAA+C,CAC/C,OAAQ,CA3IpB,yQA+IgB,aA1VA,CA2VA,WAAY,CACZ,UAAW,CACX,YAAa,CAlJ7B,sfAwJgB,WAAY,CACZ,YAAa,CAEb,wBAzUE,CA6UF,kDAAuD,CAEvD,iBAAkB,CAClB,aA/UE,CAgVF,UAAW,CACX,iBAAkB,CAClB,cAAe,CArK/B,0kBAwKoB,kDAAuD,CACvD,aAnVF,CA0KlB,oPAiLgB,kDAAmD,CACnD,wBA1WU,CA2WV,aA1WW,CAuL3B,8RAsLoB,kDAA6D,CAE7D,aA5WY,CAoLhC,uKA+LY,eAAgB,CAChB,gBAAiB,CACjB,YAAa,CACb,WAAY,CAlMxB,0MAsMY,WAAY,CACZ,gBAAiB,CACjB,eAAgB,CAEhB,qBAvVC,CA6Ib,oPA6MgB,cAAe,CACf,WAAY,CACZ,eAAgB,CAChB,iBAAkB,CAClB,qBA9VH,CA6Ib,0MA0NY,kDAAmD,CACnD,eAAgB,CA3N5B,+NA8NgB,2BAA4B,CAC5B,eAAgB,CA/NhC,+NAmOgB,iBAAkB,CAnOlC,+NAwOY,gBAAiB,CACjB,wBA3YM,CAkKlB,mMA6OY,wBA9YO,CAiKnB,mMAiPY,wBAjZO,CAgKnB,4LAqPY,wBApZM,CA+JlB,iNAyPY,wBAvZM,CA8JlB,0MA6PY,wBA1ZQ,CA6JpB,iNAiQY,wBA5ZI,CA2JhB,wNAqQY,wBA/ZO,CA0JnB,mMAyQY,wBAraO,CAuaP,cAAe,CACf,iBAAkB,CAElB,WAAY,CA9QxB,wNAkRY,gBAAiB,CACjB,cAAe,CACf,cAAe,CACf,eAAgB,CArR5B,8RAwRgB,UAAW,CACX,wBArbG,CA4JnB,mMA8RY,gBAAiB,CACjB,aA1eI,CA2eJ,cAAe,CAhS3B,6OAmSgB,aAlbG,CA+InB,iNAwSY,gBAAiB,CACjB,aApfI,CAqfP,iBAQL,wBAvfc,CAwfjB,gBAGG,wBAzfe,CA2flB,eAGG,wBA/fc,CAggBjB,WAGG,wBAlgBe,CAmgBlB,MAGG,wBAvgBc,CAwgBjB,WAGG,wBAhhBU,CAihBb,WAGG,WAAY,CACZ,wBAhfY,CAkfZ,WAAY,CAJhB,sBAOQ,WAAY,CACf,6BAMD,WAAY,CACZ,YAAa,CACb,cAAe,CACf,wBAhiBc,CA0hBlB,+CASQ,WAAY,CATpB,2DAeQ,eAAgB,CAChB,YAAa,CACb,wBAAyB,CACzB,cAAe,CACf,aAnjBQ,CAgiBhB,gHAwBQ,YAAa,CACb,iBAAkB,CAzB1B,oMA4BY,eAAgB,CAChB,YAAa,CACb,cAAe,CACf,WAAY,CACZ,sBAAuB,CACvB,cAAe,CAjC3B,wOAoCgB,aAjhBQ,CA6exB,4KA0CY,WAAY,CACZ,gBAAiB,CA3C7B,0PA8CgB,eAAgB,CAChB,oBAAqB,CACrB,cAAe,CACf,iBAAkB,CAClB,WAAY,CACZ,WAAY,CAEZ,8BA7hBE,CA8hBF,eAAgB,CAChB,cAAe,CAvD/B,8RA0DoB,aAviBI,CA6exB,0PA+DgB,YAAa,CACb,WAAY,CAhE5B,0JAqEY,WAAY,CACZ,kBAAmB,CAtE/B,4KA4EY,WAAY,CACZ,UAAW,CACX,8BAAsC,CACtC,iBAAkB,CAClB,cAAe,CAhF3B,gNAmFgB,8BAhkBQ,CA6exB,iEA0FQ,eAAgB,CAChB,iBAAkB,CAClB,cAAe,CACf,yBAA0B,CAC1B,UAAW,CACX,sBAAuB,CA/F/B,uEAqGY,gBAAiB,CACjB,cAAe,CAtG3B,wDA2GQ,YAAa,CAEb,gBAAiB,CAEjB,sBAAuB,CA/G/B,mFAmHY,WAAY,CAnHxB,8DA0HQ,YAAa,CACb,YAAa,CACb,QAAS,CACT,uEAAwE,CA7HhF,yFAgIY,kDAAqD,CACrD,kBAAmB,CACnB,gBAAiB,CACjB,cAAe,CACf,iBAAkB,CAClB,aA7oBK,CA8oBL,cAAe,CACf,YAAa,CACb,kBAAmB,CACnB,sBAAuB,CACvB,8BAjpBM,CAmpBN,wBAlpBM,CAsgBlB,2GAgJgB,aAxpBC,CAypBD,kDAAqD,CAjJrE,yCAyJQ,WAAY,CAzJpB,oGA8JQ,UA1oBO,CA2oBP,0BAA2B,CA/JnC,wDAmKQ,WAAY,CAnKpB,2DAwKQ,YAAa,CAxKrB,sFA2KY,UAAW,CACX,gBAAiB,CACjB,iBAAkB,CAClB,cAAe,CACf,qBAAsB,CACtB,wBAAyB,CAhLrC,4FAmLgB,cAAe,CACf,iBAAkB,CAClB,YAAa,CArL7B,mFA4LY,eAAgB,CAChB,WAAY,CACZ,YAAa,CA9LzB,yFAkMY,iBAAkB,CAClB,WAAY,CAnMxB,iEAuMY,gBAAiB,CACjB,iBAAkB,CAClB,cAAe,CAzM3B,4FA8MY,YAAa,CACb,SAAU,CA/MtB,uHAkNgB,YAAa,CACb,eAAgB,CAChB,cAAe,CAEf,kBAAmB,CAEnB,eAAgB,CAChB,gBAAiB,CAzNjC,oHA8NgB,eAAgB,CAChB,UAAW,CACX,WAAY,CAhO5B,sFA0OY,iBAAkB,CAClB,cAAe,CACf,kBAAmB,CA5O/B,2DAmPQ,WAAY,CACZ,YAAa,CACb,YAAa,CACb,eAAgB,CAChB,mBAAoB,CAEpB,kDAAoD,CAzP5D,sFA4PY,WAAY,CA5PxB,mFAgQY,WAAY,CACZ,iBAAkB,CAClB,cAAe,CACf,eAAgB,CAChB,aAlvBO,CAmvBP,cAAe,CArQ3B,qGAwQgB,aArvBQ,CA6exB,wGA4QgB,aA1vBG,CA8enB,4FAiRY,iBAAkB,CAClB,WAAY,CACZ,cAAe,CACf,eAAgB,CAChB,wBAxyBc,CAyyBd,iBAAkB,CAClB,aApwBY,CA6exB,uEA4RQ,YAAa,CACb,YAAa,CACb,+BAAgC,CAChC,QAAS,CA/RjB,yFAkSY,kDAAqD,CACrD,iBAAkB,CAClB,YAAa,CACb,WAAY,CArSxB,mIAwSgB,cAAe,CACf,iBAAkB,CAzSlC,mIA8SgB,YAAa,CACb,cAAe,CA/S/B,kDAqTQ,QAAS,CACT,mBAAoB,CACpB,wBAr1BM,CA8hBd,iEA2TQ,QAAS,CACT,mBAAoB,CACpB,wBAr1BW,CAwhBnB,kDAiUQ,iBAAkB,CAClB,cAAe,CAlUvB,gFAqUY,cAAe,CACf,iBAAkB,CACrB,WAKL,wBAp2Be,CAs2BlB,UAGG,wBA12Bc,CA22BjB,UAGG,YAAa,CACb,WAAY,CACZ,0BAA2B,CAC3B,wBAh3Be,CAi3Bf,YAAa,CACb,QAAS,CACT,oCAAqC,CAPzC,aAWQ,wBAAyB,CACzB,gBAAiB,CAZzB,iBAgBQ,iBAAkB,CAClB,oBAAqB,CAErB,cAAe,CAnBvB,0BAsBY,WAAY,CAKZ,kBAAmB,CA3B/B,8BA8BgB,kBAAmB,CACnB,UAAW,CA/B3B,6BAyCY,aAAc,CACd,iBAAkB,CAClB,OAAQ,CACR,SAAU,CACV,WAAY,CACZ,gBAAiB,CAEjB,uCA55BO,CA42BnB,4BAsDY,YAAa,CACb,cAAe,CACf,aAn3Be,CAo3Bf,iBAAkB,CAClB,iBAAkB,CAClB,OAAQ,CACR,SAAU,CACV,WAAY,CACZ,gBAAiB,CACjB,kFAAmD,CACnD,qBAAsB,CACtB,kBAAmB,CAjE/B,mCAuEgB,YAAa,CACb,cAAe,CACf,iBAAkB,CAzElC,oCA6EgB,WAAY,CACZ,gBAAiB,CA9EjC,oCAkFgB,WAAY,CACZ,eAAgB,CAnFhC,qCAuFgB,iBAAkB,CAClB,cAAe,CACf,kBAAmB,CAzFnC,kCA8FY,aAAc,CACd,uCA38BO,CA42BnB,qBAqGQ,cAAe,CACf,YAAa,CACb,iBAAkB,CAClB,wBAAyB,CACzB,+BAp8BU,CAq8Bb,QAID,WAAY,CACZ,YAAa,CACb,sBAAuB,CACvB,kBAAmB,CACnB,wBAp+BU,CAq+BV,YAAa,CACb,YAAa,CACb,oBAAqB,CACxB,QAGG,WAAY,CACZ,YAAa,CACb,YAAa,CAEb,wBA/+BU,CAg/BV,YAAa,CACb,eAAgB,CAEhB,UAAW,CATf,UAYQ,YAAa,CAEb,yBAA0B,CAC1B,gBAAiB,CACjB,iBAAkB,CAErB,SAKD,UAAW,CACX,WAAY,CACZ,iBAAkB,CAClB,iBAAkB,CAClB,wBAvgCY,CAwgCf,qCAIG,KACI,cAAe,CAClB,cAGG,WAAY,CACZ,WAAY,CAFhB,0BAKQ,WAAY,CAEZ,cAAe,CACf,WAAY,CARpB,4IAgBY,WAAY,CACZ,iBAAkB,CAClB,2BAA4B,CAC5B,0BAA2B,CAnBvC,mCA2BY,WAAY,CACZ,yBAA0B,CAC1B,cAAe,CACf,UAAW,CA9BvB,4CAkCgB,UAAW,CACd,4EAaT,WAAY,CAEZ,cAAe,CACf,aAAc,CAXlB,iGAcQ,WAAY,CACZ,cAAe,CACf,yBAA0B,CAhBlC,iGAqBQ,WAAY,CACZ,cAAe,CAtBvB,mMA0BQ,WAAY,CAEZ,WAAY,CA5BpB,gUAiCQ,WAAY,CACZ,WAAY,CAlCpB,kaAqCY,cAAe,CArC3B,4jBAwCgB,WAAY,CAxC5B,0dA4CgB,WAAY,CA5C5B,4jBAgDgB,YAAa,CACb,cAAe,CAGf,WAAY,CACZ,gBAAiB,CArDjC,8pBAyDoB,YAAa,CACb,cAAe,CACf,iBAAkB,CA3DtC,4qBA+DoB,WAAY,CACZ,gBAAiB,CAhErC,4qBAoEoB,WAAY,CACZ,eAAgB,CArEpC,0rBAyEoB,YAAa,CACb,cAAe,CACf,kBAAmB,CA3EvC,gpBAgFgB,aAAc,CAhF9B,0dAqFY,cAAe,CACf,YAAa,CAtFzB,gKA4FQ,WAAY,CACZ,WAAY,CA7FpB,0MAgGY,WAAY,CACZ,gBAAiB,CAjG7B,2PAoGgB,WAAY,CACZ,eAAgB,CAChB,eAAgB,CAtGhC,qSA2GoB,cAAe,CACf,WAAY,CACZ,eAAgB,CAChB,iBAAkB,CA9GtC,4SAkHoB,cAAe,CAlHnC,yJA4HQ,eAAgB,CA5HxB,mMA+HY,YAAa,CACb,YAAa,CACb,oCAAqC,CACrC,OAAQ,CAlIpB,yQAsIgB,UAAW,CACX,UAAW,CACX,WAAY,CACZ,cAAe,CAzI/B,sfA+IgB,UAAW,CACX,WAAY,CACZ,cAAe,CACf,iBAAkB,CAElB,UAAW,CApJ3B,uKA6JY,kBAAmB,CACnB,cAAe,CACf,eAAgB,CAChB,gBAAiB,CACjB,WAAY,CAjKxB,0MAqKY,WAAY,CACZ,gBAAiB,CACjB,eAAgB,CAvK5B,oPA2KgB,cAAe,CACf,WAAY,CA5K5B,2PAgLgB,cAAe,CAhL/B,0MAwLY,eAAgB,CAChB,cAAe,CAzL3B,+NA4LgB,wBAAyB,CACzB,eAAgB,CA7LhC,+NAiMgB,eAAgB,CAjMhC,+NAsMY,gBAAiB,CAtM7B,mMA2MY,wBAztCG,CA8gCf,mMA+MY,wBA5tCG,CA6gCf,4LAmNY,wBA/tCE,CA4gCd,iNAuNY,wBAluCE,CA2gCd,0MA2NY,wBAruCI,CA0gChB,iNA+NY,wBAvuCA,CAwgCZ,wNAmOY,wBA1uCG,CAugCf,mMAyOY,cAAe,CACf,gBAAiB,CAEjB,WAAY,CA5OxB,2PAiPgB,cAAe,CAjP/B,wNAsPY,gBAAiB,CACjB,cAAe,CACf,cAAe,CAxP3B,8RA2PgB,UAAW,CACX,wBArwCD,CAygCf,mMAiQY,gBAAiB,CACjB,aA1zCA,CA2zCA,cAAe,CAnQ3B,6OAsQgB,aAlwCD,CA4/Bf,iNA2QY,gBAAiB,CACjB,aAp0CA,CAq0CH,WAKL,YAAa,CAChB,gBAGG,YAAa,CAChB,eAGG,YAAa,CAChB,6BAMG,WAAY,CACZ,cAAe,CALnB,+CAQQ,WAAY,CARpB,2DAaQ,YAAa,CAEb,cAAe,CAfvB,gHAqBQ,YAAa,CACb,iBAAkB,CAtB1B,oMAyBY,eAAgB,CAChB,YAAa,CACb,cAAe,CACf,WAAY,CA5BxB,4KAoCY,WAAY,CACZ,gBAAiB,CArC7B,0PAwCgB,eAAgB,CAChB,cAAe,CACf,iBAAkB,CAClB,WAAY,CACZ,WAAY,CA5C5B,0PAgDgB,WAAY,CACZ,WAAY,CAjD5B,0JAsDY,WAAY,CACZ,kBAAmB,CAvD/B,8LA2DY,YAAa,CACb,WAAY,CA5DxB,4KAgEY,UAAW,CACX,8BAAsC,CACtC,iBAAkB,CAClB,cAAe,CAnE3B,gNAsEgB,8BAx2CI,CAkyCpB,wDA4EQ,aAAc,CA5EtB,iEAgFQ,eAAgB,CAChB,cAAe,CACf,YAAa,CACb,gBAAiB,CAnFzB,uEAuFY,cAAe,CAvF3B,wDA4FQ,gBAAiB,CA5FzB,mFA+FY,WAAY,CAEZ,eAAgB,CAjG5B,8DAuGQ,YAAa,CACb,QAAS,CACT,oCAAqC,CAzG7C,yFA6GY,kBAAmB,CACnB,gBAAiB,CACjB,cAAe,CACf,8BA56CE,CA4zCd,yCAsHQ,YAAa,CACb,WAAY,CAvHpB,oGA6HQ,0BAA2B,CA7HnC,wDAiIQ,WAAY,CAjIpB,2DAsIQ,aAAc,CAtItB,sFAyIY,WAAY,CACZ,eAAgB,CAChB,iBAAkB,CAClB,cAAe,CACf,qBAAsB,CA7IlC,4FAiJgB,cAAe,CAEf,YAAa,CAnJ7B,mFA0JY,eAAgB,CAChB,WAAY,CACZ,YAAa,CA5JzB,yFAgKY,gBAAiB,CACjB,WAAY,CAjKxB,iEAqKY,WAAY,CACZ,cAAe,CACf,iBAAkB,CAvK9B,4FA2KY,YAAa,CACb,UAAW,CA5KvB,uHA+KgB,eAAgB,CAGhB,gBAAiB,CACjB,cAAe,CAnL/B,oHAwLgB,eAAgB,CAChB,UAAW,CACX,WAAY,CA1L5B,sFAiMY,iBAAkB,CAClB,WAAY,CACZ,gBAAiB,CACjB,kBAAmB,CACnB,cAAe,CArM3B,2DA4MQ,YAAa,CACb,WAAY,CA7MpB,sFAgNY,WAAY,CAhNxB,mFAoNY,WAAY,CAEZ,cAAe,CACf,eAAgB,CAvN5B,4FA8NY,WAAY,CACZ,cAAe,CACf,eAAgB,CAhO5B,uEAqOQ,YAAa,CACb,WAAY,CACZ,0BAA2B,CAC3B,QAAS,CAxOjB,yFA4OY,iBAAkB,CAClB,YAAa,CACb,WAAY,CA9OxB,mIAiPgB,cAAe,CAjP/B,mIAsPgB,YAAa,CACb,cAAe,CAvP/B,kDA6PQ,QAAS,CACT,mBAAoB,CA9P5B,kDAmQQ,iBAAkB,CAClB,cAAe,CAClB,UAID,WAAY,CAEZ,0BAA2B,CAG3B,QAAS,CACT,+BAAgC,CAPpC,iBAYQ,iBAAkB,CAClB,oBAAqB,CACrB,cAAe,CAdvB,0BAiBY,WAAY,CAjBxB,8BAoBgB,kBAAmB,CApBnC,6BA2BY,WAAY,CACZ,gBAAiB,CAEjB,uCAnnDG,CAqlDf,4BAqCY,cAAe,CAKf,WAAY,CACZ,gBAAiB,CAEjB,kBAAmB,CA7C/B,mCAgDgB,YAAa,CACb,cAAe,CAjD/B,oCAsDgB,WAAY,CACZ,gBAAiB,CACjB,cAAe,CAxD/B,oCA6DgB,WAAY,CACZ,eAAgB,CAChB,cAAe,CA/D/B,qCAoEgB,iBAAkB,CAClB,cAAe,CArE/B,kCA2EY,aAAc,CA3E1B,qBAgFQ,cAAe,CACf,YAAa,CAChB,QAID,WAAY,CACZ,YAAa,CACb,oBAAqB,CACxB,QAGG,WAAY,CACZ,WAAY,CACZ,YAAa,CACb,YAAa,CACb,eAAgB,CAChB,UAAW,CANf,UASQ,WAAY,CACZ,gBAAiB,CACpB,SAKD,UAAW,CACX,WAAY,CACZ,iBAAkB,CAClB,iBAAkB,CAClB,wBA5sDQ,CA6sDX",sourcesContent:["html, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed, \r\nfigure, figcaption, footer, header, hgroup, \r\nmenu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tborder: 0;\r\n\tfont-size: 100%;\r\n\tfont: inherit;\r\n\tvertical-align: top;\r\n\t// vertical-align: baseline;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure, \r\nfooter, header, hgroup, menu, nav, section {\r\n\tdisplay: block;\r\n}\r\nbody {\r\n\tline-height: 1;\r\n}\r\nol, ul {\r\n\tlist-style: none;\r\n}\r\nblockquote, q {\r\n\tquotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n\tcontent: '';\r\n\tcontent: none;\r\n}\r\ntable {\r\n\tborder-collapse: collapse;\r\n\tborder-spacing: 0;\r\n}",'@import \'../scss/_cssreset.scss\';\r\n\r\n\r\n$color1: #014421;\r\n// $back: #b5ddc9;\r\n$back: #d5ffe4;\r\n$back2: green;\r\n// $backHome:#84c368;\r\n$homeButt: rgb(51, 114, 58);\r\n$backHome: #9ec34e;\r\n$backFood: #ffcc29;\r\n$backDrink: #b2f0ec;\r\n$button: #80dfba;\r\n// $button1: #f3ccff;\r\n$button1: #8eaaff;\r\n// $button2: #a555ec;\r\n$button2: rgb(35, 35, 213);\r\n$button3: rgb(30, 30, 109);\r\n$button4: rgb(42, 88, 180);\r\n$glass1: #8eaaff;\r\n// $glass2: #a555ec;\r\n$glass2: rgb(65, 65, 215);\r\n$glass3: rgb(30, 104, 242);\r\n$glass4: rgb(231, 255, 254);\r\n$glassHover1: rgb(40, 40, 185);\r\n$glassHover2: rgb(17, 17, 95);\r\n$glassHover3: rgb(171, 171, 253);\r\n$bGcolor: #8be8e5;\r\n$bGshadow: #a555ec;\r\n$bGborder: #c787ff;\r\n$country1: #f2a56d;\r\n$country2: #f58634;\r\n$country3: #6b240c;\r\n$country4: #6b240c;\r\n$country5: #bb8c6a;\r\n$country6: #a55a24;\r\n$country7: #f7ccbe;\r\n\r\n$color2: #b2dfdb;\r\n$color3: #80cbc4;\r\n$color4: #FF5F00;\r\n$color5: #F8D568;\r\n$color6: #C0362C;\r\n$color7: #FFBF00;\r\n$colorHyd: #aed581;\r\n$colorProt: #c5e1a5;\r\n$colormilk: #dcedc8;\r\n$colorOil: #f1f8e9;\r\n$colorAlm: #81c784;\r\n$colorFruit: #a5d6a7;\r\n$colorCarr: #c8e6c9;\r\n$carrot: #9de797;\r\n$colorAlco: #e8f5e9;\r\n$colorName: #e65100;\r\n$colorNamehover: #fffcd6;\r\n$colorFor: grey;\r\n$colorPag: #00FA9A;\r\n$colorPagHov: #98FF98;\r\n$drink1: rgba(83, 160, 186, 0.579);\r\n$drink2: #0b0c7cf9;\r\n$measur: rgb(240, 252, 242);\r\n$ingred1: #e8f4f5;\r\n$ingred2: #b1c1f1;\r\n$nameHover: #ef6c00;\r\n$buttonActive: rgb(246, 250, 216);\r\n$paper: white;\r\n\r\n\r\n@font-face {\r\n    font-family: mainfont;\r\n    src: url("../../public/Figtree-Medium.ttf");\r\n}\r\n\r\n@font-face {\r\n    font-family: navfont;\r\n    src: url("../../public/Righteous-Regular.ttf");\r\n}\r\n\r\n@font-face {\r\n    font-family: imgfont;\r\n    src: url("../../public/Dosis-Medium.ttf");\r\n}\r\n\r\n@font-face {\r\n    font-family: cocktailName;\r\n    src: url("../../public/MontserratAlternates-Medium.ttf");\r\n}\r\n\r\n@font-face {\r\n    font-family: recipeName;\r\n    src: url("../../public/Parkinsans-Medium.ttf");\r\n}\r\n\r\n@font-face {\r\n    font-family: category;\r\n    src: url("../../public/EagleLake-Regular.ttf");\r\n}\r\n\r\n@font-face {\r\n    font-family: homeTitle;\r\n    src: url("../../public/Knewave-Regular.ttf");\r\n}\r\n\r\nbody {\r\n    font-family: mainfont;\r\n    font-size: 18px;\r\n}\r\n\r\n.navContainer {\r\n    margin: auto;\r\n    width: 1300px;\r\n\r\n    height: 70px;\r\n    background-color: $color3;\r\n\r\n\r\n    .navigation {\r\n\r\n        display: flex;\r\n        position: fixed;\r\n        background-color: $color1;\r\n        width: 1300px;\r\n        // padding: 30px;\r\n        height: 90px;\r\n        font-size: 26px;\r\n        font-family: navfont;\r\n        // vertical-align: middle;\r\n        z-index: 3;\r\n        align-items: end;\r\n        // align-content: end;\r\n        //  vertical-align: bottom;\r\n\r\n        .button1,\r\n        .button2,\r\n        .button3,\r\n        .button4 {\r\n            background-image: linear-gradient($button1, $button2);\r\n            border-top-right-radius: 15px;\r\n            border-top-left-radius: 15px;\r\n            display: flex;\r\n            // font-weight: bold;\r\n            // width: 90px;\r\n            height: 20px;\r\n            // border-radius: 10px;\r\n            padding: 25px 25px;\r\n            // margin: 10px 10px;\r\n            text-decoration: none;\r\n            vertical-align: middle;\r\n            text-align: center;\r\n            color: $color1;\r\n            // border-bottom: solid 3px $button3;\r\n\r\n            &:hover {\r\n                // background-image: linear-gradient($button3, $button2);\r\n                // border-bottom: solid 3px $button;\r\n                color: $colorNamehover;\r\n\r\n            }\r\n        }\r\n\r\n        .button1 {\r\n            // background-image: url(../../public/img/unnamed.png);\r\n            background-image: linear-gradient($homeButt 10%, $backHome 90%);\r\n\r\n            height: 55px;\r\n            // // align-items: baseline;\r\n\r\n            padding: 15px 20px 0px 20px;\r\n            // text-decoration: none;\r\n            // font-family: homeTitle;\r\n            color: $color1;\r\n            // font-size: 40px;\r\n            // z-index: 4;\r\n            width: 90px;\r\n            text-align: center;\r\n\r\n            .logoImg {\r\n                width: 90px;\r\n\r\n                img {\r\n                    width: 100%;\r\n                }\r\n            }\r\n        }\r\n\r\n        .button2 {\r\n            background-image: linear-gradient($color2 10%, $color3 90%);\r\n        }\r\n\r\n        .button3 {\r\n            background-image: linear-gradient($color4 10%, $backFood 90%);\r\n        }\r\n\r\n        .button4 {\r\n            background-image: linear-gradient($button4 10%, $backDrink 90%);\r\n        }\r\n\r\n        .button1.active,\r\n        .button2.active,\r\n        .button3.active,\r\n        .button4.active {\r\n            color: $nameHover;\r\n        }\r\n    }\r\n}\r\n\r\n.food,\r\n.titleLine,\r\n.titleLineDrink,\r\n.titleLineFood,\r\n.home,\r\n.drinkMain,\r\n.groceries {\r\n    margin: auto;\r\n    width: 1300px;\r\n    // background-image: linear-gradient($back, $back2);\r\n    font-size: 22px;\r\n    display: flex;\r\n\r\n    h1 {\r\n        width: 1300px;\r\n        text-align: center;\r\n        font-family: mainFont;\r\n        font-size: 32px;\r\n        padding: 35px 0px 15px 0px;\r\n        color: $color1;\r\n    }\r\n\r\n    h2 {\r\n        width: 1300px;\r\n        text-align: center;\r\n        font-family: homeTitle;\r\n        font-size: 45px;\r\n\r\n    }\r\n\r\n    .slide-container {\r\n        padding-top: 40px;\r\n        margin: auto;\r\n        width: 500px;\r\n    }\r\n\r\n    .suggestion,\r\n    .homeSearch {\r\n        width: 33%;\r\n        padding: 0px 30px;\r\n\r\n        .drink {\r\n            position: relative;\r\n            display: inline-block;\r\n            // font-family: cocktailName;\r\n            cursor: pointer;\r\n\r\n            .sugestImg {\r\n                width: 420px;\r\n            }\r\n\r\n            img {\r\n                width: 420px;\r\n            }\r\n\r\n            .drinkDown {\r\n                display: none;\r\n                font-size: 20px;\r\n                color: $measur;\r\n                text-align: center;\r\n                position: absolute;\r\n                top: 0px;\r\n                z-index: 2;\r\n                width: 420px;\r\n                min-height: 420px;\r\n                background-image: linear-gradient($drink1, $drink2);\r\n                vertical-align: bottom;\r\n\r\n                .categ {\r\n                    padding: 20px;\r\n                    font-size: 18px;\r\n                    text-align: center;\r\n                }\r\n\r\n                .measur {\r\n                    padding: 5px;\r\n                    text-align: right;\r\n                }\r\n\r\n                .ingred {\r\n                    padding: 5px;\r\n                    text-align: left;\r\n                }\r\n\r\n                .instruc {\r\n                    padding: 20px;\r\n                    font-size: 22px;\r\n                    text-align: justify;\r\n                }\r\n            }\r\n\r\n            &:hover .drinkDown {\r\n                display: block;\r\n            }\r\n        }\r\n\r\n        .drinkLink {\r\n            font-size: 25px;\r\n            padding: 10px;\r\n            font-family: cocktailname;\r\n        }\r\n    }\r\n\r\n    .homeSearch {\r\n        width: 300px;\r\n        padding: 0px;\r\n\r\n\r\n        .cont {\r\n            width: 300px;\r\n\r\n            .paper {\r\n                width: 300px;\r\n                margin-left: 0px;\r\n                margin-top: 30px;\r\n\r\n                background-color: $paper;\r\n\r\n                input {\r\n                    font-size: 22px;\r\n                    width: 235px;\r\n                    overflow: hidden;\r\n                    padding-left: 10px;\r\n                }\r\n\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    .container {\r\n\r\n        min-width: 450px;\r\n        // background-color: $back;\r\n\r\n        .area {\r\n            padding: 20px;\r\n            display: grid;\r\n            grid-template-columns: auto auto auto auto auto;\r\n            gap: 5px;\r\n\r\n            .countryT {\r\n                // background-image: linear-gradient($colormilk, $color5);\r\n                color: $color1;\r\n                width: 130px;\r\n                margin: 0px;\r\n                padding: 10px;\r\n\r\n            }\r\n\r\n            .country,\r\n            .glass {\r\n                width: 130px;\r\n                padding: 10px;\r\n                // border-image: linear-gradient($drink1, $country2);\r\n                border: 1px solid $country3;\r\n                // border-image: url(../../public/assets/img/green.jpg);\r\n                // background-image: url(../../public/assets/img/green.jpg);\r\n                // background-color: $country1;\r\n                background-image: linear-gradient($country1, $country2);\r\n\r\n                border-radius: 8px;\r\n                color: $country4;\r\n                margin: 0px;\r\n                text-align: center;\r\n                cursor: pointer;\r\n\r\n                &:hover {\r\n                    background-image: linear-gradient($country5, $country6);\r\n                    color: $country7;\r\n\r\n\r\n                }\r\n\r\n            }\r\n\r\n            .glass {\r\n                background-image: linear-gradient($glass1, $glass2);\r\n                border: 1px solid $glass3;\r\n                color: $glass4;\r\n\r\n                &:hover {\r\n                    background-image: linear-gradient($glassHover1, $glassHover2);\r\n\r\n                    color: $glassHover3;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        p {\r\n            text-align: left;\r\n            margin: 20px 30px;\r\n            padding: 10px;\r\n            width: 300px;\r\n        }\r\n\r\n        .paper {\r\n            width: 300px;\r\n            margin-left: 30px;\r\n            margin-top: 30px;\r\n\r\n            background-color: $paper;\r\n\r\n            input {\r\n                font-size: 22px;\r\n                width: 220px;\r\n                overflow: hidden;\r\n                padding-left: 10px;\r\n                background-color: $paper;\r\n\r\n            }\r\n\r\n\r\n        }\r\n\r\n\r\n        .title {\r\n            background-image: linear-gradient($color2, $color3);\r\n            min-width: 650px;\r\n\r\n            th {\r\n                padding: 30px 20px 20px 20px;\r\n                text-align: left;\r\n            }\r\n\r\n            td {\r\n                padding: 20px 15px;\r\n            }\r\n        }\r\n\r\n        .hydrates {\r\n            padding: 5px 20px;\r\n            background-color: $colorHyd;\r\n        }\r\n\r\n        .prot {\r\n            background-color: $colorProt;\r\n        }\r\n\r\n        .milk {\r\n            background-color: $colormilk;\r\n        }\r\n\r\n        .oil {\r\n            background-color: $colorOil;\r\n        }\r\n\r\n        .almond {\r\n            background-color: $colorAlm;\r\n        }\r\n\r\n        .fruit {\r\n            background-color: $colorFruit;\r\n        }\r\n\r\n        .carrot {\r\n            background-color: $carrot;\r\n        }\r\n\r\n        .alcohol {\r\n            background-color: $colorAlco;\r\n        }\r\n\r\n        input {\r\n            background-color: $colorCarr;\r\n\r\n            font-size: 20px;\r\n            padding-left: 10px;\r\n\r\n            width: 220px;\r\n        }\r\n\r\n        .protein {\r\n            padding: 5px 15px;\r\n            min-width: 60px;\r\n            max-width: 60px;\r\n            overflow: hidden;\r\n\r\n            .inputPro {\r\n                width: 60px;\r\n                background-color: $colorCarr;\r\n            }\r\n        }\r\n\r\n        .name {\r\n            padding: 5px 15px;\r\n            color: $color1;\r\n            cursor: pointer;\r\n\r\n            &:hover {\r\n                color: $nameHover;\r\n            }\r\n        }\r\n\r\n        .noLink {\r\n            padding: 5px 15px;\r\n            color: $color1;\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n.home,\r\n.titleLine {\r\n    background-color: $backHome;\r\n}\r\n\r\n.titleLineDrink {\r\n    background-color: $backDrink;\r\n\r\n}\r\n\r\n.titleLineFood {\r\n    background-color: $backFood;\r\n}\r\n\r\n.drinkMain {\r\n    background-color: $backDrink;\r\n}\r\n\r\n.food {\r\n    background-color: $backFood;\r\n}\r\n\r\n.groceries {\r\n    background-color: $back;\r\n}\r\n\r\n.sliderDiv {\r\n    width: 840px;\r\n    background-color: $color6;\r\n\r\n    margin: auto;\r\n\r\n    .imageFood {\r\n        width: 300px;\r\n    }\r\n}\r\n\r\n.recipe,\r\n.drinkGrid,\r\n.areaMain {\r\n    margin: auto;\r\n    width: 1300px;\r\n    font-size: 22px;\r\n    background-color: $backHome;\r\n\r\n    .abow {\r\n        height: 70px;\r\n\r\n\r\n    }\r\n\r\n    .resTitle {\r\n        text-align: left;\r\n        padding: 30px;\r\n        font-family: cocktailName;\r\n        font-size: 26px;\r\n        color: $color1;\r\n    }\r\n\r\n    .results,\r\n    .resHome {\r\n        display: flex;\r\n        padding: 10px 20px;\r\n\r\n        .recipeResult {\r\n            font-weight: 500;\r\n            padding: 10px;\r\n            font-size: 28px;\r\n            width: 700px;\r\n            font-family: recipeName;\r\n            cursor: pointer;\r\n\r\n            &:hover {\r\n                color: $colorNamehover;\r\n            }\r\n\r\n        }\r\n\r\n        .category {\r\n            width: 480px;\r\n            padding: 0px 20px;\r\n\r\n            .recipeName2 {\r\n                font-weight: 500;\r\n                font-family: category;\r\n                font-size: 28px;\r\n                padding: 10px 20px;\r\n                width: 200px;\r\n                height: 30px;\r\n  \r\n                color: $drink2;\r\n                text-align: left;\r\n                cursor: pointer;\r\n\r\n                &:hover {\r\n                    color: $colorNamehover;\r\n                }\r\n            }\r\n\r\n            .imgThumbCat {\r\n                padding: 20px;\r\n                width: 450px;\r\n            }\r\n        }\r\n\r\n        .descr {\r\n            width: 700px;\r\n            text-align: justify;\r\n        }\r\n\r\n\r\n\r\n        .imgThumb {\r\n            padding: 0px;\r\n            width: 60px;\r\n            box-shadow: 0px 4px 5px rgb(6, 14, 90);\r\n            border-radius: 5px;\r\n            cursor: pointer;\r\n\r\n            &:hover {\r\n                box-shadow: 0px 4px 5px $colorNamehover;\r\n            }\r\n        }\r\n    }\r\n\r\n    .recipeName {\r\n\r\n        font-weight: 500;\r\n        text-align: center;\r\n        font-size: 28px;\r\n        padding: 50px 0px 10px 0px;\r\n        width: 100%;\r\n        font-family: recipeName;\r\n\r\n        // background-image: linear-gradient($carrot, $color4);\r\n\r\n\r\n        p {\r\n            padding-top: 25px;\r\n            font-size: 20px;\r\n        }\r\n    }\r\n\r\n    .mealImg {\r\n        display: flex;\r\n\r\n        padding: 40px 0px;\r\n        // align-items: stretch;\r\n        justify-content: center;\r\n\r\n        .imgMeal {\r\n\r\n            width: 550px;\r\n\r\n            // margin-top: 50px;\r\n        }\r\n    }\r\n\r\n    .glassGrid {\r\n        padding: 20px;\r\n        display: grid;\r\n        gap: 10px;\r\n        grid-template-columns: auto auto auto auto auto auto auto auto auto auto;\r\n\r\n        .buttonG {\r\n            background-image: linear-gradient($button1, $button2);\r\n            border-radius: 20px;\r\n            padding: 10px 5px;\r\n            font-size: 20px;\r\n            text-align: center;\r\n            color: $bGcolor;\r\n            cursor: pointer;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            box-shadow: 3px 5px 7px $bGshadow;\r\n\r\n            border: 1px solid $bGborder;\r\n\r\n\r\n            &:hover {\r\n                color: $bGcolor;\r\n                background-image: linear-gradient($button2, $button3);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    img {\r\n        // padding: 15px;\r\n        width: 600px;\r\n    }\r\n\r\n    .for,\r\n    .serving {\r\n        color: $colorFor;\r\n        padding: 20px 10px 5px 60px;\r\n    }\r\n\r\n    .serving {\r\n        color: black;\r\n    }\r\n\r\n    .ingPlace {\r\n\r\n        display: flex;\r\n\r\n        .recName {\r\n            width: 100%;\r\n            margin-top: 140px;\r\n            text-align: center;\r\n            font-size: 28px;\r\n            vertical-align: middle;\r\n            font-family: cocktailName;\r\n\r\n            p {\r\n                font-size: 18px;\r\n                text-align: center;\r\n                padding: 20px;\r\n            }\r\n\r\n\r\n        }\r\n\r\n        .iframe {\r\n            margin-top: 30px;\r\n            width: 500px;\r\n            height: 310px;\r\n        }\r\n\r\n        .imgProps {\r\n            padding: 40px 40px;\r\n            width: 550px;\r\n        }\r\n\r\n        p {\r\n            text-align: right;\r\n            padding: 25px 40px;\r\n            font-size: 20px;\r\n\r\n        }\r\n\r\n        .measPlace {\r\n            display: flex;\r\n            width: 50%;\r\n\r\n            .measure {\r\n                display: flex;\r\n                min-width: 400px;\r\n                font-size: 28px;\r\n\r\n                align-items: center;\r\n\r\n                text-align: left;\r\n                padding: 0px 25px;\r\n\r\n            }\r\n\r\n            .ingImg {\r\n                margin: 3px 20px;\r\n                width: 60px;\r\n                padding: 0px;\r\n            }\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n        .context {\r\n            // width: 50%;\r\n            padding: 25px 40px;\r\n            font-size: 28px;\r\n            text-align: justify;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    .imageNum {\r\n        margin: auto;\r\n        display: flex;\r\n        width: 1300px;\r\n        overflow-x: auto;\r\n        font-family: imgfont;\r\n\r\n        background-image: linear-gradient($color1, $button2);\r\n\r\n        .another {\r\n            padding: 8px;\r\n        }\r\n\r\n        .numbIm {\r\n            padding: 8px;\r\n            text-align: center;\r\n            font-size: 22px;\r\n            font-weight: 500;\r\n            color: $colorName;\r\n            cursor: pointer;\r\n\r\n            &:hover {\r\n                color: $colorNamehover;\r\n            }\r\n\r\n            &:active {\r\n                color: $colorName;\r\n            }\r\n        }\r\n\r\n        .numbActIm {\r\n            text-align: center;\r\n            padding: 8px;\r\n            font-size: 22px;\r\n            font-weight: 500;\r\n            background-color: $button2;\r\n            border-radius: 5px;\r\n            color: $colorNamehover;\r\n        }\r\n    }\r\n\r\n    .cocktailGrid {\r\n        display: grid;\r\n        padding: 40px;\r\n        grid-template-columns: auto auto;\r\n        gap: 20px;\r\n\r\n        .wrap {\r\n            background-image: linear-gradient($ingred1, $ingred2);\r\n            border-radius: 5px;\r\n            padding: 20px;\r\n            width: 550px;\r\n\r\n            .cocktailName {\r\n                font-size: 25px;\r\n                text-align: center;\r\n                // font-family: cocktailName;\r\n            }\r\n\r\n            .cocktailCont {\r\n                padding: 20px;\r\n                font-size: 20px;\r\n            }\r\n        }\r\n    }\r\n\r\n    .pagin {\r\n        margin: 0;\r\n        padding-bottom: 30px;\r\n        background-color: $back;\r\n    }\r\n\r\n    .paginDrink {\r\n        margin: 0;\r\n        padding-bottom: 30px;\r\n        background-color: $backDrink;\r\n    }\r\n\r\n    .photo {\r\n        text-align: center;\r\n        font-size: 32px;\r\n\r\n        .subtitle {\r\n            font-size: 12px;\r\n            text-align: center;\r\n        }\r\n    }\r\n}\r\n\r\n.drinkGrid {\r\n    background-color: $backDrink;\r\n\r\n}\r\n\r\n.areaMain {\r\n    background-color: $backFood;\r\n}\r\n\r\n.cocktail {\r\n    width: 1240px;\r\n    margin: auto;\r\n    padding: 30px 30px 0px 30px;\r\n    background-color: $backDrink;\r\n    display: grid;\r\n    gap: 35px;\r\n    grid-template-columns: auto auto auto;\r\n\r\n\r\n    h3 {\r\n        background-color: #FFBF00;\r\n        padding: 20px 0px;\r\n    }\r\n\r\n    .drink {\r\n        position: relative;\r\n        display: inline-block;\r\n        // font-family: cocktailName;\r\n        cursor: pointer;\r\n\r\n        .imgCont {\r\n            width: 390px;\r\n            // border: 2px solid rgb(1, 221, 255);\r\n            //    border-top: 10px solid black;\r\n            // border: 10px solid rgba(255, 255, 255, 0.447);\r\n\r\n            border-radius: 20px;\r\n\r\n            img {\r\n                border-radius: 20px;\r\n                width: 100%;\r\n                // display: block;\r\n                // box-shadow: inset 10px 26px 12px black;\r\n                // box-shadow: inset 10px 6px 12px black;\r\n\r\n\r\n            }\r\n        }\r\n\r\n        .inerShadow {\r\n            display: block;\r\n            position: absolute;\r\n            top: 0px;\r\n            z-index: 1;\r\n            width: 390px;\r\n            min-height: 390px;\r\n            // background-image: linear-gradient($drink1, $drink2);\r\n            box-shadow: inset 0px -25px 25px $backDrink;\r\n\r\n\r\n        }\r\n\r\n        .drinkDown {\r\n            display: none;\r\n            font-size: 20px;\r\n            color: $measur;\r\n            text-align: center;\r\n            position: absolute;\r\n            top: 0px;\r\n            z-index: 2;\r\n            width: 390px;\r\n            min-height: 390px;\r\n            background-image: linear-gradient($drink1, $drink2);\r\n            vertical-align: bottom;\r\n            border-radius: 20px;\r\n\r\n\r\n\r\n\r\n            .categ {\r\n                padding: 20px;\r\n                font-size: 18px;\r\n                text-align: center;\r\n            }\r\n\r\n            .measur {\r\n                padding: 5px;\r\n                text-align: right;\r\n            }\r\n\r\n            .ingred {\r\n                padding: 5px;\r\n                text-align: left;\r\n            }\r\n\r\n            .instruc {\r\n                padding: 20px 30px;\r\n                font-size: 22px;\r\n                text-align: justify;\r\n            }\r\n        }\r\n\r\n        &:hover .drinkDown {\r\n            display: block;\r\n            box-shadow: inset 0px -25px 25px $backDrink;\r\n\r\n        }\r\n    }\r\n\r\n    .drinkLink {\r\n        font-size: 25px;\r\n        padding: 10px;\r\n        text-align: center;\r\n        font-family: cocktailname;\r\n        text-shadow: 2px 2px 4px $bGshadow;\r\n    }\r\n}\r\n\r\n.loader {\r\n    margin: auto;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    background-color: $back;\r\n    width: 1300px;\r\n    height: 850px;\r\n    padding-bottom: 200px;\r\n}\r\n\r\n.footer {\r\n    margin: auto;\r\n    width: 1300px;\r\n    height: 550px;\r\n\r\n    background-color: $back;\r\n    display: flex;\r\n    align-items: end;\r\n    // justify-content: center;\r\n    color: grey;\r\n\r\n    p {\r\n        width: 1300px;\r\n\r\n        border-top: solid 1px grey;\r\n        padding: 15px 0px;\r\n        text-align: center;\r\n\r\n    }\r\n\r\n}\r\n\r\n.arrowup {\r\n    width: 15px;\r\n    height: 15px;\r\n    border-radius: 4px;\r\n    text-align: center;\r\n    border: 3px solid $color1;\r\n}\r\n\r\n@media screen and (max-width: 500px) {\r\n\r\n    body {\r\n        font-size: 14px;\r\n    }\r\n\r\n    .navContainer {\r\n        width: 355px;\r\n        height: 34px;\r\n\r\n        .navigation {\r\n            width: 355px;\r\n            // padding: 10px;\r\n            font-size: 18px;\r\n            height: 50px;\r\n\r\n\r\n            .button1,\r\n            .button2,\r\n            .button3,\r\n            .button4 {\r\n\r\n                height: 14px;\r\n                padding: 10px 10px;\r\n                border-top-right-radius: 8px;\r\n                border-top-left-radius: 8px;\r\n\r\n\r\n\r\n            }\r\n\r\n            .button1 {\r\n\r\n                height: 20px;\r\n                padding: 6px 10px 8px 10px;\r\n                font-size: 20px;\r\n                width: 55px;\r\n\r\n                .logoImg {\r\n\r\n                    width: 50px;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    .food,\r\n    .titleLine,\r\n    .titleLineDrink,\r\n    .titleLineFood,\r\n    .home,\r\n    .drinkMain,\r\n    .groceries {\r\n\r\n        width: 355px;\r\n\r\n        font-size: 16px;\r\n        display: block;\r\n\r\n        h1 {\r\n            width: 355px;\r\n            font-size: 20px;\r\n            padding: 30px 0px 10px 0px;\r\n\r\n        }\r\n\r\n        h2 {\r\n            width: 355px;\r\n            font-size: 30px;\r\n        }\r\n\r\n        .slide-container {\r\n            padding: 0px;\r\n\r\n            width: 355px;\r\n        }\r\n\r\n        .suggestion,\r\n        .homeSearch {\r\n            width: 355px;\r\n            padding: 0px;\r\n\r\n            .drink {\r\n                cursor: pointer;\r\n\r\n                .sugestImg {\r\n                    width: 355px;\r\n                }\r\n\r\n                img {\r\n                    width: 355px;\r\n                }\r\n\r\n                .drinkDown {\r\n                    display: none;\r\n                    font-size: 18px;\r\n\r\n\r\n                    width: 355px;\r\n                    min-height: 355px;\r\n\r\n\r\n                    .categ {\r\n                        padding: 15px;\r\n                        font-size: 18px;\r\n                        text-align: center;\r\n                    }\r\n\r\n                    .measur {\r\n                        padding: 5px;\r\n                        text-align: right;\r\n                    }\r\n\r\n                    .ingred {\r\n                        padding: 5px;\r\n                        text-align: left;\r\n                    }\r\n\r\n                    .instruc {\r\n                        padding: 20px;\r\n                        font-size: 22px;\r\n                        text-align: justify;\r\n                    }\r\n                }\r\n\r\n                &:hover .drinkDown {\r\n                    display: block;\r\n                }\r\n            }\r\n\r\n            .drinkLink {\r\n                font-size: 20px;\r\n                padding: 10px;\r\n\r\n            }\r\n        }\r\n\r\n        .homeSearch {\r\n            width: 260px;\r\n            padding: 0px;\r\n\r\n            .cont {\r\n                width: 260px;\r\n                padding: 5px 25px;\r\n\r\n                .paper {\r\n                    width: 260px;\r\n                    margin-left: 0px;\r\n                    margin-top: 30px;\r\n\r\n\r\n\r\n                    input {\r\n                        font-size: 14px;\r\n                        width: 200px;\r\n                        overflow: hidden;\r\n                        padding-left: 10px;\r\n                    }\r\n\r\n                    button {\r\n                        font-size: 16px;\r\n                    }\r\n\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        .container {\r\n\r\n            min-width: 355px;\r\n\r\n            .area {\r\n                padding: 10px;\r\n                display: grid;\r\n                grid-template-columns: auto auto auto;\r\n                gap: 3px;\r\n\r\n                .countryT {\r\n\r\n                    width: 90px;\r\n                    margin: 0px;\r\n                    padding: 5px;\r\n                    font-size: 12px;\r\n\r\n                }\r\n\r\n                .country,\r\n                .glass {\r\n                    width: 90px;\r\n                    padding: 5px;\r\n                    font-size: 12px;\r\n                    border-radius: 5px;\r\n\r\n                    margin: 0px;\r\n\r\n\r\n\r\n                }\r\n            }\r\n\r\n\r\n            p {\r\n                text-align: justify;\r\n                font-size: 18px;\r\n                margin: 0px 35px;\r\n                padding: 15px 0px;\r\n                width: 285px;\r\n            }\r\n\r\n            .paper {\r\n                width: 285px;\r\n                margin-left: 35px;\r\n                margin-top: 15px;\r\n\r\n                input {\r\n\r\n                    font-size: 14px;\r\n                    width: 200px;\r\n                }\r\n\r\n                button {\r\n                    font-size: 16px;\r\n                }\r\n\r\n            }\r\n\r\n\r\n            .title {\r\n\r\n                min-width: 355px;\r\n                font-size: 12px;\r\n\r\n                th {\r\n                    padding: 25px 5px 5px 5px;\r\n                    text-align: left;\r\n                }\r\n\r\n                td {\r\n                    padding: 8px 8px;\r\n                }\r\n            }\r\n\r\n            .hydrates {\r\n                padding: 5px 10px;\r\n\r\n            }\r\n\r\n            .prot {\r\n                background-color: $colorProt;\r\n            }\r\n\r\n            .milk {\r\n                background-color: $colormilk;\r\n            }\r\n\r\n            .oil {\r\n                background-color: $colorOil;\r\n            }\r\n\r\n            .almond {\r\n                background-color: $colorAlm;\r\n            }\r\n\r\n            .fruit {\r\n                background-color: $colorFruit;\r\n            }\r\n\r\n            .carrot {\r\n                background-color: $carrot;\r\n            }\r\n\r\n            .alcohol {\r\n                background-color: $colorAlco;\r\n            }\r\n\r\n            input {\r\n                // background-color: $colorCarr;\r\n\r\n                font-size: 12px;\r\n                padding-left: 3px;\r\n\r\n                width: 220px;\r\n            }\r\n\r\n            .paper {\r\n                button {\r\n                    font-size: 14px;\r\n                }\r\n            }\r\n\r\n            .protein {\r\n                padding: 5px 10px;\r\n                min-width: 30px;\r\n                max-width: 30px;\r\n\r\n                .inputPro {\r\n                    width: 30px;\r\n                    background-color: $colorCarr;\r\n                }\r\n            }\r\n\r\n            .name {\r\n                padding: 5px 10px;\r\n                color: $color1;\r\n                cursor: pointer;\r\n\r\n                &:hover {\r\n                    color: $nameHover;\r\n                }\r\n            }\r\n\r\n            .noLink {\r\n                padding: 5px 10px;\r\n                color: $color1;\r\n            }\r\n        }\r\n    }\r\n\r\n    .titleLine {\r\n        display: flex;\r\n    }\r\n\r\n    .titleLineDrink {\r\n        display: flex;\r\n    }\r\n\r\n    .titleLineFood {\r\n        display: flex;\r\n    }\r\n\r\n    .recipe,\r\n    .drinkGrid,\r\n    .areaMain {\r\n\r\n        width: 355px;\r\n        font-size: 18px;\r\n\r\n        .abow {\r\n            height: 50px;\r\n        }\r\n\r\n        .resTitle {\r\n\r\n            padding: 20px;\r\n\r\n            font-size: 20px;\r\n\r\n        }\r\n\r\n        .results,\r\n        .resHome {\r\n            display: flex;\r\n            padding: 10px 20px;\r\n\r\n            .recipeResult {\r\n                font-weight: 300;\r\n                padding: 10px;\r\n                font-size: 18px;\r\n                width: 235px;\r\n\r\n\r\n\r\n\r\n            }\r\n\r\n            .category {\r\n                width: 240px;\r\n                padding: 0px 20px;\r\n\r\n                .recipeName2 {\r\n                    font-weight: 300;\r\n                    font-size: 24px;\r\n                    padding: 10px 15px;\r\n                    width: 200px;\r\n                    height: 30px;\r\n                }\r\n\r\n                .imgThumbCat {\r\n                    padding: 5px;\r\n                    width: 315px;\r\n                }\r\n            }\r\n\r\n            .descr {\r\n                width: 320px;\r\n                text-align: justify;\r\n            }\r\n\r\n            .imgThumbCat {\r\n                padding: 10px;\r\n                width: 150px;\r\n            }\r\n\r\n            .imgThumb {\r\n                width: 60px;\r\n                box-shadow: 0px 4px 5px rgb(6, 14, 90);\r\n                border-radius: 5px;\r\n                cursor: pointer;\r\n\r\n                &:hover {\r\n                    box-shadow: 0px 4px 5px $colorNamehover;\r\n                }\r\n            }\r\n        }\r\n\r\n        .resHome {\r\n            display: block;\r\n        }\r\n\r\n        .recipeName {\r\n            font-weight: 400;\r\n            font-size: 18px;\r\n            padding: 10px;\r\n            padding-top: 30px;\r\n\r\n            p {\r\n\r\n                font-size: 14px;\r\n            }\r\n        }\r\n\r\n        .mealImg {\r\n            padding: 15px 0px;\r\n\r\n            .imgMeal {\r\n                width: 355px;\r\n\r\n                margin-top: 20px;\r\n            }\r\n        }\r\n\r\n\r\n        .glassGrid {\r\n            padding: 10px;\r\n            gap: 10px;\r\n            grid-template-columns: auto auto auto;\r\n\r\n            .buttonG {\r\n\r\n                border-radius: 10px;\r\n                padding: 10px 5px;\r\n                font-size: 14px;\r\n                box-shadow: 0px 5px 6px $bGshadow;\r\n\r\n            }\r\n        }\r\n\r\n        img {\r\n            padding: 10px;\r\n            width: 335px;\r\n        }\r\n\r\n        .for,\r\n        .serving {\r\n\r\n            padding: 15px 10px 5px 30px;\r\n        }\r\n\r\n        .serving {\r\n            color: black;\r\n        }\r\n\r\n        .ingPlace {\r\n\r\n            display: block;\r\n\r\n            .recName {\r\n                width: 350px;\r\n                margin-top: 20px;\r\n                text-align: center;\r\n                font-size: 20px;\r\n                vertical-align: middle;\r\n\r\n\r\n                p {\r\n                    font-size: 12px;\r\n\r\n                    padding: 10px;\r\n                }\r\n\r\n\r\n            }\r\n\r\n            .iframe {\r\n                margin-top: 20px;\r\n                width: 350px;\r\n                height: 217px;\r\n            }\r\n\r\n            .imgProps {\r\n                padding: 20px 0px;\r\n                width: 355px;\r\n            }\r\n\r\n            p {\r\n                width: 300px;\r\n                font-size: 12px;\r\n                padding: 20px 25px;\r\n            }\r\n\r\n            .measPlace {\r\n                display: flex;\r\n                width: 100%;\r\n\r\n                .measure {\r\n                    min-width: 250px;\r\n\r\n\r\n                    padding: 0px 15px;\r\n                    font-size: 18px;\r\n\r\n                }\r\n\r\n                .ingImg {\r\n                    margin: 2px 10px;\r\n                    width: 40px;\r\n                    padding: 0px;\r\n                }\r\n            }\r\n\r\n\r\n\r\n            .context {\r\n                position: relative;\r\n                width: 315px;\r\n                padding: 5px 20px;\r\n                text-align: justify;\r\n                font-size: 18px;\r\n            }\r\n\r\n        }\r\n\r\n        .imageNum {\r\n\r\n            display: flex;\r\n            width: 355px;\r\n\r\n            .another {\r\n                padding: 8px;\r\n            }\r\n\r\n            .numbIm {\r\n                padding: 5px;\r\n\r\n                font-size: 14px;\r\n                font-weight: 400;\r\n                // color: $colorName;\r\n\r\n            }\r\n\r\n            .numbActIm {\r\n\r\n                padding: 5px;\r\n                font-size: 18px;\r\n                font-weight: 500;\r\n            }\r\n        }\r\n\r\n        .cocktailGrid {\r\n            display: grid;\r\n            padding: 5px;\r\n            grid-template-columns: auto;\r\n            gap: 20px;\r\n\r\n            .wrap {\r\n\r\n                border-radius: 5px;\r\n                padding: 15px;\r\n                width: 315px;\r\n\r\n                .cocktailName {\r\n                    font-size: 18px;\r\n\r\n                }\r\n\r\n                .cocktailCont {\r\n                    padding: 15px;\r\n                    font-size: 16px;\r\n                }\r\n            }\r\n        }\r\n\r\n        .pagin {\r\n            margin: 0;\r\n            padding-bottom: 20px;\r\n\r\n        }\r\n\r\n        .photo {\r\n            text-align: center;\r\n            font-size: 20px;\r\n        }\r\n    }\r\n\r\n    .cocktail {\r\n        width: 325px;\r\n\r\n        padding: 35px 15px 0px 15px;\r\n\r\n\r\n        gap: 10px;\r\n        grid-template-columns: auto auto;\r\n\r\n\r\n\r\n        .drink {\r\n            position: relative;\r\n            display: inline-block;\r\n            cursor: pointer;\r\n\r\n            .imgCont {\r\n                width: 160px;\r\n\r\n                img {\r\n                    border-radius: 10px;\r\n                }\r\n            }\r\n\r\n            .inerShadow {\r\n\r\n\r\n                width: 160px;\r\n                min-height: 160px;\r\n                // background-image: linear-gradient($drink1, $drink2);\r\n                box-shadow: inset 0px -20px 20px $backDrink;\r\n\r\n\r\n            }\r\n\r\n            .drinkDown {\r\n\r\n                font-size: 16px;\r\n\r\n\r\n\r\n\r\n                width: 160px;\r\n                min-height: 160px;\r\n\r\n                border-radius: 10px;\r\n\r\n                .categ {\r\n                    padding: 10px;\r\n                    font-size: 13px;\r\n\r\n                }\r\n\r\n                .measur {\r\n                    padding: 2px;\r\n                    text-align: right;\r\n                    font-size: 12px;\r\n\r\n                }\r\n\r\n                .ingred {\r\n                    padding: 2px;\r\n                    text-align: left;\r\n                    font-size: 12px;\r\n\r\n                }\r\n\r\n                .instruc {\r\n                    padding: 10px 20px;\r\n                    font-size: 12px;\r\n\r\n                }\r\n            }\r\n\r\n            &:hover .drinkDown {\r\n                display: block;\r\n            }\r\n        }\r\n\r\n        .drinkLink {\r\n            font-size: 18px;\r\n            padding: 10px;\r\n        }\r\n    }\r\n\r\n    .loader {\r\n        width: 355px;\r\n        height: 750px;\r\n        padding-bottom: 200px;\r\n    }\r\n\r\n    .footer {\r\n        margin: auto;\r\n        width: 355px;\r\n        height: 350px;\r\n        display: flex;\r\n        align-items: end;\r\n        color: grey;\r\n\r\n        p {\r\n            width: 355px;\r\n            padding: 15px 0px;\r\n        }\r\n\r\n    }\r\n\r\n    .arrowup {\r\n        width: 15px;\r\n        height: 15px;\r\n        border-radius: 4px;\r\n        text-align: center;\r\n        border: 3px solid $color1;\r\n    }\r\n}'],sourceRoot:""}]);const C=g},540:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},771:(e,t,n)=>{"use strict";var r=n(4994);t.X4=function(e,t){return e=l(e),t=i(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),"color"===e.type?e.values[3]=`/${t}`:e.values[3]=t,c(e)},t.e$=u,t.eM=function(e,t){const n=s(e),r=s(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)},t.a=d;var a=r(n(8944)),o=r(n(7535));function i(e,t=0,n=1){return(0,o.default)(e,t,n)}function l(e){if(e.type)return e;if("#"===e.charAt(0))return l(function(e){e=e.slice(1);const t=new RegExp(`.{1,${e.length>=6?2:1}}`,"g");let n=e.match(t);return n&&1===n[0].length&&(n=n.map((e=>e+e))),n?`rgb${4===n.length?"a":""}(${n.map(((e,t)=>t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3)).join(", ")})`:""}(e));const t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla","color"].indexOf(n))throw new Error((0,a.default)(9,e));let r,o=e.substring(t+1,e.length-1);if("color"===n){if(o=o.split(" "),r=o.shift(),4===o.length&&"/"===o[3].charAt(0)&&(o[3]=o[3].slice(1)),-1===["srgb","display-p3","a98-rgb","prophoto-rgb","rec-2020"].indexOf(r))throw new Error((0,a.default)(10,r))}else o=o.split(",");return o=o.map((e=>parseFloat(e))),{type:n,values:o,colorSpace:r}}function c(e){const{type:t,colorSpace:n}=e;let{values:r}=e;return-1!==t.indexOf("rgb")?r=r.map(((e,t)=>t<3?parseInt(e,10):e)):-1!==t.indexOf("hsl")&&(r[1]=`${r[1]}%`,r[2]=`${r[2]}%`),r=-1!==t.indexOf("color")?`${n} ${r.join(" ")}`:`${r.join(", ")}`,`${t}(${r})`}function s(e){let t="hsl"===(e=l(e)).type||"hsla"===e.type?l(function(e){e=l(e);const{values:t}=e,n=t[0],r=t[1]/100,a=t[2]/100,o=r*Math.min(a,1-a),i=(e,t=(e+n/30)%12)=>a-o*Math.max(Math.min(t-3,9-t,1),-1);let s="rgb";const u=[Math.round(255*i(0)),Math.round(255*i(8)),Math.round(255*i(4))];return"hsla"===e.type&&(s+="a",u.push(t[3])),c({type:s,values:u})}(e)).values:e.values;return t=t.map((t=>("color"!==e.type&&(t/=255),t<=.03928?t/12.92:((t+.055)/1.055)**2.4))),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function u(e,t){if(e=l(e),t=i(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb")||-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]*=1-t;return c(e)}function d(e,t){if(e=l(e),t=i(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(let n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;else if(-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]+=(1-e.values[n])*t;return c(e)}},961:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(2551)},1020:(e,t,n)=>{"use strict";var r=n(6540),a=Symbol.for("react.element"),o=(Symbol.for("react.fragment"),Object.prototype.hasOwnProperty),i=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function c(e,t,n){var r,c={},s=null,u=null;for(r in void 0!==n&&(s=""+n),void 0!==t.key&&(s=""+t.key),void 0!==t.ref&&(u=t.ref),t)o.call(t,r)&&!l.hasOwnProperty(r)&&(c[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===c[r]&&(c[r]=t[r]);return{$$typeof:a,type:e,key:s,ref:u,props:c,_owner:i.current}}t.jsx=c,t.jsxs=c},1113:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},1287:(e,t,n)=>{"use strict";var r;n.d(t,{i:()=>l,s:()=>i});var a=n(6540),o=!!(r||(r=n.t(a,2))).useInsertionEffect&&(r||(r=n.t(a,2))).useInsertionEffect,i=o||function(e){return e()},l=o||a.useLayoutEffect},1317:(e,t,n)=>{"use strict";n.d(t,{A:()=>l,Q:()=>o});var r=n(8168),a=n(6540);function o(e){if("object"!=typeof e||null===e)return!1;const t=Object.getPrototypeOf(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)}function i(e){if(a.isValidElement(e)||!o(e))return e;const t={};return Object.keys(e).forEach((n=>{t[n]=i(e[n])})),t}function l(e,t,n={clone:!0}){const c=n.clone?(0,r.A)({},e):e;return o(e)&&o(t)&&Object.keys(t).forEach((r=>{a.isValidElement(t[r])?c[r]=t[r]:o(t[r])&&Object.prototype.hasOwnProperty.call(e,r)&&o(e[r])?c[r]=l(e[r],t[r],n):n.clone?c[r]=o(t[r])?i(t[r]):t[r]:c[r]=t[r]})),c}},1354:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},2532:(e,t,n)=>{"use strict";n.r(t),n.d(t,{GlobalStyles:()=>x.A,StyledEngineProvider:()=>w,ThemeContext:()=>a.T,css:()=>v.AH,default:()=>k,internal_processStyles:()=>C,keyframes:()=>v.i7});var r=n(8168),a=n(4684),o=n(3174),i=n(1287),l=n(41),c=n(6540),s=n(6289),u=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|disableRemotePlayback|download|draggable|encType|enterKeyHint|fetchpriority|fetchPriority|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,d=(0,s.A)((function(e){return u.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91})),p=function(e){return"theme"!==e},f=function(e){return"string"==typeof e&&e.charCodeAt(0)>96?d:p},m=function(e,t,n){var r;if(t){var a=t.shouldForwardProp;r=e.__emotion_forwardProp&&a?function(t){return e.__emotion_forwardProp(t)&&a(t)}:a}return"function"!=typeof r&&n&&(r=e.__emotion_forwardProp),r},h=function(e){var t=e.cache,n=e.serialized,r=e.isStringTag;return(0,l.SF)(t,n,r),(0,i.s)((function(){return(0,l.sk)(t,n,r)})),null},g=function e(t,n){var i,s,u=t.__emotion_real===t,d=u&&t.__emotion_base||t;void 0!==n&&(i=n.label,s=n.target);var p=m(t,n,u),g=p||f(d),v=!g("as");return function(){var y=arguments,b=u&&void 0!==t.__emotion_styles?t.__emotion_styles.slice(0):[];if(void 0!==i&&b.push("label:"+i+";"),null==y[0]||void 0===y[0].raw)b.push.apply(b,y);else{var A=y[0];b.push(A[0]);for(var w=y.length,x=1;x<w;x++)b.push(y[x],A[x])}var k=(0,a.w)((function(e,t,n){var r=v&&e.as||d,i="",u=[],m=e;if(null==e.theme){for(var y in m={},e)m[y]=e[y];m.theme=c.useContext(a.T)}"string"==typeof e.className?i=(0,l.Rk)(t.registered,u,e.className):null!=e.className&&(i=e.className+" ");var A=(0,o.J)(b.concat(u),t.registered,m);i+=t.key+"-"+A.name,void 0!==s&&(i+=" "+s);var w=v&&void 0===p?f(r):g,x={};for(var k in e)v&&"as"===k||w(k)&&(x[k]=e[k]);return x.className=i,n&&(x.ref=n),c.createElement(c.Fragment,null,c.createElement(h,{cache:t,serialized:A,isStringTag:"string"==typeof r}),c.createElement(r,x))}));return k.displayName=void 0!==i?i:"Styled("+("string"==typeof d?d:d.displayName||d.name||"Component")+")",k.defaultProps=t.defaultProps,k.__emotion_real=k,k.__emotion_base=d,k.__emotion_styles=b,k.__emotion_forwardProp=p,Object.defineProperty(k,"toString",{value:function(){return"."+s}}),k.withComponent=function(t,a){return e(t,(0,r.A)({},n,a,{shouldForwardProp:m(k,a,!0)})).apply(void 0,b)},k}}.bind(null);["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){g[e]=g(e)}));var v=n(7437),y=n(5655),b=n(4848);let A;function w(e){const{injectFirst:t,children:n}=e;return t&&A?(0,b.jsx)(a.C,{value:A,children:n}):n}"object"==typeof document&&(A=(0,y.A)({key:"css",prepend:!0}));var x=n(9940);function k(e,t){return g(e,t)}const C=(e,t)=>{Array.isArray(e.__emotion_styles)&&(e.__emotion_styles=t(e.__emotion_styles))}},2551:(e,t,n)=>{"use strict";var r=n(6540),a=n(9982);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,l={};function c(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(l[e]=t,e=0;e<t.length;e++)i.add(t[e])}var u=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,p=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,f={},m={};function h(e,t,n,r,a,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=i}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new h(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new h(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new h(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new h(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new h(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new h(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new h(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new h(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new h(e,5,!1,e.toLowerCase(),null,!1,!1)}));var v=/[\-:]([a-z])/g;function y(e){return e[1].toUpperCase()}function b(e,t,n,r){var a=g.hasOwnProperty(t)?g[t]:null;(null!==a?0!==a.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!d.call(m,e)||!d.call(f,e)&&(p.test(e)?m[e]=!0:(f[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(v,y);g[t]=new h(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(v,y);g[t]=new h(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(v,y);g[t]=new h(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new h(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new h("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new h(e,1,!1,e.toLowerCase(),null,!0,!0)}));var A=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,w=Symbol.for("react.element"),x=Symbol.for("react.portal"),k=Symbol.for("react.fragment"),C=Symbol.for("react.strict_mode"),E=Symbol.for("react.profiler"),S=Symbol.for("react.provider"),N=Symbol.for("react.context"),B=Symbol.for("react.forward_ref"),L=Symbol.for("react.suspense"),_=Symbol.for("react.suspense_list"),P=Symbol.for("react.memo"),M=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var O=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var T=Symbol.iterator;function F(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=T&&e[T]||e["@@iterator"])?e:null}var D,j=Object.assign;function R(e){if(void 0===D)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);D=t&&t[1]||""}return"\n"+D+e}var I=!1;function z(e,t){if(!e||I)return"";I=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var a=t.stack.split("\n"),o=r.stack.split("\n"),i=a.length-1,l=o.length-1;1<=i&&0<=l&&a[i]!==o[l];)l--;for(;1<=i&&0<=l;i--,l--)if(a[i]!==o[l]){if(1!==i||1!==l)do{if(i--,0>--l||a[i]!==o[l]){var c="\n"+a[i].replace(" at new "," at ");return e.displayName&&c.includes("<anonymous>")&&(c=c.replace("<anonymous>",e.displayName)),c}}while(1<=i&&0<=l);break}}}finally{I=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?R(e):""}function $(e){switch(e.tag){case 5:return R(e.type);case 16:return R("Lazy");case 13:return R("Suspense");case 19:return R("SuspenseList");case 0:case 2:case 15:return z(e.type,!1);case 11:return z(e.type.render,!1);case 1:return z(e.type,!0);default:return""}}function G(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case k:return"Fragment";case x:return"Portal";case E:return"Profiler";case C:return"StrictMode";case L:return"Suspense";case _:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case N:return(e.displayName||"Context")+".Consumer";case S:return(e._context.displayName||"Context")+".Provider";case B:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case P:return null!==(t=e.displayName||null)?t:G(e.type)||"Memo";case M:t=e._payload,e=e._init;try{return G(e(t))}catch(e){}}return null}function Y(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return G(t);case 8:return t===C?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function U(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function W(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function H(e){e._valueTracker||(e._valueTracker=function(e){var t=W(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function q(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=W(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function V(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Q(e,t){var n=t.checked;return j({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function K(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=U(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Z(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function X(e,t){Z(e,t);var n=U(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,U(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function J(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&V(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+U(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(o(91));return j({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ae(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(o(92));if(te(n)){if(1<n.length)throw Error(o(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:U(n)}}function oe(e,t){var n=U(t.value),r=U(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ce(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var se,ue,de=(ue=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((se=se||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=se.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ue(e,t)}))}:ue);function pe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var fe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},me=["Webkit","ms","Moz","O"];function he(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||fe.hasOwnProperty(e)&&fe[e]?(""+t).trim():t+"px"}function ge(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=he(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(fe).forEach((function(e){me.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),fe[t]=fe[e]}))}));var ve=j({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ye(e,t){if(t){if(ve[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(o(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(o(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(o(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Ae=null;function we(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var xe=null,ke=null,Ce=null;function Ee(e){if(e=ba(e)){if("function"!=typeof xe)throw Error(o(280));var t=e.stateNode;t&&(t=wa(t),xe(e.stateNode,e.type,t))}}function Se(e){ke?Ce?Ce.push(e):Ce=[e]:ke=e}function Ne(){if(ke){var e=ke,t=Ce;if(Ce=ke=null,Ee(e),t)for(e=0;e<t.length;e++)Ee(t[e])}}function Be(e,t){return e(t)}function Le(){}var _e=!1;function Pe(e,t,n){if(_e)return e(t,n);_e=!0;try{return Be(e,t,n)}finally{_e=!1,(null!==ke||null!==Ce)&&(Le(),Ne())}}function Me(e,t){var n=e.stateNode;if(null===n)return null;var r=wa(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var Oe=!1;if(u)try{var Te={};Object.defineProperty(Te,"passive",{get:function(){Oe=!0}}),window.addEventListener("test",Te,Te),window.removeEventListener("test",Te,Te)}catch(ue){Oe=!1}function Fe(e,t,n,r,a,o,i,l,c){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var De=!1,je=null,Re=!1,Ie=null,ze={onError:function(e){De=!0,je=e}};function $e(e,t,n,r,a,o,i,l,c){De=!1,je=null,Fe.apply(ze,arguments)}function Ge(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ye(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ue(e){if(Ge(e)!==e)throw Error(o(188))}function We(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ge(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var i=a.alternate;if(null===i){if(null!==(r=a.return)){n=r;continue}break}if(a.child===i.child){for(i=a.child;i;){if(i===n)return Ue(a),e;if(i===r)return Ue(a),t;i=i.sibling}throw Error(o(188))}if(n.return!==r.return)n=a,r=i;else{for(var l=!1,c=a.child;c;){if(c===n){l=!0,n=a,r=i;break}if(c===r){l=!0,r=a,n=i;break}c=c.sibling}if(!l){for(c=i.child;c;){if(c===n){l=!0,n=i,r=a;break}if(c===r){l=!0,r=i,n=a;break}c=c.sibling}if(!l)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(e))?He(e):null}function He(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=He(e);if(null!==t)return t;e=e.sibling}return null}var qe=a.unstable_scheduleCallback,Ve=a.unstable_cancelCallback,Qe=a.unstable_shouldYield,Ke=a.unstable_requestPaint,Ze=a.unstable_now,Xe=a.unstable_getCurrentPriorityLevel,Je=a.unstable_ImmediatePriority,et=a.unstable_UserBlockingPriority,tt=a.unstable_NormalPriority,nt=a.unstable_LowPriority,rt=a.unstable_IdlePriority,at=null,ot=null,it=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(lt(e)/ct|0)|0},lt=Math.log,ct=Math.LN2,st=64,ut=4194304;function dt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function pt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,a=e.suspendedLanes,o=e.pingedLanes,i=268435455&n;if(0!==i){var l=i&~a;0!==l?r=dt(l):0!=(o&=i)&&(r=dt(o))}else 0!=(i=n&~a)?r=dt(i):0!==o&&(r=dt(o));if(0===r)return 0;if(0!==t&&t!==r&&!(t&a)&&((a=r&-r)>=(o=t&-t)||16===a&&4194240&o))return t;if(4&r&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-it(t)),r|=e[n],t&=~a;return r}function ft(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function mt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function ht(){var e=st;return!(4194240&(st<<=1))&&(st=64),e}function gt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function vt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-it(t)]=n}function yt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-it(n),a=1<<r;a&t|e[r]&t&&(e[r]|=t),n&=~a}}var bt=0;function At(e){return 1<(e&=-e)?4<e?268435455&e?16:536870912:4:1}var wt,xt,kt,Ct,Et,St=!1,Nt=[],Bt=null,Lt=null,_t=null,Pt=new Map,Mt=new Map,Ot=[],Tt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Ft(e,t){switch(e){case"focusin":case"focusout":Bt=null;break;case"dragenter":case"dragleave":Lt=null;break;case"mouseover":case"mouseout":_t=null;break;case"pointerover":case"pointerout":Pt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Mt.delete(t.pointerId)}}function Dt(e,t,n,r,a,o){return null===e||e.nativeEvent!==o?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:o,targetContainers:[a]},null!==t&&null!==(t=ba(t))&&xt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function jt(e){var t=ya(e.target);if(null!==t){var n=Ge(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ye(n)))return e.blockedOn=t,void Et(e.priority,(function(){kt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Rt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Qt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=ba(n))&&xt(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);Ae=r,n.target.dispatchEvent(r),Ae=null,t.shift()}return!0}function It(e,t,n){Rt(e)&&n.delete(t)}function zt(){St=!1,null!==Bt&&Rt(Bt)&&(Bt=null),null!==Lt&&Rt(Lt)&&(Lt=null),null!==_t&&Rt(_t)&&(_t=null),Pt.forEach(It),Mt.forEach(It)}function $t(e,t){e.blockedOn===t&&(e.blockedOn=null,St||(St=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,zt)))}function Gt(e){function t(t){return $t(t,e)}if(0<Nt.length){$t(Nt[0],e);for(var n=1;n<Nt.length;n++){var r=Nt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Bt&&$t(Bt,e),null!==Lt&&$t(Lt,e),null!==_t&&$t(_t,e),Pt.forEach(t),Mt.forEach(t),n=0;n<Ot.length;n++)(r=Ot[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Ot.length&&null===(n=Ot[0]).blockedOn;)jt(n),null===n.blockedOn&&Ot.shift()}var Yt=A.ReactCurrentBatchConfig,Ut=!0;function Wt(e,t,n,r){var a=bt,o=Yt.transition;Yt.transition=null;try{bt=1,qt(e,t,n,r)}finally{bt=a,Yt.transition=o}}function Ht(e,t,n,r){var a=bt,o=Yt.transition;Yt.transition=null;try{bt=4,qt(e,t,n,r)}finally{bt=a,Yt.transition=o}}function qt(e,t,n,r){if(Ut){var a=Qt(e,t,n,r);if(null===a)Ur(e,t,r,Vt,n),Ft(e,r);else if(function(e,t,n,r,a){switch(t){case"focusin":return Bt=Dt(Bt,e,t,n,r,a),!0;case"dragenter":return Lt=Dt(Lt,e,t,n,r,a),!0;case"mouseover":return _t=Dt(_t,e,t,n,r,a),!0;case"pointerover":var o=a.pointerId;return Pt.set(o,Dt(Pt.get(o)||null,e,t,n,r,a)),!0;case"gotpointercapture":return o=a.pointerId,Mt.set(o,Dt(Mt.get(o)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r))r.stopPropagation();else if(Ft(e,r),4&t&&-1<Tt.indexOf(e)){for(;null!==a;){var o=ba(a);if(null!==o&&wt(o),null===(o=Qt(e,t,n,r))&&Ur(e,t,r,Vt,n),o===a)break;a=o}null!==a&&r.stopPropagation()}else Ur(e,t,r,null,n)}}var Vt=null;function Qt(e,t,n,r){if(Vt=null,null!==(e=ya(e=we(r))))if(null===(t=Ge(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=Ye(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Vt=e,null}function Kt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Xe()){case Je:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Zt=null,Xt=null,Jt=null;function en(){if(Jt)return Jt;var e,t,n=Xt,r=n.length,a="value"in Zt?Zt.value:Zt.textContent,o=a.length;for(e=0;e<r&&n[e]===a[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===a[o-t];t++);return Jt=a.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function an(e){function t(t,n,r,a,o){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(a):a[i]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return j(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var on,ln,cn,sn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},un=an(sn),dn=j({},sn,{view:0,detail:0}),pn=an(dn),fn=j({},dn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:En,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==cn&&(cn&&"mousemove"===e.type?(on=e.screenX-cn.screenX,ln=e.screenY-cn.screenY):ln=on=0,cn=e),on)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),mn=an(fn),hn=an(j({},fn,{dataTransfer:0})),gn=an(j({},dn,{relatedTarget:0})),vn=an(j({},sn,{animationName:0,elapsedTime:0,pseudoElement:0})),yn=j({},sn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=an(yn),An=an(j({},sn,{data:0})),wn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},xn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},kn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Cn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=kn[e])&&!!t[e]}function En(){return Cn}var Sn=j({},dn,{key:function(e){if(e.key){var t=wn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?xn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:En,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Nn=an(Sn),Bn=an(j({},fn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Ln=an(j({},dn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:En})),_n=an(j({},sn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Pn=j({},fn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Mn=an(Pn),On=[9,13,27,32],Tn=u&&"CompositionEvent"in window,Fn=null;u&&"documentMode"in document&&(Fn=document.documentMode);var Dn=u&&"TextEvent"in window&&!Fn,jn=u&&(!Tn||Fn&&8<Fn&&11>=Fn),Rn=String.fromCharCode(32),In=!1;function zn(e,t){switch(e){case"keyup":return-1!==On.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function $n(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Gn=!1,Yn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Un(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Yn[e.type]:"textarea"===t}function Wn(e,t,n,r){Se(r),0<(t=Hr(t,"onChange")).length&&(n=new un("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Hn=null,qn=null;function Vn(e){Rr(e,0)}function Qn(e){if(q(Aa(e)))return e}function Kn(e,t){if("change"===e)return t}var Zn=!1;if(u){var Xn;if(u){var Jn="oninput"in document;if(!Jn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Jn="function"==typeof er.oninput}Xn=Jn}else Xn=!1;Zn=Xn&&(!document.documentMode||9<document.documentMode)}function tr(){Hn&&(Hn.detachEvent("onpropertychange",nr),qn=Hn=null)}function nr(e){if("value"===e.propertyName&&Qn(qn)){var t=[];Wn(t,qn,e,we(e)),Pe(Vn,t)}}function rr(e,t,n){"focusin"===e?(tr(),qn=n,(Hn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function ar(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Qn(qn)}function or(e,t){if("click"===e)return Qn(t)}function ir(e,t){if("input"===e||"change"===e)return Qn(t)}var lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function cr(e,t){if(lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var a=n[r];if(!d.call(t,a)||!lr(e[a],t[a]))return!1}return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function ur(e,t){var n,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function dr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function pr(){for(var e=window,t=V();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=V((e=t.contentWindow).document)}return t}function fr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function mr(e){var t=pr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&dr(n.ownerDocument.documentElement,n)){if(null!==r&&fr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var a=n.textContent.length,o=Math.min(r.start,a);r=void 0===r.end?o:Math.min(r.end,a),!e.extend&&o>r&&(a=r,r=o,o=a),a=ur(n,o);var i=ur(n,r);a&&i&&(1!==e.rangeCount||e.anchorNode!==a.node||e.anchorOffset!==a.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(a.node,a.offset),e.removeAllRanges(),o>r?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var hr=u&&"documentMode"in document&&11>=document.documentMode,gr=null,vr=null,yr=null,br=!1;function Ar(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==gr||gr!==V(r)||(r="selectionStart"in(r=gr)&&fr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},yr&&cr(yr,r)||(yr=r,0<(r=Hr(vr,"onSelect")).length&&(t=new un("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=gr)))}function wr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var xr={animationend:wr("Animation","AnimationEnd"),animationiteration:wr("Animation","AnimationIteration"),animationstart:wr("Animation","AnimationStart"),transitionend:wr("Transition","TransitionEnd")},kr={},Cr={};function Er(e){if(kr[e])return kr[e];if(!xr[e])return e;var t,n=xr[e];for(t in n)if(n.hasOwnProperty(t)&&t in Cr)return kr[e]=n[t];return e}u&&(Cr=document.createElement("div").style,"AnimationEvent"in window||(delete xr.animationend.animation,delete xr.animationiteration.animation,delete xr.animationstart.animation),"TransitionEvent"in window||delete xr.transitionend.transition);var Sr=Er("animationend"),Nr=Er("animationiteration"),Br=Er("animationstart"),Lr=Er("transitionend"),_r=new Map,Pr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Mr(e,t){_r.set(e,t),c(t,[e])}for(var Or=0;Or<Pr.length;Or++){var Tr=Pr[Or];Mr(Tr.toLowerCase(),"on"+(Tr[0].toUpperCase()+Tr.slice(1)))}Mr(Sr,"onAnimationEnd"),Mr(Nr,"onAnimationIteration"),Mr(Br,"onAnimationStart"),Mr("dblclick","onDoubleClick"),Mr("focusin","onFocus"),Mr("focusout","onBlur"),Mr(Lr,"onTransitionEnd"),s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),c("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),c("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),c("onBeforeInput",["compositionend","keypress","textInput","paste"]),c("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Fr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Dr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Fr));function jr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,i,l,c,s){if($e.apply(this,arguments),De){if(!De)throw Error(o(198));var u=je;De=!1,je=null,Re||(Re=!0,Ie=u)}}(r,t,void 0,e),e.currentTarget=null}function Rr(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],c=l.instance,s=l.currentTarget;if(l=l.listener,c!==o&&a.isPropagationStopped())break e;jr(a,l,s),o=c}else for(i=0;i<r.length;i++){if(c=(l=r[i]).instance,s=l.currentTarget,l=l.listener,c!==o&&a.isPropagationStopped())break e;jr(a,l,s),o=c}}}if(Re)throw e=Ie,Re=!1,Ie=null,e}function Ir(e,t){var n=t[ha];void 0===n&&(n=t[ha]=new Set);var r=e+"__bubble";n.has(r)||(Yr(t,e,2,!1),n.add(r))}function zr(e,t,n){var r=0;t&&(r|=4),Yr(n,e,r,t)}var $r="_reactListening"+Math.random().toString(36).slice(2);function Gr(e){if(!e[$r]){e[$r]=!0,i.forEach((function(t){"selectionchange"!==t&&(Dr.has(t)||zr(t,!1,e),zr(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[$r]||(t[$r]=!0,zr("selectionchange",!1,t))}}function Yr(e,t,n,r){switch(Kt(t)){case 1:var a=Wt;break;case 4:a=Ht;break;default:a=qt}n=a.bind(null,t,n,e),a=void 0,!Oe||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Ur(e,t,n,r,a){var o=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===a||8===l.nodeType&&l.parentNode===a)break;if(4===i)for(i=r.return;null!==i;){var c=i.tag;if((3===c||4===c)&&((c=i.stateNode.containerInfo)===a||8===c.nodeType&&c.parentNode===a))return;i=i.return}for(;null!==l;){if(null===(i=ya(l)))return;if(5===(c=i.tag)||6===c){r=o=i;continue e}l=l.parentNode}}r=r.return}Pe((function(){var r=o,a=we(n),i=[];e:{var l=_r.get(e);if(void 0!==l){var c=un,s=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":c=Nn;break;case"focusin":s="focus",c=gn;break;case"focusout":s="blur",c=gn;break;case"beforeblur":case"afterblur":c=gn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":c=mn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":c=hn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":c=Ln;break;case Sr:case Nr:case Br:c=vn;break;case Lr:c=_n;break;case"scroll":c=pn;break;case"wheel":c=Mn;break;case"copy":case"cut":case"paste":c=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":c=Bn}var u=!!(4&t),d=!u&&"scroll"===e,p=u?null!==l?l+"Capture":null:l;u=[];for(var f,m=r;null!==m;){var h=(f=m).stateNode;if(5===f.tag&&null!==h&&(f=h,null!==p&&null!=(h=Me(m,p))&&u.push(Wr(m,h,f))),d)break;m=m.return}0<u.length&&(l=new c(l,s,null,n,a),i.push({event:l,listeners:u}))}}if(!(7&t)){if(c="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===Ae||!(s=n.relatedTarget||n.fromElement)||!ya(s)&&!s[ma])&&(c||l)&&(l=a.window===a?a:(l=a.ownerDocument)?l.defaultView||l.parentWindow:window,c?(c=r,null!==(s=(s=n.relatedTarget||n.toElement)?ya(s):null)&&(s!==(d=Ge(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(c=null,s=r),c!==s)){if(u=mn,h="onMouseLeave",p="onMouseEnter",m="mouse","pointerout"!==e&&"pointerover"!==e||(u=Bn,h="onPointerLeave",p="onPointerEnter",m="pointer"),d=null==c?l:Aa(c),f=null==s?l:Aa(s),(l=new u(h,m+"leave",c,n,a)).target=d,l.relatedTarget=f,h=null,ya(a)===r&&((u=new u(p,m+"enter",s,n,a)).target=f,u.relatedTarget=d,h=u),d=h,c&&s)e:{for(p=s,m=0,f=u=c;f;f=qr(f))m++;for(f=0,h=p;h;h=qr(h))f++;for(;0<m-f;)u=qr(u),m--;for(;0<f-m;)p=qr(p),f--;for(;m--;){if(u===p||null!==p&&u===p.alternate)break e;u=qr(u),p=qr(p)}u=null}else u=null;null!==c&&Vr(i,l,c,u,!1),null!==s&&null!==d&&Vr(i,d,s,u,!0)}if("select"===(c=(l=r?Aa(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===c&&"file"===l.type)var g=Kn;else if(Un(l))if(Zn)g=ir;else{g=ar;var v=rr}else(c=l.nodeName)&&"input"===c.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(g=or);switch(g&&(g=g(e,r))?Wn(i,g,n,a):(v&&v(e,l,r),"focusout"===e&&(v=l._wrapperState)&&v.controlled&&"number"===l.type&&ee(l,"number",l.value)),v=r?Aa(r):window,e){case"focusin":(Un(v)||"true"===v.contentEditable)&&(gr=v,vr=r,yr=null);break;case"focusout":yr=vr=gr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,Ar(i,n,a);break;case"selectionchange":if(hr)break;case"keydown":case"keyup":Ar(i,n,a)}var y;if(Tn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Gn?zn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(jn&&"ko"!==n.locale&&(Gn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Gn&&(y=en()):(Xt="value"in(Zt=a)?Zt.value:Zt.textContent,Gn=!0)),0<(v=Hr(r,b)).length&&(b=new An(b,e,null,n,a),i.push({event:b,listeners:v}),(y||null!==(y=$n(n)))&&(b.data=y))),(y=Dn?function(e,t){switch(e){case"compositionend":return $n(t);case"keypress":return 32!==t.which?null:(In=!0,Rn);case"textInput":return(e=t.data)===Rn&&In?null:e;default:return null}}(e,n):function(e,t){if(Gn)return"compositionend"===e||!Tn&&zn(e,t)?(e=en(),Jt=Xt=Zt=null,Gn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return jn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Hr(r,"onBeforeInput")).length&&(a=new An("onBeforeInput","beforeinput",null,n,a),i.push({event:a,listeners:r}),a.data=y)}Rr(i,t)}))}function Wr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Hr(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,o=a.stateNode;5===a.tag&&null!==o&&(a=o,null!=(o=Me(e,n))&&r.unshift(Wr(e,o,a)),null!=(o=Me(e,t))&&r.push(Wr(e,o,a))),e=e.return}return r}function qr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Vr(e,t,n,r,a){for(var o=t._reactName,i=[];null!==n&&n!==r;){var l=n,c=l.alternate,s=l.stateNode;if(null!==c&&c===r)break;5===l.tag&&null!==s&&(l=s,a?null!=(c=Me(n,o))&&i.unshift(Wr(n,c,l)):a||null!=(c=Me(n,o))&&i.push(Wr(n,c,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var Qr=/\r\n?/g,Kr=/\u0000|\uFFFD/g;function Zr(e){return("string"==typeof e?e:""+e).replace(Qr,"\n").replace(Kr,"")}function Xr(e,t,n){if(t=Zr(t),Zr(e)!==t&&n)throw Error(o(425))}function Jr(){}var ea=null,ta=null;function na(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ra="function"==typeof setTimeout?setTimeout:void 0,aa="function"==typeof clearTimeout?clearTimeout:void 0,oa="function"==typeof Promise?Promise:void 0,ia="function"==typeof queueMicrotask?queueMicrotask:void 0!==oa?function(e){return oa.resolve(null).then(e).catch(la)}:ra;function la(e){setTimeout((function(){throw e}))}function ca(e,t){var n=t,r=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0===r)return e.removeChild(a),void Gt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=a}while(n);Gt(t)}function sa(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function ua(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var da=Math.random().toString(36).slice(2),pa="__reactFiber$"+da,fa="__reactProps$"+da,ma="__reactContainer$"+da,ha="__reactEvents$"+da,ga="__reactListeners$"+da,va="__reactHandles$"+da;function ya(e){var t=e[pa];if(t)return t;for(var n=e.parentNode;n;){if(t=n[ma]||n[pa]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=ua(e);null!==e;){if(n=e[pa])return n;e=ua(e)}return t}n=(e=n).parentNode}return null}function ba(e){return!(e=e[pa]||e[ma])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Aa(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function wa(e){return e[fa]||null}var xa=[],ka=-1;function Ca(e){return{current:e}}function Ea(e){0>ka||(e.current=xa[ka],xa[ka]=null,ka--)}function Sa(e,t){ka++,xa[ka]=e.current,e.current=t}var Na={},Ba=Ca(Na),La=Ca(!1),_a=Na;function Pa(e,t){var n=e.type.contextTypes;if(!n)return Na;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,o={};for(a in n)o[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Ma(e){return null!=e.childContextTypes}function Oa(){Ea(La),Ea(Ba)}function Ta(e,t,n){if(Ba.current!==Na)throw Error(o(168));Sa(Ba,t),Sa(La,n)}function Fa(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in t))throw Error(o(108,Y(e)||"Unknown",a));return j({},n,r)}function Da(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Na,_a=Ba.current,Sa(Ba,e),Sa(La,La.current),!0}function ja(e,t,n){var r=e.stateNode;if(!r)throw Error(o(169));n?(e=Fa(e,t,_a),r.__reactInternalMemoizedMergedChildContext=e,Ea(La),Ea(Ba),Sa(Ba,e)):Ea(La),Sa(La,n)}var Ra=null,Ia=!1,za=!1;function $a(e){null===Ra?Ra=[e]:Ra.push(e)}function Ga(){if(!za&&null!==Ra){za=!0;var e=0,t=bt;try{var n=Ra;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Ra=null,Ia=!1}catch(t){throw null!==Ra&&(Ra=Ra.slice(e+1)),qe(Je,Ga),t}finally{bt=t,za=!1}}return null}var Ya=[],Ua=0,Wa=null,Ha=0,qa=[],Va=0,Qa=null,Ka=1,Za="";function Xa(e,t){Ya[Ua++]=Ha,Ya[Ua++]=Wa,Wa=e,Ha=t}function Ja(e,t,n){qa[Va++]=Ka,qa[Va++]=Za,qa[Va++]=Qa,Qa=e;var r=Ka;e=Za;var a=32-it(r)-1;r&=~(1<<a),n+=1;var o=32-it(t)+a;if(30<o){var i=a-a%5;o=(r&(1<<i)-1).toString(32),r>>=i,a-=i,Ka=1<<32-it(t)+a|n<<a|r,Za=o+e}else Ka=1<<o|n<<a|r,Za=e}function eo(e){null!==e.return&&(Xa(e,1),Ja(e,1,0))}function to(e){for(;e===Wa;)Wa=Ya[--Ua],Ya[Ua]=null,Ha=Ya[--Ua],Ya[Ua]=null;for(;e===Qa;)Qa=qa[--Va],qa[Va]=null,Za=qa[--Va],qa[Va]=null,Ka=qa[--Va],qa[Va]=null}var no=null,ro=null,ao=!1,oo=null;function io(e,t){var n=Ps(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function lo(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,no=e,ro=sa(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,no=e,ro=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Qa?{id:Ka,overflow:Za}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Ps(18,null,null,0)).stateNode=t,n.return=e,e.child=n,no=e,ro=null,!0);default:return!1}}function co(e){return!(!(1&e.mode)||128&e.flags)}function so(e){if(ao){var t=ro;if(t){var n=t;if(!lo(e,t)){if(co(e))throw Error(o(418));t=sa(n.nextSibling);var r=no;t&&lo(e,t)?io(r,n):(e.flags=-4097&e.flags|2,ao=!1,no=e)}}else{if(co(e))throw Error(o(418));e.flags=-4097&e.flags|2,ao=!1,no=e}}}function uo(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;no=e}function po(e){if(e!==no)return!1;if(!ao)return uo(e),ao=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!na(e.type,e.memoizedProps)),t&&(t=ro)){if(co(e))throw fo(),Error(o(418));for(;t;)io(e,t),t=sa(t.nextSibling)}if(uo(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){ro=sa(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}ro=null}}else ro=no?sa(e.stateNode.nextSibling):null;return!0}function fo(){for(var e=ro;e;)e=sa(e.nextSibling)}function mo(){ro=no=null,ao=!1}function ho(e){null===oo?oo=[e]:oo.push(e)}var go=A.ReactCurrentBatchConfig;function vo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var r=n.stateNode}if(!r)throw Error(o(147,e));var a=r,i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=a.refs;null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!=typeof e)throw Error(o(284));if(!n._owner)throw Error(o(290,e))}return e}function yo(e,t){throw e=Object.prototype.toString.call(t),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function bo(e){return(0,e._init)(e._payload)}function Ao(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=Os(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=2),t}function c(e,t,n,r){return null===t||6!==t.tag?((t=js(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function s(e,t,n,r){var o=n.type;return o===k?d(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===M&&bo(o)===t.type)?((r=a(t,n.props)).ref=vo(e,t,n),r.return=e,r):((r=Ts(n.type,n.key,n.props,null,e.mode,r)).ref=vo(e,t,n),r.return=e,r)}function u(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Rs(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function d(e,t,n,r,o){return null===t||7!==t.tag?((t=Fs(n,e.mode,r,o)).return=e,t):((t=a(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=js(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case w:return(n=Ts(t.type,t.key,t.props,null,e.mode,n)).ref=vo(e,null,t),n.return=e,n;case x:return(t=Rs(t,e.mode,n)).return=e,t;case M:return p(e,(0,t._init)(t._payload),n)}if(te(t)||F(t))return(t=Fs(t,e.mode,n,null)).return=e,t;yo(e,t)}return null}function f(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==a?null:c(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case w:return n.key===a?s(e,t,n,r):null;case x:return n.key===a?u(e,t,n,r):null;case M:return f(e,t,(a=n._init)(n._payload),r)}if(te(n)||F(n))return null!==a?null:d(e,t,n,r,null);yo(e,n)}return null}function m(e,t,n,r,a){if("string"==typeof r&&""!==r||"number"==typeof r)return c(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case w:return s(t,e=e.get(null===r.key?n:r.key)||null,r,a);case x:return u(t,e=e.get(null===r.key?n:r.key)||null,r,a);case M:return m(e,t,n,(0,r._init)(r._payload),a)}if(te(r)||F(r))return d(t,e=e.get(n)||null,r,a,null);yo(t,r)}return null}function h(a,o,l,c){for(var s=null,u=null,d=o,h=o=0,g=null;null!==d&&h<l.length;h++){d.index>h?(g=d,d=null):g=d.sibling;var v=f(a,d,l[h],c);if(null===v){null===d&&(d=g);break}e&&d&&null===v.alternate&&t(a,d),o=i(v,o,h),null===u?s=v:u.sibling=v,u=v,d=g}if(h===l.length)return n(a,d),ao&&Xa(a,h),s;if(null===d){for(;h<l.length;h++)null!==(d=p(a,l[h],c))&&(o=i(d,o,h),null===u?s=d:u.sibling=d,u=d);return ao&&Xa(a,h),s}for(d=r(a,d);h<l.length;h++)null!==(g=m(d,a,h,l[h],c))&&(e&&null!==g.alternate&&d.delete(null===g.key?h:g.key),o=i(g,o,h),null===u?s=g:u.sibling=g,u=g);return e&&d.forEach((function(e){return t(a,e)})),ao&&Xa(a,h),s}function g(a,l,c,s){var u=F(c);if("function"!=typeof u)throw Error(o(150));if(null==(c=u.call(c)))throw Error(o(151));for(var d=u=null,h=l,g=l=0,v=null,y=c.next();null!==h&&!y.done;g++,y=c.next()){h.index>g?(v=h,h=null):v=h.sibling;var b=f(a,h,y.value,s);if(null===b){null===h&&(h=v);break}e&&h&&null===b.alternate&&t(a,h),l=i(b,l,g),null===d?u=b:d.sibling=b,d=b,h=v}if(y.done)return n(a,h),ao&&Xa(a,g),u;if(null===h){for(;!y.done;g++,y=c.next())null!==(y=p(a,y.value,s))&&(l=i(y,l,g),null===d?u=y:d.sibling=y,d=y);return ao&&Xa(a,g),u}for(h=r(a,h);!y.done;g++,y=c.next())null!==(y=m(h,a,g,y.value,s))&&(e&&null!==y.alternate&&h.delete(null===y.key?g:y.key),l=i(y,l,g),null===d?u=y:d.sibling=y,d=y);return e&&h.forEach((function(e){return t(a,e)})),ao&&Xa(a,g),u}return function e(r,o,i,c){if("object"==typeof i&&null!==i&&i.type===k&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case w:e:{for(var s=i.key,u=o;null!==u;){if(u.key===s){if((s=i.type)===k){if(7===u.tag){n(r,u.sibling),(o=a(u,i.props.children)).return=r,r=o;break e}}else if(u.elementType===s||"object"==typeof s&&null!==s&&s.$$typeof===M&&bo(s)===u.type){n(r,u.sibling),(o=a(u,i.props)).ref=vo(r,u,i),o.return=r,r=o;break e}n(r,u);break}t(r,u),u=u.sibling}i.type===k?((o=Fs(i.props.children,r.mode,c,i.key)).return=r,r=o):((c=Ts(i.type,i.key,i.props,null,r.mode,c)).ref=vo(r,o,i),c.return=r,r=c)}return l(r);case x:e:{for(u=i.key;null!==o;){if(o.key===u){if(4===o.tag&&o.stateNode.containerInfo===i.containerInfo&&o.stateNode.implementation===i.implementation){n(r,o.sibling),(o=a(o,i.children||[])).return=r,r=o;break e}n(r,o);break}t(r,o),o=o.sibling}(o=Rs(i,r.mode,c)).return=r,r=o}return l(r);case M:return e(r,o,(u=i._init)(i._payload),c)}if(te(i))return h(r,o,i,c);if(F(i))return g(r,o,i,c);yo(r,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==o&&6===o.tag?(n(r,o.sibling),(o=a(o,i)).return=r,r=o):(n(r,o),(o=js(i,r.mode,c)).return=r,r=o),l(r)):n(r,o)}}var wo=Ao(!0),xo=Ao(!1),ko=Ca(null),Co=null,Eo=null,So=null;function No(){So=Eo=Co=null}function Bo(e){var t=ko.current;Ea(ko),e._currentValue=t}function Lo(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function _o(e,t){Co=e,So=Eo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(!!(e.lanes&t)&&(bl=!0),e.firstContext=null)}function Po(e){var t=e._currentValue;if(So!==e)if(e={context:e,memoizedValue:t,next:null},null===Eo){if(null===Co)throw Error(o(308));Eo=e,Co.dependencies={lanes:0,firstContext:e}}else Eo=Eo.next=e;return t}var Mo=null;function Oo(e){null===Mo?Mo=[e]:Mo.push(e)}function To(e,t,n,r){var a=t.interleaved;return null===a?(n.next=n,Oo(t)):(n.next=a.next,a.next=n),t.interleaved=n,Fo(e,r)}function Fo(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Do=!1;function jo(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Ro(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Io(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function zo(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&Bc){var a=r.pending;return null===a?t.next=t:(t.next=a.next,a.next=t),r.pending=t,Fo(e,n)}return null===(a=r.interleaved)?(t.next=t,Oo(r)):(t.next=a.next,a.next=t),r.interleaved=t,Fo(e,n)}function $o(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}function Go(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?a=o=i:o=o.next=i,n=n.next}while(null!==n);null===o?a=o=t:o=o.next=t}else a=o=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Yo(e,t,n,r){var a=e.updateQueue;Do=!1;var o=a.firstBaseUpdate,i=a.lastBaseUpdate,l=a.shared.pending;if(null!==l){a.shared.pending=null;var c=l,s=c.next;c.next=null,null===i?o=s:i.next=s,i=c;var u=e.alternate;null!==u&&(l=(u=u.updateQueue).lastBaseUpdate)!==i&&(null===l?u.firstBaseUpdate=s:l.next=s,u.lastBaseUpdate=c)}if(null!==o){var d=a.baseState;for(i=0,u=s=c=null,l=o;;){var p=l.lane,f=l.eventTime;if((r&p)===p){null!==u&&(u=u.next={eventTime:f,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var m=e,h=l;switch(p=t,f=n,h.tag){case 1:if("function"==typeof(m=h.payload)){d=m.call(f,d,p);break e}d=m;break e;case 3:m.flags=-65537&m.flags|128;case 0:if(null==(p="function"==typeof(m=h.payload)?m.call(f,d,p):m))break e;d=j({},d,p);break e;case 2:Do=!0}}null!==l.callback&&0!==l.lane&&(e.flags|=64,null===(p=a.effects)?a.effects=[l]:p.push(l))}else f={eventTime:f,lane:p,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===u?(s=u=f,c=d):u=u.next=f,i|=p;if(null===(l=l.next)){if(null===(l=a.shared.pending))break;l=(p=l).next,p.next=null,a.lastBaseUpdate=p,a.shared.pending=null}}if(null===u&&(c=d),a.baseState=c,a.firstBaseUpdate=s,a.lastBaseUpdate=u,null!==(t=a.shared.interleaved)){a=t;do{i|=a.lane,a=a.next}while(a!==t)}else null===o&&(a.shared.lanes=0);Dc|=i,e.lanes=i,e.memoizedState=d}}function Uo(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(o(191,a));a.call(r)}}}var Wo={},Ho=Ca(Wo),qo=Ca(Wo),Vo=Ca(Wo);function Qo(e){if(e===Wo)throw Error(o(174));return e}function Ko(e,t){switch(Sa(Vo,t),Sa(qo,e),Sa(Ho,Wo),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ce(null,"");break;default:t=ce(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Ea(Ho),Sa(Ho,t)}function Zo(){Ea(Ho),Ea(qo),Ea(Vo)}function Xo(e){Qo(Vo.current);var t=Qo(Ho.current),n=ce(t,e.type);t!==n&&(Sa(qo,e),Sa(Ho,n))}function Jo(e){qo.current===e&&(Ea(Ho),Ea(qo))}var ei=Ca(0);function ti(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ni=[];function ri(){for(var e=0;e<ni.length;e++)ni[e]._workInProgressVersionPrimary=null;ni.length=0}var ai=A.ReactCurrentDispatcher,oi=A.ReactCurrentBatchConfig,ii=0,li=null,ci=null,si=null,ui=!1,di=!1,pi=0,fi=0;function mi(){throw Error(o(321))}function hi(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!lr(e[n],t[n]))return!1;return!0}function gi(e,t,n,r,a,i){if(ii=i,li=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,ai.current=null===e||null===e.memoizedState?Ji:el,e=n(r,a),di){i=0;do{if(di=!1,pi=0,25<=i)throw Error(o(301));i+=1,si=ci=null,t.updateQueue=null,ai.current=tl,e=n(r,a)}while(di)}if(ai.current=Xi,t=null!==ci&&null!==ci.next,ii=0,si=ci=li=null,ui=!1,t)throw Error(o(300));return e}function vi(){var e=0!==pi;return pi=0,e}function yi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===si?li.memoizedState=si=e:si=si.next=e,si}function bi(){if(null===ci){var e=li.alternate;e=null!==e?e.memoizedState:null}else e=ci.next;var t=null===si?li.memoizedState:si.next;if(null!==t)si=t,ci=e;else{if(null===e)throw Error(o(310));e={memoizedState:(ci=e).memoizedState,baseState:ci.baseState,baseQueue:ci.baseQueue,queue:ci.queue,next:null},null===si?li.memoizedState=si=e:si=si.next=e}return si}function Ai(e,t){return"function"==typeof t?t(e):t}function wi(e){var t=bi(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=ci,a=r.baseQueue,i=n.pending;if(null!==i){if(null!==a){var l=a.next;a.next=i.next,i.next=l}r.baseQueue=a=i,n.pending=null}if(null!==a){i=a.next,r=r.baseState;var c=l=null,s=null,u=i;do{var d=u.lane;if((ii&d)===d)null!==s&&(s=s.next={lane:0,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null}),r=u.hasEagerState?u.eagerState:e(r,u.action);else{var p={lane:d,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null};null===s?(c=s=p,l=r):s=s.next=p,li.lanes|=d,Dc|=d}u=u.next}while(null!==u&&u!==i);null===s?l=r:s.next=c,lr(r,t.memoizedState)||(bl=!0),t.memoizedState=r,t.baseState=l,t.baseQueue=s,n.lastRenderedState=r}if(null!==(e=n.interleaved)){a=e;do{i=a.lane,li.lanes|=i,Dc|=i,a=a.next}while(a!==e)}else null===a&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function xi(e){var t=bi(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,i=t.memoizedState;if(null!==a){n.pending=null;var l=a=a.next;do{i=e(i,l.action),l=l.next}while(l!==a);lr(i,t.memoizedState)||(bl=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function ki(){}function Ci(e,t){var n=li,r=bi(),a=t(),i=!lr(r.memoizedState,a);if(i&&(r.memoizedState=a,bl=!0),r=r.queue,Di(Ni.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||null!==si&&1&si.memoizedState.tag){if(n.flags|=2048,Pi(9,Si.bind(null,n,r,a,t),void 0,null),null===Lc)throw Error(o(349));30&ii||Ei(n,t,a)}return a}function Ei(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=li.updateQueue)?(t={lastEffect:null,stores:null},li.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Si(e,t,n,r){t.value=n,t.getSnapshot=r,Bi(t)&&Li(e)}function Ni(e,t,n){return n((function(){Bi(t)&&Li(e)}))}function Bi(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!lr(e,n)}catch(e){return!0}}function Li(e){var t=Fo(e,1);null!==t&&ns(t,e,1,-1)}function _i(e){var t=yi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Ai,lastRenderedState:e},t.queue=e,e=e.dispatch=Vi.bind(null,li,e),[t.memoizedState,e]}function Pi(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=li.updateQueue)?(t={lastEffect:null,stores:null},li.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Mi(){return bi().memoizedState}function Oi(e,t,n,r){var a=yi();li.flags|=e,a.memoizedState=Pi(1|t,n,void 0,void 0===r?null:r)}function Ti(e,t,n,r){var a=bi();r=void 0===r?null:r;var o=void 0;if(null!==ci){var i=ci.memoizedState;if(o=i.destroy,null!==r&&hi(r,i.deps))return void(a.memoizedState=Pi(t,n,o,r))}li.flags|=e,a.memoizedState=Pi(1|t,n,o,r)}function Fi(e,t){return Oi(8390656,8,e,t)}function Di(e,t){return Ti(2048,8,e,t)}function ji(e,t){return Ti(4,2,e,t)}function Ri(e,t){return Ti(4,4,e,t)}function Ii(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function zi(e,t,n){return n=null!=n?n.concat([e]):null,Ti(4,4,Ii.bind(null,t,e),n)}function $i(){}function Gi(e,t){var n=bi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&hi(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Yi(e,t){var n=bi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&hi(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Ui(e,t,n){return 21&ii?(lr(n,t)||(n=ht(),li.lanes|=n,Dc|=n,e.baseState=!0),t):(e.baseState&&(e.baseState=!1,bl=!0),e.memoizedState=n)}function Wi(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=oi.transition;oi.transition={};try{e(!1),t()}finally{bt=n,oi.transition=r}}function Hi(){return bi().memoizedState}function qi(e,t,n){var r=ts(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},Qi(e)?Ki(t,n):null!==(n=To(e,t,n,r))&&(ns(n,e,r,es()),Zi(n,t,r))}function Vi(e,t,n){var r=ts(e),a={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(Qi(e))Ki(t,a);else{var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=o(i,n);if(a.hasEagerState=!0,a.eagerState=l,lr(l,i)){var c=t.interleaved;return null===c?(a.next=a,Oo(t)):(a.next=c.next,c.next=a),void(t.interleaved=a)}}catch(e){}null!==(n=To(e,t,a,r))&&(ns(n,e,r,a=es()),Zi(n,t,r))}}function Qi(e){var t=e.alternate;return e===li||null!==t&&t===li}function Ki(e,t){di=ui=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Zi(e,t,n){if(4194240&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}var Xi={readContext:Po,useCallback:mi,useContext:mi,useEffect:mi,useImperativeHandle:mi,useInsertionEffect:mi,useLayoutEffect:mi,useMemo:mi,useReducer:mi,useRef:mi,useState:mi,useDebugValue:mi,useDeferredValue:mi,useTransition:mi,useMutableSource:mi,useSyncExternalStore:mi,useId:mi,unstable_isNewReconciler:!1},Ji={readContext:Po,useCallback:function(e,t){return yi().memoizedState=[e,void 0===t?null:t],e},useContext:Po,useEffect:Fi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Oi(4194308,4,Ii.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Oi(4194308,4,e,t)},useInsertionEffect:function(e,t){return Oi(4,2,e,t)},useMemo:function(e,t){var n=yi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=yi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=qi.bind(null,li,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},yi().memoizedState=e},useState:_i,useDebugValue:$i,useDeferredValue:function(e){return yi().memoizedState=e},useTransition:function(){var e=_i(!1),t=e[0];return e=Wi.bind(null,e[1]),yi().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=li,a=yi();if(ao){if(void 0===n)throw Error(o(407));n=n()}else{if(n=t(),null===Lc)throw Error(o(349));30&ii||Ei(r,t,n)}a.memoizedState=n;var i={value:n,getSnapshot:t};return a.queue=i,Fi(Ni.bind(null,r,i,e),[e]),r.flags|=2048,Pi(9,Si.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=yi(),t=Lc.identifierPrefix;if(ao){var n=Za;t=":"+t+"R"+(n=(Ka&~(1<<32-it(Ka)-1)).toString(32)+n),0<(n=pi++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=fi++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},el={readContext:Po,useCallback:Gi,useContext:Po,useEffect:Di,useImperativeHandle:zi,useInsertionEffect:ji,useLayoutEffect:Ri,useMemo:Yi,useReducer:wi,useRef:Mi,useState:function(){return wi(Ai)},useDebugValue:$i,useDeferredValue:function(e){return Ui(bi(),ci.memoizedState,e)},useTransition:function(){return[wi(Ai)[0],bi().memoizedState]},useMutableSource:ki,useSyncExternalStore:Ci,useId:Hi,unstable_isNewReconciler:!1},tl={readContext:Po,useCallback:Gi,useContext:Po,useEffect:Di,useImperativeHandle:zi,useInsertionEffect:ji,useLayoutEffect:Ri,useMemo:Yi,useReducer:xi,useRef:Mi,useState:function(){return xi(Ai)},useDebugValue:$i,useDeferredValue:function(e){var t=bi();return null===ci?t.memoizedState=e:Ui(t,ci.memoizedState,e)},useTransition:function(){return[xi(Ai)[0],bi().memoizedState]},useMutableSource:ki,useSyncExternalStore:Ci,useId:Hi,unstable_isNewReconciler:!1};function nl(e,t){if(e&&e.defaultProps){for(var n in t=j({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}function rl(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:j({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var al={isMounted:function(e){return!!(e=e._reactInternals)&&Ge(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=es(),a=ts(e),o=Io(r,a);o.payload=t,null!=n&&(o.callback=n),null!==(t=zo(e,o,a))&&(ns(t,e,a,r),$o(t,e,a))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=es(),a=ts(e),o=Io(r,a);o.tag=1,o.payload=t,null!=n&&(o.callback=n),null!==(t=zo(e,o,a))&&(ns(t,e,a,r),$o(t,e,a))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=es(),r=ts(e),a=Io(n,r);a.tag=2,null!=t&&(a.callback=t),null!==(t=zo(e,a,r))&&(ns(t,e,r,n),$o(t,e,r))}};function ol(e,t,n,r,a,o,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,i):!(t.prototype&&t.prototype.isPureReactComponent&&cr(n,r)&&cr(a,o))}function il(e,t,n){var r=!1,a=Na,o=t.contextType;return"object"==typeof o&&null!==o?o=Po(o):(a=Ma(t)?_a:Ba.current,o=(r=null!=(r=t.contextTypes))?Pa(e,a):Na),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=al,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=o),t}function ll(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&al.enqueueReplaceState(t,t.state,null)}function cl(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs={},jo(e);var o=t.contextType;"object"==typeof o&&null!==o?a.context=Po(o):(o=Ma(t)?_a:Ba.current,a.context=Pa(e,o)),a.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(rl(e,t,o,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&al.enqueueReplaceState(a,a.state,null),Yo(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4194308)}function sl(e,t){try{var n="",r=t;do{n+=$(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a,digest:null}}function ul(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function dl(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var pl="function"==typeof WeakMap?WeakMap:Map;function fl(e,t,n){(n=Io(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Uc||(Uc=!0,Wc=r),dl(0,t)},n}function ml(e,t,n){(n=Io(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return r(a)},n.callback=function(){dl(0,t)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){dl(0,t),"function"!=typeof r&&(null===Hc?Hc=new Set([this]):Hc.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function hl(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new pl;var a=new Set;r.set(t,a)}else void 0===(a=r.get(t))&&(a=new Set,r.set(t,a));a.has(n)||(a.add(n),e=Es.bind(null,e,t,n),t.then(e,e))}function gl(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function vl(e,t,n,r,a){return 1&e.mode?(e.flags|=65536,e.lanes=a,e):(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Io(-1,1)).tag=2,zo(n,t,1))),n.lanes|=1),e)}var yl=A.ReactCurrentOwner,bl=!1;function Al(e,t,n,r){t.child=null===e?xo(t,null,n,r):wo(t,e.child,n,r)}function wl(e,t,n,r,a){n=n.render;var o=t.ref;return _o(t,a),r=gi(e,t,n,r,o,a),n=vi(),null===e||bl?(ao&&n&&eo(t),t.flags|=1,Al(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Ul(e,t,a))}function xl(e,t,n,r,a){if(null===e){var o=n.type;return"function"!=typeof o||Ms(o)||void 0!==o.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ts(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,kl(e,t,o,r,a))}if(o=e.child,!(e.lanes&a)){var i=o.memoizedProps;if((n=null!==(n=n.compare)?n:cr)(i,r)&&e.ref===t.ref)return Ul(e,t,a)}return t.flags|=1,(e=Os(o,r)).ref=t.ref,e.return=t,t.child=e}function kl(e,t,n,r,a){if(null!==e){var o=e.memoizedProps;if(cr(o,r)&&e.ref===t.ref){if(bl=!1,t.pendingProps=r=o,!(e.lanes&a))return t.lanes=e.lanes,Ul(e,t,a);131072&e.flags&&(bl=!0)}}return Sl(e,t,n,r,a)}function Cl(e,t,n){var r=t.pendingProps,a=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(1&t.mode){if(!(1073741824&n))return e=null!==o?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Sa(Oc,Mc),Mc|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==o?o.baseLanes:n,Sa(Oc,Mc),Mc|=r}else t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Sa(Oc,Mc),Mc|=n;else null!==o?(r=o.baseLanes|n,t.memoizedState=null):r=n,Sa(Oc,Mc),Mc|=r;return Al(e,t,a,n),t.child}function El(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Sl(e,t,n,r,a){var o=Ma(n)?_a:Ba.current;return o=Pa(t,o),_o(t,a),n=gi(e,t,n,r,o,a),r=vi(),null===e||bl?(ao&&r&&eo(t),t.flags|=1,Al(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Ul(e,t,a))}function Nl(e,t,n,r,a){if(Ma(n)){var o=!0;Da(t)}else o=!1;if(_o(t,a),null===t.stateNode)Yl(e,t),il(t,n,r),cl(t,n,r,a),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var c=i.context,s=n.contextType;s="object"==typeof s&&null!==s?Po(s):Pa(t,s=Ma(n)?_a:Ba.current);var u=n.getDerivedStateFromProps,d="function"==typeof u||"function"==typeof i.getSnapshotBeforeUpdate;d||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||c!==s)&&ll(t,i,r,s),Do=!1;var p=t.memoizedState;i.state=p,Yo(t,r,i,a),c=t.memoizedState,l!==r||p!==c||La.current||Do?("function"==typeof u&&(rl(t,n,u,r),c=t.memoizedState),(l=Do||ol(t,n,l,r,p,c,s))?(d||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4194308)):("function"==typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=c),i.props=r,i.state=c,i.context=s,r=l):("function"==typeof i.componentDidMount&&(t.flags|=4194308),r=!1)}else{i=t.stateNode,Ro(e,t),l=t.memoizedProps,s=t.type===t.elementType?l:nl(t.type,l),i.props=s,d=t.pendingProps,p=i.context,c="object"==typeof(c=n.contextType)&&null!==c?Po(c):Pa(t,c=Ma(n)?_a:Ba.current);var f=n.getDerivedStateFromProps;(u="function"==typeof f||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==d||p!==c)&&ll(t,i,r,c),Do=!1,p=t.memoizedState,i.state=p,Yo(t,r,i,a);var m=t.memoizedState;l!==d||p!==m||La.current||Do?("function"==typeof f&&(rl(t,n,f,r),m=t.memoizedState),(s=Do||ol(t,n,s,r,p,m,c)||!1)?(u||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,m,c),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,m,c)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=m),i.props=r,i.state=m,i.context=c,r=s):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),r=!1)}return Bl(e,t,n,r,o,a)}function Bl(e,t,n,r,a,o){El(e,t);var i=!!(128&t.flags);if(!r&&!i)return a&&ja(t,n,!1),Ul(e,t,o);r=t.stateNode,yl.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=wo(t,e.child,null,o),t.child=wo(t,null,l,o)):Al(e,t,l,o),t.memoizedState=r.state,a&&ja(t,n,!0),t.child}function Ll(e){var t=e.stateNode;t.pendingContext?Ta(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Ta(0,t.context,!1),Ko(e,t.containerInfo)}function _l(e,t,n,r,a){return mo(),ho(a),t.flags|=256,Al(e,t,n,r),t.child}var Pl,Ml,Ol,Tl,Fl={dehydrated:null,treeContext:null,retryLane:0};function Dl(e){return{baseLanes:e,cachePool:null,transitions:null}}function jl(e,t,n){var r,a=t.pendingProps,i=ei.current,l=!1,c=!!(128&t.flags);if((r=c)||(r=(null===e||null!==e.memoizedState)&&!!(2&i)),r?(l=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),Sa(ei,1&i),null===e)return so(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(1&t.mode?"$!"===e.data?t.lanes=8:t.lanes=1073741824:t.lanes=1,null):(c=a.children,e=a.fallback,l?(a=t.mode,l=t.child,c={mode:"hidden",children:c},1&a||null===l?l=Ds(c,a,0,null):(l.childLanes=0,l.pendingProps=c),e=Fs(e,a,n,null),l.return=t,e.return=t,l.sibling=e,t.child=l,t.child.memoizedState=Dl(n),t.memoizedState=Fl,e):Rl(t,c));if(null!==(i=e.memoizedState)&&null!==(r=i.dehydrated))return function(e,t,n,r,a,i,l){if(n)return 256&t.flags?(t.flags&=-257,Il(e,t,l,r=ul(Error(o(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(i=r.fallback,a=t.mode,r=Ds({mode:"visible",children:r.children},a,0,null),(i=Fs(i,a,l,null)).flags|=2,r.return=t,i.return=t,r.sibling=i,t.child=r,1&t.mode&&wo(t,e.child,null,l),t.child.memoizedState=Dl(l),t.memoizedState=Fl,i);if(!(1&t.mode))return Il(e,t,l,null);if("$!"===a.data){if(r=a.nextSibling&&a.nextSibling.dataset)var c=r.dgst;return r=c,Il(e,t,l,r=ul(i=Error(o(419)),r,void 0))}if(c=!!(l&e.childLanes),bl||c){if(null!==(r=Lc)){switch(l&-l){case 4:a=2;break;case 16:a=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:a=32;break;case 536870912:a=268435456;break;default:a=0}0!==(a=a&(r.suspendedLanes|l)?0:a)&&a!==i.retryLane&&(i.retryLane=a,Fo(e,a),ns(r,e,a,-1))}return hs(),Il(e,t,l,r=ul(Error(o(421))))}return"$?"===a.data?(t.flags|=128,t.child=e.child,t=Ns.bind(null,e),a._reactRetry=t,null):(e=i.treeContext,ro=sa(a.nextSibling),no=t,ao=!0,oo=null,null!==e&&(qa[Va++]=Ka,qa[Va++]=Za,qa[Va++]=Qa,Ka=e.id,Za=e.overflow,Qa=t),(t=Rl(t,r.children)).flags|=4096,t)}(e,t,c,a,r,i,n);if(l){l=a.fallback,c=t.mode,r=(i=e.child).sibling;var s={mode:"hidden",children:a.children};return 1&c||t.child===i?(a=Os(i,s)).subtreeFlags=14680064&i.subtreeFlags:((a=t.child).childLanes=0,a.pendingProps=s,t.deletions=null),null!==r?l=Os(r,l):(l=Fs(l,c,n,null)).flags|=2,l.return=t,a.return=t,a.sibling=l,t.child=a,a=l,l=t.child,c=null===(c=e.child.memoizedState)?Dl(n):{baseLanes:c.baseLanes|n,cachePool:null,transitions:c.transitions},l.memoizedState=c,l.childLanes=e.childLanes&~n,t.memoizedState=Fl,a}return e=(l=e.child).sibling,a=Os(l,{mode:"visible",children:a.children}),!(1&t.mode)&&(a.lanes=n),a.return=t,a.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=a,t.memoizedState=null,a}function Rl(e,t){return(t=Ds({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Il(e,t,n,r){return null!==r&&ho(r),wo(t,e.child,null,n),(e=Rl(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function zl(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Lo(e.return,t,n)}function $l(e,t,n,r,a){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=a)}function Gl(e,t,n){var r=t.pendingProps,a=r.revealOrder,o=r.tail;if(Al(e,t,r.children,n),2&(r=ei.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&zl(e,n,t);else if(19===e.tag)zl(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Sa(ei,r),1&t.mode)switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===ti(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),$l(t,!1,a,n,o);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===ti(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}$l(t,!0,n,null,o);break;case"together":$l(t,!1,null,null,void 0);break;default:t.memoizedState=null}else t.memoizedState=null;return t.child}function Yl(e,t){!(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Ul(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Dc|=t.lanes,!(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Os(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Os(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Wl(e,t){if(!ao)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Hl(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=14680064&a.subtreeFlags,r|=14680064&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function ql(e,t,n){var r=t.pendingProps;switch(to(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Hl(t),null;case 1:case 17:return Ma(t.type)&&Oa(),Hl(t),null;case 3:return r=t.stateNode,Zo(),Ea(La),Ea(Ba),ri(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(po(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,null!==oo&&(is(oo),oo=null))),Ml(e,t),Hl(t),null;case 5:Jo(t);var a=Qo(Vo.current);if(n=t.type,null!==e&&null!=t.stateNode)Ol(e,t,n,r,a),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(o(166));return Hl(t),null}if(e=Qo(Ho.current),po(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[pa]=t,r[fa]=i,e=!!(1&t.mode),n){case"dialog":Ir("cancel",r),Ir("close",r);break;case"iframe":case"object":case"embed":Ir("load",r);break;case"video":case"audio":for(a=0;a<Fr.length;a++)Ir(Fr[a],r);break;case"source":Ir("error",r);break;case"img":case"image":case"link":Ir("error",r),Ir("load",r);break;case"details":Ir("toggle",r);break;case"input":K(r,i),Ir("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},Ir("invalid",r);break;case"textarea":ae(r,i),Ir("invalid",r)}for(var c in ye(n,i),a=null,i)if(i.hasOwnProperty(c)){var s=i[c];"children"===c?"string"==typeof s?r.textContent!==s&&(!0!==i.suppressHydrationWarning&&Xr(r.textContent,s,e),a=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(!0!==i.suppressHydrationWarning&&Xr(r.textContent,s,e),a=["children",""+s]):l.hasOwnProperty(c)&&null!=s&&"onScroll"===c&&Ir("scroll",r)}switch(n){case"input":H(r),J(r,i,!0);break;case"textarea":H(r),ie(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=Jr)}r=a,t.updateQueue=r,null!==r&&(t.flags|=4)}else{c=9===a.nodeType?a:a.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=le(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=c.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=c.createElement(n,{is:r.is}):(e=c.createElement(n),"select"===n&&(c=e,r.multiple?c.multiple=!0:r.size&&(c.size=r.size))):e=c.createElementNS(e,n),e[pa]=t,e[fa]=r,Pl(e,t,!1,!1),t.stateNode=e;e:{switch(c=be(n,r),n){case"dialog":Ir("cancel",e),Ir("close",e),a=r;break;case"iframe":case"object":case"embed":Ir("load",e),a=r;break;case"video":case"audio":for(a=0;a<Fr.length;a++)Ir(Fr[a],e);a=r;break;case"source":Ir("error",e),a=r;break;case"img":case"image":case"link":Ir("error",e),Ir("load",e),a=r;break;case"details":Ir("toggle",e),a=r;break;case"input":K(e,r),a=Q(e,r),Ir("invalid",e);break;case"option":default:a=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=j({},r,{value:void 0}),Ir("invalid",e);break;case"textarea":ae(e,r),a=re(e,r),Ir("invalid",e)}for(i in ye(n,a),s=a)if(s.hasOwnProperty(i)){var u=s[i];"style"===i?ge(e,u):"dangerouslySetInnerHTML"===i?null!=(u=u?u.__html:void 0)&&de(e,u):"children"===i?"string"==typeof u?("textarea"!==n||""!==u)&&pe(e,u):"number"==typeof u&&pe(e,""+u):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(l.hasOwnProperty(i)?null!=u&&"onScroll"===i&&Ir("scroll",e):null!=u&&b(e,i,u,c))}switch(n){case"input":H(e),J(e,r,!1);break;case"textarea":H(e),ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+U(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?ne(e,!!r.multiple,i,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Jr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Hl(t),null;case 6:if(e&&null!=t.stateNode)Tl(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));if(n=Qo(Vo.current),Qo(Ho.current),po(t)){if(r=t.stateNode,n=t.memoizedProps,r[pa]=t,(i=r.nodeValue!==n)&&null!==(e=no))switch(e.tag){case 3:Xr(r.nodeValue,n,!!(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Xr(r.nodeValue,n,!!(1&e.mode))}i&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[pa]=t,t.stateNode=r}return Hl(t),null;case 13:if(Ea(ei),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ao&&null!==ro&&1&t.mode&&!(128&t.flags))fo(),mo(),t.flags|=98560,i=!1;else if(i=po(t),null!==r&&null!==r.dehydrated){if(null===e){if(!i)throw Error(o(318));if(!(i=null!==(i=t.memoizedState)?i.dehydrated:null))throw Error(o(317));i[pa]=t}else mo(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Hl(t),i=!1}else null!==oo&&(is(oo),oo=null),i=!0;if(!i)return 65536&t.flags?t:null}return 128&t.flags?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,1&t.mode&&(null===e||1&ei.current?0===Tc&&(Tc=3):hs())),null!==t.updateQueue&&(t.flags|=4),Hl(t),null);case 4:return Zo(),Ml(e,t),null===e&&Gr(t.stateNode.containerInfo),Hl(t),null;case 10:return Bo(t.type._context),Hl(t),null;case 19:if(Ea(ei),null===(i=t.memoizedState))return Hl(t),null;if(r=!!(128&t.flags),null===(c=i.rendering))if(r)Wl(i,!1);else{if(0!==Tc||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(c=ti(e))){for(t.flags|=128,Wl(i,!1),null!==(r=c.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(i=n).flags&=14680066,null===(c=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=c.childLanes,i.lanes=c.lanes,i.child=c.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=c.memoizedProps,i.memoizedState=c.memoizedState,i.updateQueue=c.updateQueue,i.type=c.type,e=c.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Sa(ei,1&ei.current|2),t.child}e=e.sibling}null!==i.tail&&Ze()>Gc&&(t.flags|=128,r=!0,Wl(i,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ti(c))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Wl(i,!0),null===i.tail&&"hidden"===i.tailMode&&!c.alternate&&!ao)return Hl(t),null}else 2*Ze()-i.renderingStartTime>Gc&&1073741824!==n&&(t.flags|=128,r=!0,Wl(i,!1),t.lanes=4194304);i.isBackwards?(c.sibling=t.child,t.child=c):(null!==(n=i.last)?n.sibling=c:t.child=c,i.last=c)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=Ze(),t.sibling=null,n=ei.current,Sa(ei,r?1&n|2:1&n),t):(Hl(t),null);case 22:case 23:return ds(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&1&t.mode?!!(1073741824&Mc)&&(Hl(t),6&t.subtreeFlags&&(t.flags|=8192)):Hl(t),null;case 24:case 25:return null}throw Error(o(156,t.tag))}function Vl(e,t){switch(to(t),t.tag){case 1:return Ma(t.type)&&Oa(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return Zo(),Ea(La),Ea(Ba),ri(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 5:return Jo(t),null;case 13:if(Ea(ei),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(o(340));mo()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Ea(ei),null;case 4:return Zo(),null;case 10:return Bo(t.type._context),null;case 22:case 23:return ds(),null;default:return null}}Pl=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ml=function(){},Ol=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,Qo(Ho.current);var o,i=null;switch(n){case"input":a=Q(e,a),r=Q(e,r),i=[];break;case"select":a=j({},a,{value:void 0}),r=j({},r,{value:void 0}),i=[];break;case"textarea":a=re(e,a),r=re(e,r),i=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Jr)}for(u in ye(n,r),n=null,a)if(!r.hasOwnProperty(u)&&a.hasOwnProperty(u)&&null!=a[u])if("style"===u){var c=a[u];for(o in c)c.hasOwnProperty(o)&&(n||(n={}),n[o]="")}else"dangerouslySetInnerHTML"!==u&&"children"!==u&&"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(l.hasOwnProperty(u)?i||(i=[]):(i=i||[]).push(u,null));for(u in r){var s=r[u];if(c=null!=a?a[u]:void 0,r.hasOwnProperty(u)&&s!==c&&(null!=s||null!=c))if("style"===u)if(c){for(o in c)!c.hasOwnProperty(o)||s&&s.hasOwnProperty(o)||(n||(n={}),n[o]="");for(o in s)s.hasOwnProperty(o)&&c[o]!==s[o]&&(n||(n={}),n[o]=s[o])}else n||(i||(i=[]),i.push(u,n)),n=s;else"dangerouslySetInnerHTML"===u?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(i=i||[]).push(u,s)):"children"===u?"string"!=typeof s&&"number"!=typeof s||(i=i||[]).push(u,""+s):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&(l.hasOwnProperty(u)?(null!=s&&"onScroll"===u&&Ir("scroll",e),i||c===s||(i=[])):(i=i||[]).push(u,s))}n&&(i=i||[]).push("style",n);var u=i;(t.updateQueue=u)&&(t.flags|=4)}},Tl=function(e,t,n,r){n!==r&&(t.flags|=4)};var Ql=!1,Kl=!1,Zl="function"==typeof WeakSet?WeakSet:Set,Xl=null;function Jl(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Cs(e,t,n)}else n.current=null}function ec(e,t,n){try{n()}catch(n){Cs(e,t,n)}}var tc=!1;function nc(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var a=r=r.next;do{if((a.tag&e)===e){var o=a.destroy;a.destroy=void 0,void 0!==o&&ec(t,n,o)}a=a.next}while(a!==r)}}function rc(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function ac(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function oc(e){var t=e.alternate;null!==t&&(e.alternate=null,oc(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[pa],delete t[fa],delete t[ha],delete t[ga],delete t[va]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function ic(e){return 5===e.tag||3===e.tag||4===e.tag}function lc(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||ic(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function cc(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Jr));else if(4!==r&&null!==(e=e.child))for(cc(e,t,n),e=e.sibling;null!==e;)cc(e,t,n),e=e.sibling}function sc(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(sc(e,t,n),e=e.sibling;null!==e;)sc(e,t,n),e=e.sibling}var uc=null,dc=!1;function pc(e,t,n){for(n=n.child;null!==n;)fc(e,t,n),n=n.sibling}function fc(e,t,n){if(ot&&"function"==typeof ot.onCommitFiberUnmount)try{ot.onCommitFiberUnmount(at,n)}catch(e){}switch(n.tag){case 5:Kl||Jl(n,t);case 6:var r=uc,a=dc;uc=null,pc(e,t,n),dc=a,null!==(uc=r)&&(dc?(e=uc,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):uc.removeChild(n.stateNode));break;case 18:null!==uc&&(dc?(e=uc,n=n.stateNode,8===e.nodeType?ca(e.parentNode,n):1===e.nodeType&&ca(e,n),Gt(e)):ca(uc,n.stateNode));break;case 4:r=uc,a=dc,uc=n.stateNode.containerInfo,dc=!0,pc(e,t,n),uc=r,dc=a;break;case 0:case 11:case 14:case 15:if(!Kl&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){a=r=r.next;do{var o=a,i=o.destroy;o=o.tag,void 0!==i&&(2&o||4&o)&&ec(n,t,i),a=a.next}while(a!==r)}pc(e,t,n);break;case 1:if(!Kl&&(Jl(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){Cs(n,t,e)}pc(e,t,n);break;case 21:pc(e,t,n);break;case 22:1&n.mode?(Kl=(r=Kl)||null!==n.memoizedState,pc(e,t,n),Kl=r):pc(e,t,n);break;default:pc(e,t,n)}}function mc(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Zl),t.forEach((function(t){var r=Bs.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function hc(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var a=n[r];try{var i=e,l=t,c=l;e:for(;null!==c;){switch(c.tag){case 5:uc=c.stateNode,dc=!1;break e;case 3:case 4:uc=c.stateNode.containerInfo,dc=!0;break e}c=c.return}if(null===uc)throw Error(o(160));fc(i,l,a),uc=null,dc=!1;var s=a.alternate;null!==s&&(s.return=null),a.return=null}catch(e){Cs(a,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)gc(t,e),t=t.sibling}function gc(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(hc(t,e),vc(e),4&r){try{nc(3,e,e.return),rc(3,e)}catch(t){Cs(e,e.return,t)}try{nc(5,e,e.return)}catch(t){Cs(e,e.return,t)}}break;case 1:hc(t,e),vc(e),512&r&&null!==n&&Jl(n,n.return);break;case 5:if(hc(t,e),vc(e),512&r&&null!==n&&Jl(n,n.return),32&e.flags){var a=e.stateNode;try{pe(a,"")}catch(t){Cs(e,e.return,t)}}if(4&r&&null!=(a=e.stateNode)){var i=e.memoizedProps,l=null!==n?n.memoizedProps:i,c=e.type,s=e.updateQueue;if(e.updateQueue=null,null!==s)try{"input"===c&&"radio"===i.type&&null!=i.name&&Z(a,i),be(c,l);var u=be(c,i);for(l=0;l<s.length;l+=2){var d=s[l],p=s[l+1];"style"===d?ge(a,p):"dangerouslySetInnerHTML"===d?de(a,p):"children"===d?pe(a,p):b(a,d,p,u)}switch(c){case"input":X(a,i);break;case"textarea":oe(a,i);break;case"select":var f=a._wrapperState.wasMultiple;a._wrapperState.wasMultiple=!!i.multiple;var m=i.value;null!=m?ne(a,!!i.multiple,m,!1):f!==!!i.multiple&&(null!=i.defaultValue?ne(a,!!i.multiple,i.defaultValue,!0):ne(a,!!i.multiple,i.multiple?[]:"",!1))}a[fa]=i}catch(t){Cs(e,e.return,t)}}break;case 6:if(hc(t,e),vc(e),4&r){if(null===e.stateNode)throw Error(o(162));a=e.stateNode,i=e.memoizedProps;try{a.nodeValue=i}catch(t){Cs(e,e.return,t)}}break;case 3:if(hc(t,e),vc(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Gt(t.containerInfo)}catch(t){Cs(e,e.return,t)}break;case 4:default:hc(t,e),vc(e);break;case 13:hc(t,e),vc(e),8192&(a=e.child).flags&&(i=null!==a.memoizedState,a.stateNode.isHidden=i,!i||null!==a.alternate&&null!==a.alternate.memoizedState||($c=Ze())),4&r&&mc(e);break;case 22:if(d=null!==n&&null!==n.memoizedState,1&e.mode?(Kl=(u=Kl)||d,hc(t,e),Kl=u):hc(t,e),vc(e),8192&r){if(u=null!==e.memoizedState,(e.stateNode.isHidden=u)&&!d&&1&e.mode)for(Xl=e,d=e.child;null!==d;){for(p=Xl=d;null!==Xl;){switch(m=(f=Xl).child,f.tag){case 0:case 11:case 14:case 15:nc(4,f,f.return);break;case 1:Jl(f,f.return);var h=f.stateNode;if("function"==typeof h.componentWillUnmount){r=f,n=f.return;try{t=r,h.props=t.memoizedProps,h.state=t.memoizedState,h.componentWillUnmount()}catch(e){Cs(r,n,e)}}break;case 5:Jl(f,f.return);break;case 22:if(null!==f.memoizedState){wc(p);continue}}null!==m?(m.return=f,Xl=m):wc(p)}d=d.sibling}e:for(d=null,p=e;;){if(5===p.tag){if(null===d){d=p;try{a=p.stateNode,u?"function"==typeof(i=a.style).setProperty?i.setProperty("display","none","important"):i.display="none":(c=p.stateNode,l=null!=(s=p.memoizedProps.style)&&s.hasOwnProperty("display")?s.display:null,c.style.display=he("display",l))}catch(t){Cs(e,e.return,t)}}}else if(6===p.tag){if(null===d)try{p.stateNode.nodeValue=u?"":p.memoizedProps}catch(t){Cs(e,e.return,t)}}else if((22!==p.tag&&23!==p.tag||null===p.memoizedState||p===e)&&null!==p.child){p.child.return=p,p=p.child;continue}if(p===e)break e;for(;null===p.sibling;){if(null===p.return||p.return===e)break e;d===p&&(d=null),p=p.return}d===p&&(d=null),p.sibling.return=p.return,p=p.sibling}}break;case 19:hc(t,e),vc(e),4&r&&mc(e);case 21:}}function vc(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(ic(n)){var r=n;break e}n=n.return}throw Error(o(160))}switch(r.tag){case 5:var a=r.stateNode;32&r.flags&&(pe(a,""),r.flags&=-33),sc(e,lc(e),a);break;case 3:case 4:var i=r.stateNode.containerInfo;cc(e,lc(e),i);break;default:throw Error(o(161))}}catch(t){Cs(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function yc(e,t,n){Xl=e,bc(e,t,n)}function bc(e,t,n){for(var r=!!(1&e.mode);null!==Xl;){var a=Xl,o=a.child;if(22===a.tag&&r){var i=null!==a.memoizedState||Ql;if(!i){var l=a.alternate,c=null!==l&&null!==l.memoizedState||Kl;l=Ql;var s=Kl;if(Ql=i,(Kl=c)&&!s)for(Xl=a;null!==Xl;)c=(i=Xl).child,22===i.tag&&null!==i.memoizedState?xc(a):null!==c?(c.return=i,Xl=c):xc(a);for(;null!==o;)Xl=o,bc(o,t,n),o=o.sibling;Xl=a,Ql=l,Kl=s}Ac(e)}else 8772&a.subtreeFlags&&null!==o?(o.return=a,Xl=o):Ac(e)}}function Ac(e){for(;null!==Xl;){var t=Xl;if(8772&t.flags){var n=t.alternate;try{if(8772&t.flags)switch(t.tag){case 0:case 11:case 15:Kl||rc(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Kl)if(null===n)r.componentDidMount();else{var a=t.elementType===t.type?n.memoizedProps:nl(t.type,n.memoizedProps);r.componentDidUpdate(a,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&Uo(t,i,r);break;case 3:var l=t.updateQueue;if(null!==l){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Uo(t,l,n)}break;case 5:var c=t.stateNode;if(null===n&&4&t.flags){n=c;var s=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":s.autoFocus&&n.focus();break;case"img":s.src&&(n.src=s.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var u=t.alternate;if(null!==u){var d=u.memoizedState;if(null!==d){var p=d.dehydrated;null!==p&&Gt(p)}}}break;default:throw Error(o(163))}Kl||512&t.flags&&ac(t)}catch(e){Cs(t,t.return,e)}}if(t===e){Xl=null;break}if(null!==(n=t.sibling)){n.return=t.return,Xl=n;break}Xl=t.return}}function wc(e){for(;null!==Xl;){var t=Xl;if(t===e){Xl=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Xl=n;break}Xl=t.return}}function xc(e){for(;null!==Xl;){var t=Xl;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{rc(4,t)}catch(e){Cs(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var a=t.return;try{r.componentDidMount()}catch(e){Cs(t,a,e)}}var o=t.return;try{ac(t)}catch(e){Cs(t,o,e)}break;case 5:var i=t.return;try{ac(t)}catch(e){Cs(t,i,e)}}}catch(e){Cs(t,t.return,e)}if(t===e){Xl=null;break}var l=t.sibling;if(null!==l){l.return=t.return,Xl=l;break}Xl=t.return}}var kc,Cc=Math.ceil,Ec=A.ReactCurrentDispatcher,Sc=A.ReactCurrentOwner,Nc=A.ReactCurrentBatchConfig,Bc=0,Lc=null,_c=null,Pc=0,Mc=0,Oc=Ca(0),Tc=0,Fc=null,Dc=0,jc=0,Rc=0,Ic=null,zc=null,$c=0,Gc=1/0,Yc=null,Uc=!1,Wc=null,Hc=null,qc=!1,Vc=null,Qc=0,Kc=0,Zc=null,Xc=-1,Jc=0;function es(){return 6&Bc?Ze():-1!==Xc?Xc:Xc=Ze()}function ts(e){return 1&e.mode?2&Bc&&0!==Pc?Pc&-Pc:null!==go.transition?(0===Jc&&(Jc=ht()),Jc):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Kt(e.type):1}function ns(e,t,n,r){if(50<Kc)throw Kc=0,Zc=null,Error(o(185));vt(e,n,r),2&Bc&&e===Lc||(e===Lc&&(!(2&Bc)&&(jc|=n),4===Tc&&ls(e,Pc)),rs(e,r),1===n&&0===Bc&&!(1&t.mode)&&(Gc=Ze()+500,Ia&&Ga()))}function rs(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,o=e.pendingLanes;0<o;){var i=31-it(o),l=1<<i,c=a[i];-1===c?l&n&&!(l&r)||(a[i]=ft(l,t)):c<=t&&(e.expiredLanes|=l),o&=~l}}(e,t);var r=pt(e,e===Lc?Pc:0);if(0===r)null!==n&&Ve(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Ve(n),1===t)0===e.tag?function(e){Ia=!0,$a(e)}(cs.bind(null,e)):$a(cs.bind(null,e)),ia((function(){!(6&Bc)&&Ga()})),n=null;else{switch(At(r)){case 1:n=Je;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Ls(n,as.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function as(e,t){if(Xc=-1,Jc=0,6&Bc)throw Error(o(327));var n=e.callbackNode;if(xs()&&e.callbackNode!==n)return null;var r=pt(e,e===Lc?Pc:0);if(0===r)return null;if(30&r||r&e.expiredLanes||t)t=gs(e,r);else{t=r;var a=Bc;Bc|=2;var i=ms();for(Lc===e&&Pc===t||(Yc=null,Gc=Ze()+500,ps(e,t));;)try{ys();break}catch(t){fs(e,t)}No(),Ec.current=i,Bc=a,null!==_c?t=0:(Lc=null,Pc=0,t=Tc)}if(0!==t){if(2===t&&0!==(a=mt(e))&&(r=a,t=os(e,a)),1===t)throw n=Fc,ps(e,0),ls(e,r),rs(e,Ze()),n;if(6===t)ls(e,r);else{if(a=e.current.alternate,!(30&r||function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var a=n[r],o=a.getSnapshot;a=a.value;try{if(!lr(o(),a))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(a)||(t=gs(e,r),2===t&&(i=mt(e),0!==i&&(r=i,t=os(e,i))),1!==t)))throw n=Fc,ps(e,0),ls(e,r),rs(e,Ze()),n;switch(e.finishedWork=a,e.finishedLanes=r,t){case 0:case 1:throw Error(o(345));case 2:case 5:ws(e,zc,Yc);break;case 3:if(ls(e,r),(130023424&r)===r&&10<(t=$c+500-Ze())){if(0!==pt(e,0))break;if(((a=e.suspendedLanes)&r)!==r){es(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=ra(ws.bind(null,e,zc,Yc),t);break}ws(e,zc,Yc);break;case 4:if(ls(e,r),(4194240&r)===r)break;for(t=e.eventTimes,a=-1;0<r;){var l=31-it(r);i=1<<l,(l=t[l])>a&&(a=l),r&=~i}if(r=a,10<(r=(120>(r=Ze()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Cc(r/1960))-r)){e.timeoutHandle=ra(ws.bind(null,e,zc,Yc),r);break}ws(e,zc,Yc);break;default:throw Error(o(329))}}}return rs(e,Ze()),e.callbackNode===n?as.bind(null,e):null}function os(e,t){var n=Ic;return e.current.memoizedState.isDehydrated&&(ps(e,t).flags|=256),2!==(e=gs(e,t))&&(t=zc,zc=n,null!==t&&is(t)),e}function is(e){null===zc?zc=e:zc.push.apply(zc,e)}function ls(e,t){for(t&=~Rc,t&=~jc,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-it(t),r=1<<n;e[n]=-1,t&=~r}}function cs(e){if(6&Bc)throw Error(o(327));xs();var t=pt(e,0);if(!(1&t))return rs(e,Ze()),null;var n=gs(e,t);if(0!==e.tag&&2===n){var r=mt(e);0!==r&&(t=r,n=os(e,r))}if(1===n)throw n=Fc,ps(e,0),ls(e,t),rs(e,Ze()),n;if(6===n)throw Error(o(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,ws(e,zc,Yc),rs(e,Ze()),null}function ss(e,t){var n=Bc;Bc|=1;try{return e(t)}finally{0===(Bc=n)&&(Gc=Ze()+500,Ia&&Ga())}}function us(e){null!==Vc&&0===Vc.tag&&!(6&Bc)&&xs();var t=Bc;Bc|=1;var n=Nc.transition,r=bt;try{if(Nc.transition=null,bt=1,e)return e()}finally{bt=r,Nc.transition=n,!(6&(Bc=t))&&Ga()}}function ds(){Mc=Oc.current,Ea(Oc)}function ps(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,aa(n)),null!==_c)for(n=_c.return;null!==n;){var r=n;switch(to(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Oa();break;case 3:Zo(),Ea(La),Ea(Ba),ri();break;case 5:Jo(r);break;case 4:Zo();break;case 13:case 19:Ea(ei);break;case 10:Bo(r.type._context);break;case 22:case 23:ds()}n=n.return}if(Lc=e,_c=e=Os(e.current,null),Pc=Mc=t,Tc=0,Fc=null,Rc=jc=Dc=0,zc=Ic=null,null!==Mo){for(t=0;t<Mo.length;t++)if(null!==(r=(n=Mo[t]).interleaved)){n.interleaved=null;var a=r.next,o=n.pending;if(null!==o){var i=o.next;o.next=a,r.next=i}n.pending=r}Mo=null}return e}function fs(e,t){for(;;){var n=_c;try{if(No(),ai.current=Xi,ui){for(var r=li.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}ui=!1}if(ii=0,si=ci=li=null,di=!1,pi=0,Sc.current=null,null===n||null===n.return){Tc=1,Fc=t,_c=null;break}e:{var i=e,l=n.return,c=n,s=t;if(t=Pc,c.flags|=32768,null!==s&&"object"==typeof s&&"function"==typeof s.then){var u=s,d=c,p=d.tag;if(!(1&d.mode||0!==p&&11!==p&&15!==p)){var f=d.alternate;f?(d.updateQueue=f.updateQueue,d.memoizedState=f.memoizedState,d.lanes=f.lanes):(d.updateQueue=null,d.memoizedState=null)}var m=gl(l);if(null!==m){m.flags&=-257,vl(m,l,c,0,t),1&m.mode&&hl(i,u,t),s=u;var h=(t=m).updateQueue;if(null===h){var g=new Set;g.add(s),t.updateQueue=g}else h.add(s);break e}if(!(1&t)){hl(i,u,t),hs();break e}s=Error(o(426))}else if(ao&&1&c.mode){var v=gl(l);if(null!==v){!(65536&v.flags)&&(v.flags|=256),vl(v,l,c,0,t),ho(sl(s,c));break e}}i=s=sl(s,c),4!==Tc&&(Tc=2),null===Ic?Ic=[i]:Ic.push(i),i=l;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t,Go(i,fl(0,s,t));break e;case 1:c=s;var y=i.type,b=i.stateNode;if(!(128&i.flags||"function"!=typeof y.getDerivedStateFromError&&(null===b||"function"!=typeof b.componentDidCatch||null!==Hc&&Hc.has(b)))){i.flags|=65536,t&=-t,i.lanes|=t,Go(i,ml(i,c,t));break e}}i=i.return}while(null!==i)}As(n)}catch(e){t=e,_c===n&&null!==n&&(_c=n=n.return);continue}break}}function ms(){var e=Ec.current;return Ec.current=Xi,null===e?Xi:e}function hs(){0!==Tc&&3!==Tc&&2!==Tc||(Tc=4),null===Lc||!(268435455&Dc)&&!(268435455&jc)||ls(Lc,Pc)}function gs(e,t){var n=Bc;Bc|=2;var r=ms();for(Lc===e&&Pc===t||(Yc=null,ps(e,t));;)try{vs();break}catch(t){fs(e,t)}if(No(),Bc=n,Ec.current=r,null!==_c)throw Error(o(261));return Lc=null,Pc=0,Tc}function vs(){for(;null!==_c;)bs(_c)}function ys(){for(;null!==_c&&!Qe();)bs(_c)}function bs(e){var t=kc(e.alternate,e,Mc);e.memoizedProps=e.pendingProps,null===t?As(e):_c=t,Sc.current=null}function As(e){var t=e;do{var n=t.alternate;if(e=t.return,32768&t.flags){if(null!==(n=Vl(n,t)))return n.flags&=32767,void(_c=n);if(null===e)return Tc=6,void(_c=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}else if(null!==(n=ql(n,t,Mc)))return void(_c=n);if(null!==(t=t.sibling))return void(_c=t);_c=t=e}while(null!==t);0===Tc&&(Tc=5)}function ws(e,t,n){var r=bt,a=Nc.transition;try{Nc.transition=null,bt=1,function(e,t,n,r){do{xs()}while(null!==Vc);if(6&Bc)throw Error(o(327));n=e.finishedWork;var a=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var a=31-it(n),o=1<<a;t[a]=0,r[a]=-1,e[a]=-1,n&=~o}}(e,i),e===Lc&&(_c=Lc=null,Pc=0),!(2064&n.subtreeFlags)&&!(2064&n.flags)||qc||(qc=!0,Ls(tt,(function(){return xs(),null}))),i=!!(15990&n.flags),15990&n.subtreeFlags||i){i=Nc.transition,Nc.transition=null;var l=bt;bt=1;var c=Bc;Bc|=4,Sc.current=null,function(e,t){if(ea=Ut,fr(e=pr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var a=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch(e){n=null;break e}var l=0,c=-1,s=-1,u=0,d=0,p=e,f=null;t:for(;;){for(var m;p!==n||0!==a&&3!==p.nodeType||(c=l+a),p!==i||0!==r&&3!==p.nodeType||(s=l+r),3===p.nodeType&&(l+=p.nodeValue.length),null!==(m=p.firstChild);)f=p,p=m;for(;;){if(p===e)break t;if(f===n&&++u===a&&(c=l),f===i&&++d===r&&(s=l),null!==(m=p.nextSibling))break;f=(p=f).parentNode}p=m}n=-1===c||-1===s?null:{start:c,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(ta={focusedElem:e,selectionRange:n},Ut=!1,Xl=t;null!==Xl;)if(e=(t=Xl).child,1028&t.subtreeFlags&&null!==e)e.return=t,Xl=e;else for(;null!==Xl;){t=Xl;try{var h=t.alternate;if(1024&t.flags)switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==h){var g=h.memoizedProps,v=h.memoizedState,y=t.stateNode,b=y.getSnapshotBeforeUpdate(t.elementType===t.type?g:nl(t.type,g),v);y.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var A=t.stateNode.containerInfo;1===A.nodeType?A.textContent="":9===A.nodeType&&A.documentElement&&A.removeChild(A.documentElement);break;default:throw Error(o(163))}}catch(e){Cs(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Xl=e;break}Xl=t.return}h=tc,tc=!1}(e,n),gc(n,e),mr(ta),Ut=!!ea,ta=ea=null,e.current=n,yc(n,e,a),Ke(),Bc=c,bt=l,Nc.transition=i}else e.current=n;if(qc&&(qc=!1,Vc=e,Qc=a),0===(i=e.pendingLanes)&&(Hc=null),function(e){if(ot&&"function"==typeof ot.onCommitFiberRoot)try{ot.onCommitFiberRoot(at,e,void 0,!(128&~e.current.flags))}catch(e){}}(n.stateNode),rs(e,Ze()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((a=t[n]).value,{componentStack:a.stack,digest:a.digest});if(Uc)throw Uc=!1,e=Wc,Wc=null,e;!!(1&Qc)&&0!==e.tag&&xs(),1&(i=e.pendingLanes)?e===Zc?Kc++:(Kc=0,Zc=e):Kc=0,Ga()}(e,t,n,r)}finally{Nc.transition=a,bt=r}return null}function xs(){if(null!==Vc){var e=At(Qc),t=Nc.transition,n=bt;try{if(Nc.transition=null,bt=16>e?16:e,null===Vc)var r=!1;else{if(e=Vc,Vc=null,Qc=0,6&Bc)throw Error(o(331));var a=Bc;for(Bc|=4,Xl=e.current;null!==Xl;){var i=Xl,l=i.child;if(16&Xl.flags){var c=i.deletions;if(null!==c){for(var s=0;s<c.length;s++){var u=c[s];for(Xl=u;null!==Xl;){var d=Xl;switch(d.tag){case 0:case 11:case 15:nc(8,d,i)}var p=d.child;if(null!==p)p.return=d,Xl=p;else for(;null!==Xl;){var f=(d=Xl).sibling,m=d.return;if(oc(d),d===u){Xl=null;break}if(null!==f){f.return=m,Xl=f;break}Xl=m}}}var h=i.alternate;if(null!==h){var g=h.child;if(null!==g){h.child=null;do{var v=g.sibling;g.sibling=null,g=v}while(null!==g)}}Xl=i}}if(2064&i.subtreeFlags&&null!==l)l.return=i,Xl=l;else e:for(;null!==Xl;){if(2048&(i=Xl).flags)switch(i.tag){case 0:case 11:case 15:nc(9,i,i.return)}var y=i.sibling;if(null!==y){y.return=i.return,Xl=y;break e}Xl=i.return}}var b=e.current;for(Xl=b;null!==Xl;){var A=(l=Xl).child;if(2064&l.subtreeFlags&&null!==A)A.return=l,Xl=A;else e:for(l=b;null!==Xl;){if(2048&(c=Xl).flags)try{switch(c.tag){case 0:case 11:case 15:rc(9,c)}}catch(e){Cs(c,c.return,e)}if(c===l){Xl=null;break e}var w=c.sibling;if(null!==w){w.return=c.return,Xl=w;break e}Xl=c.return}}if(Bc=a,Ga(),ot&&"function"==typeof ot.onPostCommitFiberRoot)try{ot.onPostCommitFiberRoot(at,e)}catch(e){}r=!0}return r}finally{bt=n,Nc.transition=t}}return!1}function ks(e,t,n){e=zo(e,t=fl(0,t=sl(n,t),1),1),t=es(),null!==e&&(vt(e,1,t),rs(e,t))}function Cs(e,t,n){if(3===e.tag)ks(e,e,n);else for(;null!==t;){if(3===t.tag){ks(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Hc||!Hc.has(r))){t=zo(t,e=ml(t,e=sl(n,e),1),1),e=es(),null!==t&&(vt(t,1,e),rs(t,e));break}}t=t.return}}function Es(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=es(),e.pingedLanes|=e.suspendedLanes&n,Lc===e&&(Pc&n)===n&&(4===Tc||3===Tc&&(130023424&Pc)===Pc&&500>Ze()-$c?ps(e,0):Rc|=n),rs(e,t)}function Ss(e,t){0===t&&(1&e.mode?(t=ut,!(130023424&(ut<<=1))&&(ut=4194304)):t=1);var n=es();null!==(e=Fo(e,t))&&(vt(e,t,n),rs(e,n))}function Ns(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Ss(e,n)}function Bs(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(n=a.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(o(314))}null!==r&&r.delete(t),Ss(e,n)}function Ls(e,t){return qe(e,t)}function _s(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ps(e,t,n,r){return new _s(e,t,n,r)}function Ms(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Os(e,t){var n=e.alternate;return null===n?((n=Ps(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ts(e,t,n,r,a,i){var l=2;if(r=e,"function"==typeof e)Ms(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case k:return Fs(n.children,a,i,t);case C:l=8,a|=8;break;case E:return(e=Ps(12,n,t,2|a)).elementType=E,e.lanes=i,e;case L:return(e=Ps(13,n,t,a)).elementType=L,e.lanes=i,e;case _:return(e=Ps(19,n,t,a)).elementType=_,e.lanes=i,e;case O:return Ds(n,a,i,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case S:l=10;break e;case N:l=9;break e;case B:l=11;break e;case P:l=14;break e;case M:l=16,r=null;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=Ps(l,n,t,a)).elementType=e,t.type=r,t.lanes=i,t}function Fs(e,t,n,r){return(e=Ps(7,e,r,t)).lanes=n,e}function Ds(e,t,n,r){return(e=Ps(22,e,r,t)).elementType=O,e.lanes=n,e.stateNode={isHidden:!1},e}function js(e,t,n){return(e=Ps(6,e,null,t)).lanes=n,e}function Rs(e,t,n){return(t=Ps(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Is(e,t,n,r,a){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=gt(0),this.expirationTimes=gt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=gt(0),this.identifierPrefix=r,this.onRecoverableError=a,this.mutableSourceEagerHydrationData=null}function zs(e,t,n,r,a,o,i,l,c){return e=new Is(e,t,n,l,c),1===t?(t=1,!0===o&&(t|=8)):t=0,o=Ps(3,null,null,t),e.current=o,o.stateNode=e,o.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},jo(o),e}function $s(e){if(!e)return Na;e:{if(Ge(e=e._reactInternals)!==e||1!==e.tag)throw Error(o(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Ma(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(o(171))}if(1===e.tag){var n=e.type;if(Ma(n))return Fa(e,n,t)}return t}function Gs(e,t,n,r,a,o,i,l,c){return(e=zs(n,r,!0,e,0,o,0,l,c)).context=$s(null),n=e.current,(o=Io(r=es(),a=ts(n))).callback=null!=t?t:null,zo(n,o,a),e.current.lanes=a,vt(e,a,r),rs(e,r),e}function Ys(e,t,n,r){var a=t.current,o=es(),i=ts(a);return n=$s(n),null===t.context?t.context=n:t.pendingContext=n,(t=Io(o,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=zo(a,t,i))&&(ns(e,a,i,o),$o(e,a,i)),i}function Us(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Ws(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Hs(e,t){Ws(e,t),(e=e.alternate)&&Ws(e,t)}kc=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||La.current)bl=!0;else{if(!(e.lanes&n||128&t.flags))return bl=!1,function(e,t,n){switch(t.tag){case 3:Ll(t),mo();break;case 5:Xo(t);break;case 1:Ma(t.type)&&Da(t);break;case 4:Ko(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,a=t.memoizedProps.value;Sa(ko,r._currentValue),r._currentValue=a;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Sa(ei,1&ei.current),t.flags|=128,null):n&t.child.childLanes?jl(e,t,n):(Sa(ei,1&ei.current),null!==(e=Ul(e,t,n))?e.sibling:null);Sa(ei,1&ei.current);break;case 19:if(r=!!(n&t.childLanes),128&e.flags){if(r)return Gl(e,t,n);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),Sa(ei,ei.current),r)break;return null;case 22:case 23:return t.lanes=0,Cl(e,t,n)}return Ul(e,t,n)}(e,t,n);bl=!!(131072&e.flags)}else bl=!1,ao&&1048576&t.flags&&Ja(t,Ha,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Yl(e,t),e=t.pendingProps;var a=Pa(t,Ba.current);_o(t,n),a=gi(null,t,r,e,a,n);var i=vi();return t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Ma(r)?(i=!0,Da(t)):i=!1,t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,jo(t),a.updater=al,t.stateNode=a,a._reactInternals=t,cl(t,r,e,n),t=Bl(null,t,r,!0,i,n)):(t.tag=0,ao&&i&&eo(t),Al(null,t,a,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Yl(e,t),e=t.pendingProps,r=(a=r._init)(r._payload),t.type=r,a=t.tag=function(e){if("function"==typeof e)return Ms(e)?1:0;if(null!=e){if((e=e.$$typeof)===B)return 11;if(e===P)return 14}return 2}(r),e=nl(r,e),a){case 0:t=Sl(null,t,r,e,n);break e;case 1:t=Nl(null,t,r,e,n);break e;case 11:t=wl(null,t,r,e,n);break e;case 14:t=xl(null,t,r,nl(r.type,e),n);break e}throw Error(o(306,r,""))}return t;case 0:return r=t.type,a=t.pendingProps,Sl(e,t,r,a=t.elementType===r?a:nl(r,a),n);case 1:return r=t.type,a=t.pendingProps,Nl(e,t,r,a=t.elementType===r?a:nl(r,a),n);case 3:e:{if(Ll(t),null===e)throw Error(o(387));r=t.pendingProps,a=(i=t.memoizedState).element,Ro(e,t),Yo(t,r,null,n);var l=t.memoizedState;if(r=l.element,i.isDehydrated){if(i={element:r,isDehydrated:!1,cache:l.cache,pendingSuspenseBoundaries:l.pendingSuspenseBoundaries,transitions:l.transitions},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=_l(e,t,r,n,a=sl(Error(o(423)),t));break e}if(r!==a){t=_l(e,t,r,n,a=sl(Error(o(424)),t));break e}for(ro=sa(t.stateNode.containerInfo.firstChild),no=t,ao=!0,oo=null,n=xo(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(mo(),r===a){t=Ul(e,t,n);break e}Al(e,t,r,n)}t=t.child}return t;case 5:return Xo(t),null===e&&so(t),r=t.type,a=t.pendingProps,i=null!==e?e.memoizedProps:null,l=a.children,na(r,a)?l=null:null!==i&&na(r,i)&&(t.flags|=32),El(e,t),Al(e,t,l,n),t.child;case 6:return null===e&&so(t),null;case 13:return jl(e,t,n);case 4:return Ko(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=wo(t,null,r,n):Al(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,wl(e,t,r,a=t.elementType===r?a:nl(r,a),n);case 7:return Al(e,t,t.pendingProps,n),t.child;case 8:case 12:return Al(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,a=t.pendingProps,i=t.memoizedProps,l=a.value,Sa(ko,r._currentValue),r._currentValue=l,null!==i)if(lr(i.value,l)){if(i.children===a.children&&!La.current){t=Ul(e,t,n);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var c=i.dependencies;if(null!==c){l=i.child;for(var s=c.firstContext;null!==s;){if(s.context===r){if(1===i.tag){(s=Io(-1,n&-n)).tag=2;var u=i.updateQueue;if(null!==u){var d=(u=u.shared).pending;null===d?s.next=s:(s.next=d.next,d.next=s),u.pending=s}}i.lanes|=n,null!==(s=i.alternate)&&(s.lanes|=n),Lo(i.return,n,t),c.lanes|=n;break}s=s.next}}else if(10===i.tag)l=i.type===t.type?null:i.child;else if(18===i.tag){if(null===(l=i.return))throw Error(o(341));l.lanes|=n,null!==(c=l.alternate)&&(c.lanes|=n),Lo(l,n,t),l=i.sibling}else l=i.child;if(null!==l)l.return=i;else for(l=i;null!==l;){if(l===t){l=null;break}if(null!==(i=l.sibling)){i.return=l.return,l=i;break}l=l.return}i=l}Al(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=t.pendingProps.children,_o(t,n),r=r(a=Po(a)),t.flags|=1,Al(e,t,r,n),t.child;case 14:return a=nl(r=t.type,t.pendingProps),xl(e,t,r,a=nl(r.type,a),n);case 15:return kl(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:nl(r,a),Yl(e,t),t.tag=1,Ma(r)?(e=!0,Da(t)):e=!1,_o(t,n),il(t,r,a),cl(t,r,a,n),Bl(null,t,r,!0,e,n);case 19:return Gl(e,t,n);case 22:return Cl(e,t,n)}throw Error(o(156,t.tag))};var qs="function"==typeof reportError?reportError:function(e){console.error(e)};function Vs(e){this._internalRoot=e}function Qs(e){this._internalRoot=e}function Ks(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Zs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Xs(){}function Js(e,t,n,r,a){var o=n._reactRootContainer;if(o){var i=o;if("function"==typeof a){var l=a;a=function(){var e=Us(i);l.call(e)}}Ys(t,i,e,a)}else i=function(e,t,n,r,a){if(a){if("function"==typeof r){var o=r;r=function(){var e=Us(i);o.call(e)}}var i=Gs(t,r,e,0,null,!1,0,"",Xs);return e._reactRootContainer=i,e[ma]=i.current,Gr(8===e.nodeType?e.parentNode:e),us(),i}for(;a=e.lastChild;)e.removeChild(a);if("function"==typeof r){var l=r;r=function(){var e=Us(c);l.call(e)}}var c=zs(e,0,!1,null,0,!1,0,"",Xs);return e._reactRootContainer=c,e[ma]=c.current,Gr(8===e.nodeType?e.parentNode:e),us((function(){Ys(t,c,n,r)})),c}(n,t,e,a,r);return Us(i)}Qs.prototype.render=Vs.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(o(409));Ys(e,t,null,null)},Qs.prototype.unmount=Vs.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;us((function(){Ys(null,e,null,null)})),t[ma]=null}},Qs.prototype.unstable_scheduleHydration=function(e){if(e){var t=Ct();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Ot.length&&0!==t&&t<Ot[n].priority;n++);Ot.splice(n,0,e),0===n&&jt(e)}},wt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=dt(t.pendingLanes);0!==n&&(yt(t,1|n),rs(t,Ze()),!(6&Bc)&&(Gc=Ze()+500,Ga()))}break;case 13:us((function(){var t=Fo(e,1);if(null!==t){var n=es();ns(t,e,1,n)}})),Hs(e,1)}},xt=function(e){if(13===e.tag){var t=Fo(e,134217728);null!==t&&ns(t,e,134217728,es()),Hs(e,134217728)}},kt=function(e){if(13===e.tag){var t=ts(e),n=Fo(e,t);null!==n&&ns(n,e,t,es()),Hs(e,t)}},Ct=function(){return bt},Et=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},xe=function(e,t,n){switch(t){case"input":if(X(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=wa(r);if(!a)throw Error(o(90));q(r),X(r,a)}}}break;case"textarea":oe(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Be=ss,Le=us;var eu={usingClientEntryPoint:!1,Events:[ba,Aa,wa,Se,Ne,ss]},tu={findFiberByHostInstance:ya,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},nu={bundleType:tu.bundleType,version:tu.version,rendererPackageName:tu.rendererPackageName,rendererConfig:tu.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:A.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=We(e))?null:e.stateNode},findFiberByHostInstance:tu.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ru=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ru.isDisabled&&ru.supportsFiber)try{at=ru.inject(nu),ot=ru}catch(ue){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=eu,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Ks(t))throw Error(o(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:x,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Ks(e))throw Error(o(299));var n=!1,r="",a=qs;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(a=t.onRecoverableError)),t=zs(e,1,!1,null,0,n,0,r,a),e[ma]=t.current,Gr(8===e.nodeType?e.parentNode:e),new Vs(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return null===(e=We(t))?null:e.stateNode},t.flushSync=function(e){return us(e)},t.hydrate=function(e,t,n){if(!Zs(t))throw Error(o(200));return Js(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Ks(e))throw Error(o(405));var r=null!=n&&n.hydratedSources||null,a=!1,i="",l=qs;if(null!=n&&(!0===n.unstable_strictMode&&(a=!0),void 0!==n.identifierPrefix&&(i=n.identifierPrefix),void 0!==n.onRecoverableError&&(l=n.onRecoverableError)),t=Gs(t,null,e,1,null!=n?n:null,a,0,i,l),e[ma]=t.current,Gr(e),r)for(e=0;e<r.length;e++)a=(a=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,a]:t.mutableSourceEagerHydrationData.push(n,a);return new Qs(t)},t.render=function(e,t,n){if(!Zs(t))throw Error(o(200));return Js(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Zs(e))throw Error(o(40));return!!e._reactRootContainer&&(us((function(){Js(null,null,e,!1,(function(){e._reactRootContainer=null,e[ma]=null}))})),!0)},t.unstable_batchedUpdates=ss,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Zs(n))throw Error(o(200));if(null==e||void 0===e._reactInternals)throw Error(o(38));return Js(e,t,n,!1,r)},t.version="18.3.1-next-f1338f8080-20240426"},2614:(e,t,n)=>{"use strict";e.exports=n.p+"fd0110471f2228c1808a.ttf"},3072:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,a=n?Symbol.for("react.portal"):60106,o=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,c=n?Symbol.for("react.provider"):60109,s=n?Symbol.for("react.context"):60110,u=n?Symbol.for("react.async_mode"):60111,d=n?Symbol.for("react.concurrent_mode"):60111,p=n?Symbol.for("react.forward_ref"):60112,f=n?Symbol.for("react.suspense"):60113,m=n?Symbol.for("react.suspense_list"):60120,h=n?Symbol.for("react.memo"):60115,g=n?Symbol.for("react.lazy"):60116,v=n?Symbol.for("react.block"):60121,y=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,A=n?Symbol.for("react.scope"):60119;function w(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case u:case d:case o:case l:case i:case f:return e;default:switch(e=e&&e.$$typeof){case s:case p:case g:case h:case c:return e;default:return t}}case a:return t}}}function x(e){return w(e)===d}t.AsyncMode=u,t.ConcurrentMode=d,t.ContextConsumer=s,t.ContextProvider=c,t.Element=r,t.ForwardRef=p,t.Fragment=o,t.Lazy=g,t.Memo=h,t.Portal=a,t.Profiler=l,t.StrictMode=i,t.Suspense=f,t.isAsyncMode=function(e){return x(e)||w(e)===u},t.isConcurrentMode=x,t.isContextConsumer=function(e){return w(e)===s},t.isContextProvider=function(e){return w(e)===c},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return w(e)===p},t.isFragment=function(e){return w(e)===o},t.isLazy=function(e){return w(e)===g},t.isMemo=function(e){return w(e)===h},t.isPortal=function(e){return w(e)===a},t.isProfiler=function(e){return w(e)===l},t.isStrictMode=function(e){return w(e)===i},t.isSuspense=function(e){return w(e)===f},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===d||e===l||e===i||e===f||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===h||e.$$typeof===c||e.$$typeof===s||e.$$typeof===p||e.$$typeof===y||e.$$typeof===b||e.$$typeof===A||e.$$typeof===v)},t.typeOf=w},3142:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r.A,private_createBreakpoints:()=>a.A,unstable_applyStyles:()=>o.A});var r=n(8749),a=n(8094),o=n(8336)},3174:(e,t,n)=>{"use strict";n.d(t,{J:()=>g});var r={animationIterationCount:1,aspectRatio:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,scale:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},a=n(6289),o=!1,i=/[A-Z]|^ms/g,l=/_EMO_([^_]+?)_([^]*?)_EMO_/g,c=function(e){return 45===e.charCodeAt(1)},s=function(e){return null!=e&&"boolean"!=typeof e},u=(0,a.A)((function(e){return c(e)?e:e.replace(i,"-$&").toLowerCase()})),d=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace(l,(function(e,t,n){return m={name:t,styles:n,next:m},t}))}return 1===r[e]||c(e)||"number"!=typeof t||0===t?t:t+"px"},p="Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";function f(e,t,n){if(null==n)return"";var r=n;if(void 0!==r.__emotion_styles)return r;switch(typeof n){case"boolean":return"";case"object":var a=n;if(1===a.anim)return m={name:a.name,styles:a.styles,next:m},a.name;var i=n;if(void 0!==i.styles){var l=i.next;if(void 0!==l)for(;void 0!==l;)m={name:l.name,styles:l.styles,next:m},l=l.next;return i.styles+";"}return function(e,t,n){var r="";if(Array.isArray(n))for(var a=0;a<n.length;a++)r+=f(e,t,n[a])+";";else for(var i in n){var l=n[i];if("object"!=typeof l){var c=l;null!=t&&void 0!==t[c]?r+=i+"{"+t[c]+"}":s(c)&&(r+=u(i)+":"+d(i,c)+";")}else{if("NO_COMPONENT_SELECTOR"===i&&o)throw new Error(p);if(!Array.isArray(l)||"string"!=typeof l[0]||null!=t&&void 0!==t[l[0]]){var m=f(e,t,l);switch(i){case"animation":case"animationName":r+=u(i)+":"+m+";";break;default:r+=i+"{"+m+"}"}}else for(var h=0;h<l.length;h++)s(l[h])&&(r+=u(i)+":"+d(i,l[h])+";")}}return r}(e,t,n);case"function":if(void 0!==e){var c=m,h=n(e);return m=c,f(e,t,h)}}var g=n;if(null==t)return g;var v=t[g];return void 0!==v?v:g}var m,h=/label:\s*([^\s;{]+)\s*(;|$)/g;function g(e,t,n){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var r=!0,a="";m=void 0;var o=e[0];null==o||void 0===o.raw?(r=!1,a+=f(n,t,o)):a+=o[0];for(var i=1;i<e.length;i++)a+=f(n,t,e[i]),r&&(a+=o[i]);h.lastIndex=0;for(var l,c="";null!==(l=h.exec(a));)c+="-"+l[1];var s=function(e){for(var t,n=0,r=0,a=e.length;a>=4;++r,a-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(a){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)}(a)+c;return{name:s,styles:a,next:m}}},3404:(e,t,n)=>{"use strict";e.exports=n(3072)},3571:(e,t,n)=>{"use strict";n.d(t,{A:()=>u,k:()=>c});var r=n(3967),a=n(4620),o=n(6481),i=n(9452),l=n(4188);function c(){function e(e,t,n,a){const l={[e]:t,theme:n},c=a[e];if(!c)return{[e]:t};const{cssProperty:s=e,themeKey:u,transform:d,style:p}=c;if(null==t)return null;if("typography"===u&&"inherit"===t)return{[e]:t};const f=(0,o.Yn)(n,u)||{};return p?p(l):(0,i.NI)(l,t,(t=>{let n=(0,o.BO)(f,d,t);return t===n&&"string"==typeof t&&(n=(0,o.BO)(f,d,`${e}${"default"===t?"":(0,r.A)(t)}`,t)),!1===s?n:{[s]:n}}))}return function t(n){var r;const{sx:o,theme:c={}}=n||{};if(!o)return null;const s=null!=(r=c.unstable_sxConfig)?r:l.A;function u(n){let r=n;if("function"==typeof n)r=n(c);else if("object"!=typeof n)return n;if(!r)return null;const o=(0,i.EU)(c.breakpoints),l=Object.keys(o);let u=o;return Object.keys(r).forEach((n=>{const o="function"==typeof(l=r[n])?l(c):l;var l;if(null!=o)if("object"==typeof o)if(s[n])u=(0,a.A)(u,e(n,o,c,s));else{const e=(0,i.NI)({theme:c},o,(e=>({[n]:e})));!function(...e){const t=e.reduce(((e,t)=>e.concat(Object.keys(t))),[]),n=new Set(t);return e.every((e=>n.size===Object.keys(e).length))}(e,o)?u=(0,a.A)(u,e):u[n]=t({sx:o,theme:c})}else u=(0,a.A)(u,e(n,o,c,s))})),(0,i.vf)(l,u)}return Array.isArray(o)?o.map(u):u(o)}}const s=c();s.filterProps=["sx"];const u=s},3857:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r.A,extendSxProp:()=>a.A,unstable_createStyleFunctionSx:()=>r.k,unstable_defaultSxConfig:()=>o.A});var r=n(3571),a=n(9599),o=n(4188)},3967:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var r=n(9453);function a(e){if("string"!=typeof e)throw new Error((0,r.A)(7));return e.charAt(0).toUpperCase()+e.slice(1)}},4063:(e,t,n)=>{"use strict";e.exports=n.p+"ae41054b33bf901739c8.ttf"},4115:(e,t,n)=>{"use strict";e.exports=n.p+"50346366837ca02cca28.ttf"},4146:(e,t,n)=>{"use strict";var r=n(3404),a={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function c(e){return r.isMemo(e)?i:l[e.$$typeof]||a}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=i;var s=Object.defineProperty,u=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,f=Object.getPrototypeOf,m=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(m){var a=f(n);a&&a!==m&&e(t,a,r)}var i=u(n);d&&(i=i.concat(d(n)));for(var l=c(t),h=c(n),g=0;g<i.length;++g){var v=i[g];if(!(o[v]||r&&r[v]||h&&h[v]||l&&l[v])){var y=p(n,v);try{s(t,v,y)}catch(e){}}}}return t}},4188:(e,t,n)=>{"use strict";n.d(t,{A:()=>T});var r=n(8248),a=n(6481),o=n(4620);const i=function(...e){const t=e.reduce(((e,t)=>(t.filterProps.forEach((n=>{e[n]=t})),e)),{}),n=e=>Object.keys(e).reduce(((n,r)=>t[r]?(0,o.A)(n,t[r](e)):n),{});return n.propTypes={},n.filterProps=e.reduce(((e,t)=>e.concat(t.filterProps)),[]),n};var l=n(9452);function c(e){return"number"!=typeof e?e:`${e}px solid`}function s(e,t){return(0,a.Ay)({prop:e,themeKey:"borders",transform:t})}const u=s("border",c),d=s("borderTop",c),p=s("borderRight",c),f=s("borderBottom",c),m=s("borderLeft",c),h=s("borderColor"),g=s("borderTopColor"),v=s("borderRightColor"),y=s("borderBottomColor"),b=s("borderLeftColor"),A=s("outline",c),w=s("outlineColor"),x=e=>{if(void 0!==e.borderRadius&&null!==e.borderRadius){const t=(0,r.MA)(e.theme,"shape.borderRadius",4,"borderRadius"),n=e=>({borderRadius:(0,r._W)(t,e)});return(0,l.NI)(e,e.borderRadius,n)}return null};x.propTypes={},x.filterProps=["borderRadius"],i(u,d,p,f,m,h,g,v,y,b,x,A,w);const k=e=>{if(void 0!==e.gap&&null!==e.gap){const t=(0,r.MA)(e.theme,"spacing",8,"gap"),n=e=>({gap:(0,r._W)(t,e)});return(0,l.NI)(e,e.gap,n)}return null};k.propTypes={},k.filterProps=["gap"];const C=e=>{if(void 0!==e.columnGap&&null!==e.columnGap){const t=(0,r.MA)(e.theme,"spacing",8,"columnGap"),n=e=>({columnGap:(0,r._W)(t,e)});return(0,l.NI)(e,e.columnGap,n)}return null};C.propTypes={},C.filterProps=["columnGap"];const E=e=>{if(void 0!==e.rowGap&&null!==e.rowGap){const t=(0,r.MA)(e.theme,"spacing",8,"rowGap"),n=e=>({rowGap:(0,r._W)(t,e)});return(0,l.NI)(e,e.rowGap,n)}return null};function S(e,t){return"grey"===t?t:e}function N(e){return e<=1&&0!==e?100*e+"%":e}E.propTypes={},E.filterProps=["rowGap"],i(k,C,E,(0,a.Ay)({prop:"gridColumn"}),(0,a.Ay)({prop:"gridRow"}),(0,a.Ay)({prop:"gridAutoFlow"}),(0,a.Ay)({prop:"gridAutoColumns"}),(0,a.Ay)({prop:"gridAutoRows"}),(0,a.Ay)({prop:"gridTemplateColumns"}),(0,a.Ay)({prop:"gridTemplateRows"}),(0,a.Ay)({prop:"gridTemplateAreas"}),(0,a.Ay)({prop:"gridArea"})),i((0,a.Ay)({prop:"color",themeKey:"palette",transform:S}),(0,a.Ay)({prop:"bgcolor",cssProperty:"backgroundColor",themeKey:"palette",transform:S}),(0,a.Ay)({prop:"backgroundColor",themeKey:"palette",transform:S}));const B=(0,a.Ay)({prop:"width",transform:N}),L=e=>{if(void 0!==e.maxWidth&&null!==e.maxWidth){const t=t=>{var n,r;const a=(null==(n=e.theme)||null==(n=n.breakpoints)||null==(n=n.values)?void 0:n[t])||l.zu[t];return a?"px"!==(null==(r=e.theme)||null==(r=r.breakpoints)?void 0:r.unit)?{maxWidth:`${a}${e.theme.breakpoints.unit}`}:{maxWidth:a}:{maxWidth:N(t)}};return(0,l.NI)(e,e.maxWidth,t)}return null};L.filterProps=["maxWidth"];const _=(0,a.Ay)({prop:"minWidth",transform:N}),P=(0,a.Ay)({prop:"height",transform:N}),M=(0,a.Ay)({prop:"maxHeight",transform:N}),O=(0,a.Ay)({prop:"minHeight",transform:N}),T=((0,a.Ay)({prop:"size",cssProperty:"width",transform:N}),(0,a.Ay)({prop:"size",cssProperty:"height",transform:N}),i(B,L,_,P,M,O,(0,a.Ay)({prop:"boxSizing"})),{border:{themeKey:"borders",transform:c},borderTop:{themeKey:"borders",transform:c},borderRight:{themeKey:"borders",transform:c},borderBottom:{themeKey:"borders",transform:c},borderLeft:{themeKey:"borders",transform:c},borderColor:{themeKey:"palette"},borderTopColor:{themeKey:"palette"},borderRightColor:{themeKey:"palette"},borderBottomColor:{themeKey:"palette"},borderLeftColor:{themeKey:"palette"},outline:{themeKey:"borders",transform:c},outlineColor:{themeKey:"palette"},borderRadius:{themeKey:"shape.borderRadius",style:x},color:{themeKey:"palette",transform:S},bgcolor:{themeKey:"palette",cssProperty:"backgroundColor",transform:S},backgroundColor:{themeKey:"palette",transform:S},p:{style:r.Ms},pt:{style:r.Ms},pr:{style:r.Ms},pb:{style:r.Ms},pl:{style:r.Ms},px:{style:r.Ms},py:{style:r.Ms},padding:{style:r.Ms},paddingTop:{style:r.Ms},paddingRight:{style:r.Ms},paddingBottom:{style:r.Ms},paddingLeft:{style:r.Ms},paddingX:{style:r.Ms},paddingY:{style:r.Ms},paddingInline:{style:r.Ms},paddingInlineStart:{style:r.Ms},paddingInlineEnd:{style:r.Ms},paddingBlock:{style:r.Ms},paddingBlockStart:{style:r.Ms},paddingBlockEnd:{style:r.Ms},m:{style:r.Lc},mt:{style:r.Lc},mr:{style:r.Lc},mb:{style:r.Lc},ml:{style:r.Lc},mx:{style:r.Lc},my:{style:r.Lc},margin:{style:r.Lc},marginTop:{style:r.Lc},marginRight:{style:r.Lc},marginBottom:{style:r.Lc},marginLeft:{style:r.Lc},marginX:{style:r.Lc},marginY:{style:r.Lc},marginInline:{style:r.Lc},marginInlineStart:{style:r.Lc},marginInlineEnd:{style:r.Lc},marginBlock:{style:r.Lc},marginBlockStart:{style:r.Lc},marginBlockEnd:{style:r.Lc},displayPrint:{cssProperty:!1,transform:e=>({"@media print":{display:e}})},display:{},overflow:{},textOverflow:{},visibility:{},whiteSpace:{},flexBasis:{},flexDirection:{},flexWrap:{},justifyContent:{},alignItems:{},alignContent:{},order:{},flex:{},flexGrow:{},flexShrink:{},alignSelf:{},justifyItems:{},justifySelf:{},gap:{style:k},rowGap:{style:E},columnGap:{style:C},gridColumn:{},gridRow:{},gridAutoFlow:{},gridAutoColumns:{},gridAutoRows:{},gridTemplateColumns:{},gridTemplateRows:{},gridTemplateAreas:{},gridArea:{},position:{},zIndex:{themeKey:"zIndex"},top:{},right:{},bottom:{},left:{},boxShadow:{themeKey:"shadows"},width:{transform:N},maxWidth:{style:L},minWidth:{transform:N},height:{transform:N},maxHeight:{transform:N},minHeight:{transform:N},boxSizing:{},fontFamily:{themeKey:"typography"},fontSize:{themeKey:"typography"},fontStyle:{themeKey:"typography"},fontWeight:{themeKey:"typography"},letterSpacing:{},textTransform:{},lineHeight:{},textAlign:{},typography:{cssProperty:!1,themeKey:"typography"}})},4239:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r.A,isPlainObject:()=>r.Q});var r=n(1317)},4405:(e,t)=>{"use strict";Symbol.for("react.transitional.element"),Symbol.for("react.portal"),Symbol.for("react.fragment"),Symbol.for("react.strict_mode"),Symbol.for("react.profiler");Symbol.for("react.provider");Symbol.for("react.consumer"),Symbol.for("react.context");var n=Symbol.for("react.forward_ref"),r=(Symbol.for("react.suspense"),Symbol.for("react.suspense_list"),Symbol.for("react.memo"));Symbol.for("react.lazy"),Symbol.for("react.offscreen"),Symbol.for("react.client.reference");t.vM=n,t.lD=r},4417:e=>{"use strict";e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},4620:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var r=n(1317);const a=function(e,t){return t?(0,r.A)(e,t,{clone:!1}):e}},4634:e=>{function t(){return e.exports=t=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},e.exports.__esModule=!0,e.exports.default=e.exports,t.apply(null,arguments)}e.exports=t,e.exports.__esModule=!0,e.exports.default=e.exports},4684:(e,t,n)=>{"use strict";n.d(t,{C:()=>s,E:()=>g,T:()=>d,c:()=>m,h:()=>p,w:()=>u});var r=n(6540),a=n(5655),o=n(41),i=n(3174),l=n(1287),c=r.createContext("undefined"!=typeof HTMLElement?(0,a.A)({key:"css"}):null),s=c.Provider,u=function(e){return(0,r.forwardRef)((function(t,n){var a=(0,r.useContext)(c);return e(t,a,n)}))},d=r.createContext({}),p={}.hasOwnProperty,f="__EMOTION_TYPE_PLEASE_DO_NOT_USE__",m=function(e,t){var n={};for(var r in t)p.call(t,r)&&(n[r]=t[r]);return n[f]=e,n},h=function(e){var t=e.cache,n=e.serialized,r=e.isStringTag;return(0,o.SF)(t,n,r),(0,l.s)((function(){return(0,o.sk)(t,n,r)})),null},g=u((function(e,t,n){var a=e.css;"string"==typeof a&&void 0!==t.registered[a]&&(a=t.registered[a]);var l=e[f],c=[a],s="";"string"==typeof e.className?s=(0,o.Rk)(t.registered,c,e.className):null!=e.className&&(s=e.className+" ");var u=(0,i.J)(c,void 0,r.useContext(d));s+=t.key+"-"+u.name;var m={};for(var g in e)p.call(e,g)&&"css"!==g&&g!==f&&(m[g]=e[g]);return m.className=s,n&&(m.ref=n),r.createElement(r.Fragment,null,r.createElement(h,{cache:t,serialized:u,isStringTag:"string"==typeof l}),r.createElement(l,m))}))},4848:(e,t,n)=>{"use strict";e.exports=n(1020)},4893:e=>{e.exports=function(e,t){if(null==e)return{};var n={};for(var r in e)if({}.hasOwnProperty.call(e,r)){if(-1!==t.indexOf(r))continue;n[r]=e[r]}return n},e.exports.__esModule=!0,e.exports.default=e.exports},4994:e=>{e.exports=function(e){return e&&e.__esModule?e:{default:e}},e.exports.__esModule=!0,e.exports.default=e.exports},5056:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},5072:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},i=[],l=0;l<e.length;l++){var c=e[l],s=r.base?c[0]+r.base:c[0],u=o[s]||0,d="".concat(s," ").concat(u);o[s]=u+1;var p=n(d),f={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)t[p].references++,t[p].updater(f);else{var m=a(f,r);r.byIndex=l,t.splice(l,0,{identifier:d,updater:m,references:1})}i.push(d)}return i}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var l=n(o[i]);t[l].references--}for(var c=r(e,a),s=0;s<o.length;s++){var u=n(o[s]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}o=c}}},5287:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),c=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),u=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),p=Symbol.for("react.lazy"),f=Symbol.iterator,m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h=Object.assign,g={};function v(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||m}function y(){}function b(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||m}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=v.prototype;var A=b.prototype=new y;A.constructor=b,h(A,v.prototype),A.isPureReactComponent=!0;var w=Array.isArray,x=Object.prototype.hasOwnProperty,k={current:null},C={key:!0,ref:!0,__self:!0,__source:!0};function E(e,t,r){var a,o={},i=null,l=null;if(null!=t)for(a in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)x.call(t,a)&&!C.hasOwnProperty(a)&&(o[a]=t[a]);var c=arguments.length-2;if(1===c)o.children=r;else if(1<c){for(var s=Array(c),u=0;u<c;u++)s[u]=arguments[u+2];o.children=s}if(e&&e.defaultProps)for(a in c=e.defaultProps)void 0===o[a]&&(o[a]=c[a]);return{$$typeof:n,type:e,key:i,ref:l,props:o,_owner:k.current}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var N=/\/+/g;function B(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function L(e,t,a,o,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var c=!1;if(null===e)c=!0;else switch(l){case"string":case"number":c=!0;break;case"object":switch(e.$$typeof){case n:case r:c=!0}}if(c)return i=i(c=e),e=""===o?"."+B(c,0):o,w(i)?(a="",null!=e&&(a=e.replace(N,"$&/")+"/"),L(i,t,a,"",(function(e){return e}))):null!=i&&(S(i)&&(i=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,a+(!i.key||c&&c.key===i.key?"":(""+i.key).replace(N,"$&/")+"/")+e)),t.push(i)),1;if(c=0,o=""===o?".":o+":",w(e))for(var s=0;s<e.length;s++){var u=o+B(l=e[s],s);c+=L(l,t,a,u,i)}else if(u=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=f&&e[f]||e["@@iterator"])?e:null}(e),"function"==typeof u)for(e=u.call(e),s=0;!(l=e.next()).done;)c+=L(l=l.value,t,a,u=o+B(l,s++),i);else if("object"===l)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return c}function _(e,t,n){if(null==e)return e;var r=[],a=0;return L(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function P(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var M={current:null},O={transition:null},T={ReactCurrentDispatcher:M,ReactCurrentBatchConfig:O,ReactCurrentOwner:k};function F(){throw Error("act(...) is not supported in production builds of React.")}t.Children={map:_,forEach:function(e,t,n){_(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return _(e,(function(){t++})),t},toArray:function(e){return _(e,(function(e){return e}))||[]},only:function(e){if(!S(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=v,t.Fragment=a,t.Profiler=i,t.PureComponent=b,t.StrictMode=o,t.Suspense=u,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=T,t.act=F,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var a=h({},e.props),o=e.key,i=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,l=k.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(s in t)x.call(t,s)&&!C.hasOwnProperty(s)&&(a[s]=void 0===t[s]&&void 0!==c?c[s]:t[s])}var s=arguments.length-2;if(1===s)a.children=r;else if(1<s){c=Array(s);for(var u=0;u<s;u++)c[u]=arguments[u+2];a.children=c}return{$$typeof:n,type:e.type,key:o,ref:i,props:a,_owner:l}},t.createContext=function(e){return(e={$$typeof:c,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=E,t.createFactory=function(e){var t=E.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:p,_payload:{_status:-1,_result:e},_init:P}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=O.transition;O.transition={};try{e()}finally{O.transition=t}},t.unstable_act=F,t.useCallback=function(e,t){return M.current.useCallback(e,t)},t.useContext=function(e){return M.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return M.current.useDeferredValue(e)},t.useEffect=function(e,t){return M.current.useEffect(e,t)},t.useId=function(){return M.current.useId()},t.useImperativeHandle=function(e,t,n){return M.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return M.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return M.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return M.current.useMemo(e,t)},t.useReducer=function(e,t,n){return M.current.useReducer(e,t,n)},t.useRef=function(e){return M.current.useRef(e)},t.useState=function(e){return M.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return M.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return M.current.useTransition()},t.version="18.3.1"},5338:(e,t,n)=>{"use strict";var r=n(961);t.createRoot=r.createRoot,t.hydrateRoot=r.hydrateRoot},5655:(e,t,n)=>{"use strict";n.d(t,{A:()=>re});var r=function(){function e(e){var t=this;this._insertTag=function(e){var n;n=0===t.tags.length?t.insertionPoint?t.insertionPoint.nextSibling:t.prepend?t.container.firstChild:t.before:t.tags[t.tags.length-1].nextSibling,t.container.insertBefore(e,n),t.tags.push(e)},this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.prepend=e.prepend,this.insertionPoint=e.insertionPoint,this.before=null}var t=e.prototype;return t.hydrate=function(e){e.forEach(this._insertTag)},t.insert=function(e){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}(this));var t=this.tags[this.tags.length-1];if(this.isSpeedy){var n=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(t);try{n.insertRule(e,n.cssRules.length)}catch(e){}}else t.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){var t;return null==(t=e.parentNode)?void 0:t.removeChild(e)})),this.tags=[],this.ctr=0},e}(),a=Math.abs,o=String.fromCharCode,i=Object.assign;function l(e){return e.trim()}function c(e,t,n){return e.replace(t,n)}function s(e,t){return e.indexOf(t)}function u(e,t){return 0|e.charCodeAt(t)}function d(e,t,n){return e.slice(t,n)}function p(e){return e.length}function f(e){return e.length}function m(e,t){return t.push(e),e}var h=1,g=1,v=0,y=0,b=0,A="";function w(e,t,n,r,a,o,i){return{value:e,root:t,parent:n,type:r,props:a,children:o,line:h,column:g,length:i,return:""}}function x(e,t){return i(w("",null,null,"",null,null,0),e,{length:-e.length},t)}function k(){return b=y>0?u(A,--y):0,g--,10===b&&(g=1,h--),b}function C(){return b=y<v?u(A,y++):0,g++,10===b&&(g=1,h++),b}function E(){return u(A,y)}function S(){return y}function N(e,t){return d(A,e,t)}function B(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function L(e){return h=g=1,v=p(A=e),y=0,[]}function _(e){return A="",e}function P(e){return l(N(y-1,T(91===e?e+2:40===e?e+1:e)))}function M(e){for(;(b=E())&&b<33;)C();return B(e)>2||B(b)>3?"":" "}function O(e,t){for(;--t&&C()&&!(b<48||b>102||b>57&&b<65||b>70&&b<97););return N(e,S()+(t<6&&32==E()&&32==C()))}function T(e){for(;C();)switch(b){case e:return y;case 34:case 39:34!==e&&39!==e&&T(b);break;case 40:41===e&&T(e);break;case 92:C()}return y}function F(e,t){for(;C()&&e+b!==57&&(e+b!==84||47!==E()););return"/*"+N(t,y-1)+"*"+o(47===e?e:C())}function D(e){for(;!B(E());)C();return N(e,y)}var j="-ms-",R="-moz-",I="-webkit-",z="comm",$="rule",G="decl",Y="@keyframes";function U(e,t){for(var n="",r=f(e),a=0;a<r;a++)n+=t(e[a],a,e,t)||"";return n}function W(e,t,n,r){switch(e.type){case"@layer":if(e.children.length)break;case"@import":case G:return e.return=e.return||e.value;case z:return"";case Y:return e.return=e.value+"{"+U(e.children,r)+"}";case $:e.value=e.props.join(",")}return p(n=U(e.children,r))?e.return=e.value+"{"+n+"}":""}function H(e){return _(q("",null,null,null,[""],e=L(e),0,[0],e))}function q(e,t,n,r,a,i,l,d,f){for(var h=0,g=0,v=l,y=0,b=0,A=0,w=1,x=1,N=1,B=0,L="",_=a,T=i,j=r,R=L;x;)switch(A=B,B=C()){case 40:if(108!=A&&58==u(R,v-1)){-1!=s(R+=c(P(B),"&","&\f"),"&\f")&&(N=-1);break}case 34:case 39:case 91:R+=P(B);break;case 9:case 10:case 13:case 32:R+=M(A);break;case 92:R+=O(S()-1,7);continue;case 47:switch(E()){case 42:case 47:m(Q(F(C(),S()),t,n),f);break;default:R+="/"}break;case 123*w:d[h++]=p(R)*N;case 125*w:case 59:case 0:switch(B){case 0:case 125:x=0;case 59+g:-1==N&&(R=c(R,/\f/g,"")),b>0&&p(R)-v&&m(b>32?K(R+";",r,n,v-1):K(c(R," ","")+";",r,n,v-2),f);break;case 59:R+=";";default:if(m(j=V(R,t,n,h,g,a,d,L,_=[],T=[],v),i),123===B)if(0===g)q(R,t,j,j,_,i,v,d,T);else switch(99===y&&110===u(R,3)?100:y){case 100:case 108:case 109:case 115:q(e,j,j,r&&m(V(e,j,j,0,0,a,d,L,a,_=[],v),T),a,T,v,d,r?_:T);break;default:q(R,j,j,j,[""],T,0,d,T)}}h=g=b=0,w=N=1,L=R="",v=l;break;case 58:v=1+p(R),b=A;default:if(w<1)if(123==B)--w;else if(125==B&&0==w++&&125==k())continue;switch(R+=o(B),B*w){case 38:N=g>0?1:(R+="\f",-1);break;case 44:d[h++]=(p(R)-1)*N,N=1;break;case 64:45===E()&&(R+=P(C())),y=E(),g=v=p(L=R+=D(S())),B++;break;case 45:45===A&&2==p(R)&&(w=0)}}return i}function V(e,t,n,r,o,i,s,u,p,m,h){for(var g=o-1,v=0===o?i:[""],y=f(v),b=0,A=0,x=0;b<r;++b)for(var k=0,C=d(e,g+1,g=a(A=s[b])),E=e;k<y;++k)(E=l(A>0?v[k]+" "+C:c(C,/&\f/g,v[k])))&&(p[x++]=E);return w(e,t,n,0===o?$:u,p,m,h)}function Q(e,t,n){return w(e,t,n,z,o(b),d(e,2,-2),0)}function K(e,t,n,r){return w(e,t,n,G,d(e,0,r),d(e,r+1,-1),r)}var Z=function(e,t,n){for(var r=0,a=0;r=a,a=E(),38===r&&12===a&&(t[n]=1),!B(a);)C();return N(e,y)},X=new WeakMap,J=function(e){if("rule"===e.type&&e.parent&&!(e.length<1)){for(var t=e.value,n=e.parent,r=e.column===n.column&&e.line===n.line;"rule"!==n.type;)if(!(n=n.parent))return;if((1!==e.props.length||58===t.charCodeAt(0)||X.get(n))&&!r){X.set(e,!0);for(var a=[],i=function(e,t){return _(function(e,t){var n=-1,r=44;do{switch(B(r)){case 0:38===r&&12===E()&&(t[n]=1),e[n]+=Z(y-1,t,n);break;case 2:e[n]+=P(r);break;case 4:if(44===r){e[++n]=58===E()?"&\f":"",t[n]=e[n].length;break}default:e[n]+=o(r)}}while(r=C());return e}(L(e),t))}(t,a),l=n.props,c=0,s=0;c<i.length;c++)for(var u=0;u<l.length;u++,s++)e.props[s]=a[c]?i[c].replace(/&\f/g,l[u]):l[u]+" "+i[c]}}},ee=function(e){if("decl"===e.type){var t=e.value;108===t.charCodeAt(0)&&98===t.charCodeAt(2)&&(e.return="",e.value="")}};function te(e,t){switch(function(e,t){return 45^u(e,0)?(((t<<2^u(e,0))<<2^u(e,1))<<2^u(e,2))<<2^u(e,3):0}(e,t)){case 5103:return I+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return I+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return I+e+R+e+j+e+e;case 6828:case 4268:return I+e+j+e+e;case 6165:return I+e+j+"flex-"+e+e;case 5187:return I+e+c(e,/(\w+).+(:[^]+)/,I+"box-$1$2"+j+"flex-$1$2")+e;case 5443:return I+e+j+"flex-item-"+c(e,/flex-|-self/,"")+e;case 4675:return I+e+j+"flex-line-pack"+c(e,/align-content|flex-|-self/,"")+e;case 5548:return I+e+j+c(e,"shrink","negative")+e;case 5292:return I+e+j+c(e,"basis","preferred-size")+e;case 6060:return I+"box-"+c(e,"-grow","")+I+e+j+c(e,"grow","positive")+e;case 4554:return I+c(e,/([^-])(transform)/g,"$1"+I+"$2")+e;case 6187:return c(c(c(e,/(zoom-|grab)/,I+"$1"),/(image-set)/,I+"$1"),e,"")+e;case 5495:case 3959:return c(e,/(image-set\([^]*)/,I+"$1$`$1");case 4968:return c(c(e,/(.+:)(flex-)?(.*)/,I+"box-pack:$3"+j+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+I+e+e;case 4095:case 3583:case 4068:case 2532:return c(e,/(.+)-inline(.+)/,I+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(p(e)-1-t>6)switch(u(e,t+1)){case 109:if(45!==u(e,t+4))break;case 102:return c(e,/(.+:)(.+)-([^]+)/,"$1"+I+"$2-$3$1"+R+(108==u(e,t+3)?"$3":"$2-$3"))+e;case 115:return~s(e,"stretch")?te(c(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(115!==u(e,t+1))break;case 6444:switch(u(e,p(e)-3-(~s(e,"!important")&&10))){case 107:return c(e,":",":"+I)+e;case 101:return c(e,/(.+:)([^;!]+)(;|!.+)?/,"$1"+I+(45===u(e,14)?"inline-":"")+"box$3$1"+I+"$2$3$1"+j+"$2box$3")+e}break;case 5936:switch(u(e,t+11)){case 114:return I+e+j+c(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return I+e+j+c(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return I+e+j+c(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return I+e+j+e+e}return e}var ne=[function(e,t,n,r){if(e.length>-1&&!e.return)switch(e.type){case G:e.return=te(e.value,e.length);break;case Y:return U([x(e,{value:c(e.value,"@","@"+I)})],r);case $:if(e.length)return function(e,t){return e.map(t).join("")}(e.props,(function(t){switch(function(e){return(e=/(::plac\w+|:read-\w+)/.exec(e))?e[0]:e}(t)){case":read-only":case":read-write":return U([x(e,{props:[c(t,/:(read-\w+)/,":-moz-$1")]})],r);case"::placeholder":return U([x(e,{props:[c(t,/:(plac\w+)/,":"+I+"input-$1")]}),x(e,{props:[c(t,/:(plac\w+)/,":-moz-$1")]}),x(e,{props:[c(t,/:(plac\w+)/,j+"input-$1")]})],r)}return""}))}}],re=function(e){var t=e.key;if("css"===t){var n=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(n,(function(e){-1!==e.getAttribute("data-emotion").indexOf(" ")&&(document.head.appendChild(e),e.setAttribute("data-s",""))}))}var a,o,i=e.stylisPlugins||ne,l={},c=[];a=e.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+t+' "]'),(function(e){for(var t=e.getAttribute("data-emotion").split(" "),n=1;n<t.length;n++)l[t[n]]=!0;c.push(e)}));var s,u,d,p,m=[W,(p=function(e){s.insert(e)},function(e){e.root||(e=e.return)&&p(e)})],h=(u=[J,ee].concat(i,m),d=f(u),function(e,t,n,r){for(var a="",o=0;o<d;o++)a+=u[o](e,t,n,r)||"";return a});o=function(e,t,n,r){s=n,U(H(e?e+"{"+t.styles+"}":t.styles),h),r&&(g.inserted[t.name]=!0)};var g={key:t,sheet:new r({key:t,container:a,nonce:e.nonce,speedy:e.speedy,prepend:e.prepend,insertionPoint:e.insertionPoint}),nonce:e.nonce,inserted:l,registered:{},insert:o};return g.sheet.hydrate(c),g}},5807:(e,t,n)=>{"use strict";n.d(t,{A:()=>l});var r=n(1354),a=n.n(r),o=n(6314),i=n.n(o)()(a());i.push([e.id,".react-slideshow-container{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;position:relative}.react-slideshow-container .nav{z-index:10;position:absolute;cursor:pointer}.react-slideshow-container .nav:first-of-type{left:0}.react-slideshow-container .nav:last-of-type{right:0}.react-slideshow-container .default-nav{height:30px;background:rgba(255,255,255,0.6);width:30px;border:0;text-align:center;color:#fff;border-radius:50%;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}.react-slideshow-container .default-nav:hover,.react-slideshow-container .default-nav:focus{background:#fff;color:#666;outline:0}.react-slideshow-container .default-nav.disabled:hover{cursor:not-allowed}.react-slideshow-container .default-nav:first-of-type{margin-right:-30px;border-right:0;border-top:0}.react-slideshow-container .default-nav:last-of-type{margin-left:-30px}.react-slideshow-container+ul.indicators{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;margin-top:20px}.react-slideshow-container+ul.indicators li{display:inline-block;position:relative;width:7px;height:7px;padding:5px;margin:0}.react-slideshow-container+ul.indicators .each-slideshow-indicator{border:0;opacity:.25;cursor:pointer;background:transparent;color:transparent}.react-slideshow-container+ul.indicators .each-slideshow-indicator:before{position:absolute;top:0;left:0;width:7px;height:7px;border-radius:50%;content:'';background:#000;text-align:center}.react-slideshow-container+ul.indicators .each-slideshow-indicator:hover,.react-slideshow-container+ul.indicators .each-slideshow-indicator.active{opacity:.75;outline:0}.react-slideshow-fadezoom-wrapper{width:100%;overflow:hidden}.react-slideshow-fadezoom-wrapper .react-slideshow-fadezoom-images-wrap{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap}.react-slideshow-fadezoom-wrapper .react-slideshow-fadezoom-images-wrap>div{position:relative;opacity:0}.react-slideshow-wrapper .react-slideshow-fade-images-wrap>div[aria-hidden='true']{display:none}.react-slideshow-wrapper.slide{width:100%;overflow:hidden}.react-slideshow-wrapper .images-wrap.horizontal{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;width:auto}.react-slideshow-wrapper .images-wrap>div[aria-hidden='true']{display:none}\n","",{version:3,sources:["webpack://./node_modules/react-slideshow-image/dist/styles.css"],names:[],mappings:"AAAA,2BAA2B,mBAAmB,CAAC,mBAAmB,CAAC,YAAY,CAAC,wBAAwB,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,gCAAgC,UAAU,CAAC,iBAAiB,CAAC,cAAc,CAAC,8CAA8C,MAAM,CAAC,6CAA6C,OAAO,CAAC,wCAAwC,WAAW,CAAC,gCAAgC,CAAC,UAAU,CAAC,QAAQ,CAAC,iBAAiB,CAAC,UAAU,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,YAAY,CAAC,wBAAwB,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,uBAAuB,CAAC,oBAAoB,CAAC,sBAAsB,CAAC,4FAA4F,eAAe,CAAC,UAAU,CAAC,SAAS,CAAC,uDAAuD,kBAAkB,CAAC,sDAAsD,kBAAkB,CAAC,cAAc,CAAC,YAAY,CAAC,qDAAqD,iBAAiB,CAAC,yCAAyC,mBAAmB,CAAC,mBAAmB,CAAC,YAAY,CAAC,kBAAkB,CAAC,cAAc,CAAC,uBAAuB,CAAC,oBAAoB,CAAC,sBAAsB,CAAC,eAAe,CAAC,4CAA4C,oBAAoB,CAAC,iBAAiB,CAAC,SAAS,CAAC,UAAU,CAAC,WAAW,CAAC,QAAQ,CAAC,mEAAmE,QAAQ,CAAC,WAAW,CAAC,cAAc,CAAC,sBAAsB,CAAC,iBAAiB,CAAC,0EAA0E,iBAAiB,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,iBAAiB,CAAC,UAAU,CAAC,eAAe,CAAC,iBAAiB,CAAC,mJAAmJ,WAAW,CAAC,SAAS,CAAC,kCAAkC,UAAU,CAAC,eAAe,CAAC,wEAAwE,mBAAmB,CAAC,mBAAmB,CAAC,YAAY,CAAC,kBAAkB,CAAC,cAAc,CAAC,4EAA4E,iBAAiB,CAAC,SAAS,CAAC,mFAAmF,YAAY,CAAC,+BAA+B,UAAU,CAAC,eAAe,CAAC,iDAAiD,mBAAmB,CAAC,mBAAmB,CAAC,YAAY,CAAC,kBAAkB,CAAC,cAAc,CAAC,UAAU,CAAC,8DAA8D,YAAY",sourcesContent:[".react-slideshow-container{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;position:relative}.react-slideshow-container .nav{z-index:10;position:absolute;cursor:pointer}.react-slideshow-container .nav:first-of-type{left:0}.react-slideshow-container .nav:last-of-type{right:0}.react-slideshow-container .default-nav{height:30px;background:rgba(255,255,255,0.6);width:30px;border:0;text-align:center;color:#fff;border-radius:50%;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}.react-slideshow-container .default-nav:hover,.react-slideshow-container .default-nav:focus{background:#fff;color:#666;outline:0}.react-slideshow-container .default-nav.disabled:hover{cursor:not-allowed}.react-slideshow-container .default-nav:first-of-type{margin-right:-30px;border-right:0;border-top:0}.react-slideshow-container .default-nav:last-of-type{margin-left:-30px}.react-slideshow-container+ul.indicators{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;margin-top:20px}.react-slideshow-container+ul.indicators li{display:inline-block;position:relative;width:7px;height:7px;padding:5px;margin:0}.react-slideshow-container+ul.indicators .each-slideshow-indicator{border:0;opacity:.25;cursor:pointer;background:transparent;color:transparent}.react-slideshow-container+ul.indicators .each-slideshow-indicator:before{position:absolute;top:0;left:0;width:7px;height:7px;border-radius:50%;content:'';background:#000;text-align:center}.react-slideshow-container+ul.indicators .each-slideshow-indicator:hover,.react-slideshow-container+ul.indicators .each-slideshow-indicator.active{opacity:.75;outline:0}.react-slideshow-fadezoom-wrapper{width:100%;overflow:hidden}.react-slideshow-fadezoom-wrapper .react-slideshow-fadezoom-images-wrap{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap}.react-slideshow-fadezoom-wrapper .react-slideshow-fadezoom-images-wrap>div{position:relative;opacity:0}.react-slideshow-wrapper .react-slideshow-fade-images-wrap>div[aria-hidden='true']{display:none}.react-slideshow-wrapper.slide{width:100%;overflow:hidden}.react-slideshow-wrapper .images-wrap.horizontal{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;width:auto}.react-slideshow-wrapper .images-wrap>div[aria-hidden='true']{display:none}\n"],sourceRoot:""}]);const l=i},6289:(e,t,n)=>{"use strict";function r(e){var t=Object.create(null);return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}n.d(t,{A:()=>r})},6314:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var l=0;l<this.length;l++){var c=this[l][0];null!=c&&(i[c]=!0)}for(var s=0;s<e.length;s++){var u=[].concat(e[s]);r&&i[u[0]]||(void 0!==o&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=o),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),a&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=a):u[4]="".concat(a)),t.push(u))}},t}},6461:(e,t,n)=>{"use strict";var r=n(4994);t.Ay=function(e={}){const{themeId:t,defaultTheme:n=h,rootShouldForwardProp:r=m,slotShouldForwardProp:c=m}=e,u=e=>(0,s.default)((0,a.default)({},e,{theme:v((0,a.default)({},e,{defaultTheme:n,themeId:t}))}));return u.__mui_systemSx=!0,(e,s={})=>{(0,i.internal_processStyles)(e,(e=>e.filter((e=>!(null!=e&&e.__mui_systemSx)))));const{name:d,slot:f,skipVariantsResolver:h,skipSx:A,overridesResolver:w=y(g(f))}=s,x=(0,o.default)(s,p),k=void 0!==h?h:f&&"Root"!==f&&"root"!==f||!1,C=A||!1;let E=m;"Root"===f||"root"===f?E=r:f?E=c:function(e){return"string"==typeof e&&e.charCodeAt(0)>96}(e)&&(E=void 0);const S=(0,i.default)(e,(0,a.default)({shouldForwardProp:E,label:void 0},x)),N=e=>"function"==typeof e&&e.__emotion_real!==e||(0,l.isPlainObject)(e)?r=>b(e,(0,a.default)({},r,{theme:v({theme:r.theme,defaultTheme:n,themeId:t})})):e,B=(r,...o)=>{let i=N(r);const l=o?o.map(N):[];d&&w&&l.push((e=>{const r=v((0,a.default)({},e,{defaultTheme:n,themeId:t}));if(!r.components||!r.components[d]||!r.components[d].styleOverrides)return null;const o=r.components[d].styleOverrides,i={};return Object.entries(o).forEach((([t,n])=>{i[t]=b(n,(0,a.default)({},e,{theme:r}))})),w(e,i)})),d&&!k&&l.push((e=>{var r;const o=v((0,a.default)({},e,{defaultTheme:n,themeId:t}));return b({variants:null==o||null==(r=o.components)||null==(r=r[d])?void 0:r.variants},(0,a.default)({},e,{theme:o}))})),C||l.push(u);const c=l.length-o.length;if(Array.isArray(r)&&c>0){const e=new Array(c).fill("");i=[...r,...e],i.raw=[...r.raw,...e]}const s=S(i,...l);return e.muiName&&(s.muiName=e.muiName),s};return S.withConfig&&(B.withConfig=S.withConfig),B}};var a=r(n(4634)),o=r(n(4893)),i=function(e,t){if(e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var n=f(t);if(n&&n.has(e))return n.get(e);var r={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if("default"!==o&&Object.prototype.hasOwnProperty.call(e,o)){var i=a?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(r,o,i):r[o]=e[o]}return r.default=e,n&&n.set(e,r),r}(n(2532)),l=n(4239),c=(r(n(7149)),r(n(7320)),r(n(3142))),s=r(n(3857));const u=["ownerState"],d=["variants"],p=["name","slot","skipVariantsResolver","skipSx","overridesResolver"];function f(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,n=new WeakMap;return(f=function(e){return e?n:t})(e)}function m(e){return"ownerState"!==e&&"theme"!==e&&"sx"!==e&&"as"!==e}const h=(0,c.default)(),g=e=>e?e.charAt(0).toLowerCase()+e.slice(1):e;function v({defaultTheme:e,theme:t,themeId:n}){return r=t,0===Object.keys(r).length?e:t[n]||t;var r}function y(e){return e?(t,n)=>n[e]:null}function b(e,t){let{ownerState:n}=t,r=(0,o.default)(t,u);const i="function"==typeof e?e((0,a.default)({ownerState:n},r)):e;if(Array.isArray(i))return i.flatMap((e=>b(e,(0,a.default)({ownerState:n},r))));if(i&&"object"==typeof i&&Array.isArray(i.variants)){const{variants:e=[]}=i;let t=(0,o.default)(i,d);return e.forEach((e=>{let o=!0;"function"==typeof e.props?o=e.props((0,a.default)({ownerState:n},r,n)):Object.keys(e.props).forEach((t=>{(null==n?void 0:n[t])!==e.props[t]&&r[t]!==e.props[t]&&(o=!1)})),o&&(Array.isArray(t)||(t=[t]),t.push("function"==typeof e.style?e.style((0,a.default)({ownerState:n},r,n)):e.style))})),t}return i}},6481:(e,t,n)=>{"use strict";n.d(t,{Ay:()=>l,BO:()=>i,Yn:()=>o});var r=n(3967),a=n(9452);function o(e,t,n=!0){if(!t||"string"!=typeof t)return null;if(e&&e.vars&&n){const n=`vars.${t}`.split(".").reduce(((e,t)=>e&&e[t]?e[t]:null),e);if(null!=n)return n}return t.split(".").reduce(((e,t)=>e&&null!=e[t]?e[t]:null),e)}function i(e,t,n,r=n){let a;return a="function"==typeof e?e(n):Array.isArray(e)?e[n]||r:o(e,n)||r,t&&(a=t(a,r,e)),a}const l=function(e){const{prop:t,cssProperty:n=e.prop,themeKey:l,transform:c}=e,s=e=>{if(null==e[t])return null;const s=e[t],u=o(e.theme,l)||{};return(0,a.NI)(e,s,(e=>{let a=i(u,c,e);return e===a&&"string"==typeof e&&(a=i(u,c,`${t}${"default"===e?"":(0,r.A)(e)}`,e)),!1===n?a:{[n]:a}}))};return s.propTypes={},s.filterProps=[t],s}},6540:(e,t,n)=>{"use strict";e.exports=n(5287)},7149:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r.A});var r=n(3967)},7320:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>c,getFunctionName:()=>o});var r=n(4405);const a=/^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;function o(e){const t=`${e}`.match(a);return t&&t[1]||""}function i(e,t=""){return e.displayName||e.name||o(e)||t}function l(e,t,n){const r=i(t);return e.displayName||(""!==r?`${n}(${r})`:n)}function c(e){if(null!=e){if("string"==typeof e)return e;if("function"==typeof e)return i(e,"Component");if("object"==typeof e)switch(e.$$typeof){case r.vM:return l(e,e.render,"ForwardRef");case r.lD:return l(e,e.type,"memo");default:return}}}},7335:(e,t,n)=>{"use strict";e.exports=n.p+"1db5694b7a2fc23ca86b.ttf"},7437:(e,t,n)=>{"use strict";n.d(t,{AH:()=>p,i7:()=>f,mL:()=>d});var r,a,o=n(4684),i=n(6540),l=n(41),c=n(1287),s=n(3174),u=(n(5655),n(4146),function(e,t){var n=arguments;if(null==t||!o.h.call(t,"css"))return i.createElement.apply(void 0,n);var r=n.length,a=new Array(r);a[0]=o.E,a[1]=(0,o.c)(e,t);for(var l=2;l<r;l++)a[l]=n[l];return i.createElement.apply(null,a)});r=u||(u={}),a||(a=r.JSX||(r.JSX={}));var d=(0,o.w)((function(e,t){var n=e.styles,r=(0,s.J)([n],void 0,i.useContext(o.T)),a=i.useRef();return(0,c.i)((function(){var e=t.key+"-global",n=new t.sheet.constructor({key:e,nonce:t.sheet.nonce,container:t.sheet.container,speedy:t.sheet.isSpeedy}),o=!1,i=document.querySelector('style[data-emotion="'+e+" "+r.name+'"]');return t.sheet.tags.length&&(n.before=t.sheet.tags[0]),null!==i&&(o=!0,i.setAttribute("data-emotion",e),n.hydrate([i])),a.current=[n,o],function(){n.flush()}}),[t]),(0,c.i)((function(){var e=a.current,n=e[0];if(e[1])e[1]=!1;else{if(void 0!==r.next&&(0,l.sk)(t,r.next,!0),n.tags.length){var o=n.tags[n.tags.length-1].nextElementSibling;n.before=o,n.flush()}t.insert("",r,n,!1)}}),[t,r.name]),null}));function p(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return(0,s.J)(t)}function f(){var e=p.apply(void 0,arguments),t="animation-"+e.name;return{name:t,styles:"@keyframes "+t+"{"+e.styles+"}",anim:1,toString:function(){return"_EMO_"+this.name+"_"+this.styles+"_EMO_"}}}},7463:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,a=e[r];if(!(0<o(a,t)))break e;e[r]=t,e[n]=a,n=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length,i=a>>>1;r<i;){var l=2*(r+1)-1,c=e[l],s=l+1,u=e[s];if(0>o(c,n))s<a&&0>o(u,c)?(e[r]=u,e[s]=n,r=s):(e[r]=c,e[l]=n,r=l);else{if(!(s<a&&0>o(u,n)))break e;e[r]=u,e[s]=n,r=s}}}return t}function o(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,c=l.now();t.unstable_now=function(){return l.now()-c}}var s=[],u=[],d=1,p=null,f=3,m=!1,h=!1,g=!1,v="function"==typeof setTimeout?setTimeout:null,y="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function A(e){for(var t=r(u);null!==t;){if(null===t.callback)a(u);else{if(!(t.startTime<=e))break;a(u),t.sortIndex=t.expirationTime,n(s,t)}t=r(u)}}function w(e){if(g=!1,A(e),!h)if(null!==r(s))h=!0,O(x);else{var t=r(u);null!==t&&T(w,t.startTime-e)}}function x(e,n){h=!1,g&&(g=!1,y(S),S=-1),m=!0;var o=f;try{for(A(n),p=r(s);null!==p&&(!(p.expirationTime>n)||e&&!L());){var i=p.callback;if("function"==typeof i){p.callback=null,f=p.priorityLevel;var l=i(p.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?p.callback=l:p===r(s)&&a(s),A(n)}else a(s);p=r(s)}if(null!==p)var c=!0;else{var d=r(u);null!==d&&T(w,d.startTime-n),c=!1}return c}finally{p=null,f=o,m=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var k,C=!1,E=null,S=-1,N=5,B=-1;function L(){return!(t.unstable_now()-B<N)}function _(){if(null!==E){var e=t.unstable_now();B=e;var n=!0;try{n=E(!0,e)}finally{n?k():(C=!1,E=null)}}else C=!1}if("function"==typeof b)k=function(){b(_)};else if("undefined"!=typeof MessageChannel){var P=new MessageChannel,M=P.port2;P.port1.onmessage=_,k=function(){M.postMessage(null)}}else k=function(){v(_,0)};function O(e){E=e,C||(C=!0,k())}function T(e,n){S=v((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){h||m||(h=!0,O(x))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):N=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return f},t.unstable_getFirstCallbackNode=function(){return r(s)},t.unstable_next=function(e){switch(f){case 1:case 2:case 3:var t=3;break;default:t=f}var n=f;f=t;try{return e()}finally{f=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=f;f=e;try{return t()}finally{f=n}},t.unstable_scheduleCallback=function(e,a,o){var i=t.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?i+o:i,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:d++,callback:a,priorityLevel:e,startTime:o,expirationTime:l=o+l,sortIndex:-1},o>i?(e.sortIndex=o,n(u,e),null===r(s)&&e===r(u)&&(g?(y(S),S=-1):g=!0,T(w,o-i))):(e.sortIndex=l,n(s,e),h||m||(h=!0,O(x))),e},t.unstable_shouldYield=L,t.unstable_wrapCallback=function(e){var t=f;return function(){var n=f;f=t;try{return e.apply(this,arguments)}finally{f=n}}}},7535:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});const r=function(e,t=Number.MIN_SAFE_INTEGER,n=Number.MAX_SAFE_INTEGER){return Math.max(t,Math.min(e,n))}},7659:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},7825:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},7961:(e,t,n)=>{"use strict";e.exports=n.p+"0faede6f7dfd6a69ef91.ttf"},8094:(e,t,n)=>{"use strict";n.d(t,{A:()=>l});var r=n(8587),a=n(8168);const o=["values","unit","step"],i=e=>{const t=Object.keys(e).map((t=>({key:t,val:e[t]})))||[];return t.sort(((e,t)=>e.val-t.val)),t.reduce(((e,t)=>(0,a.A)({},e,{[t.key]:t.val})),{})};function l(e){const{values:t={xs:0,sm:600,md:900,lg:1200,xl:1536},unit:n="px",step:l=5}=e,c=(0,r.A)(e,o),s=i(t),u=Object.keys(s);function d(e){return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n})`}function p(e){return`@media (max-width:${("number"==typeof t[e]?t[e]:e)-l/100}${n})`}function f(e,r){const a=u.indexOf(r);return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n}) and (max-width:${(-1!==a&&"number"==typeof t[u[a]]?t[u[a]]:r)-l/100}${n})`}return(0,a.A)({keys:u,values:s,up:d,down:p,between:f,only:function(e){return u.indexOf(e)+1<u.length?f(e,u[u.indexOf(e)+1]):d(e)},not:function(e){const t=u.indexOf(e);return 0===t?d(u[1]):t===u.length-1?p(u[t]):f(e,u[u.indexOf(e)+1]).replace("@media","@media not all and")},unit:n},c)}},8168:(e,t,n)=>{"use strict";function r(){return r=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},r.apply(null,arguments)}n.d(t,{A:()=>r})},8248:(e,t,n)=>{"use strict";n.d(t,{LX:()=>m,MA:()=>f,_W:()=>h,Lc:()=>v,Ms:()=>y});var r=n(9452),a=n(6481),o=n(4620);const i={m:"margin",p:"padding"},l={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},c={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},s=function(){const e={};return t=>(void 0===e[t]&&(e[t]=(e=>{if(e.length>2){if(!c[e])return[e];e=c[e]}const[t,n]=e.split(""),r=i[t],a=l[n]||"";return Array.isArray(a)?a.map((e=>r+e)):[r+a]})(t)),e[t])}(),u=["m","mt","mr","mb","ml","mx","my","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","marginInline","marginInlineStart","marginInlineEnd","marginBlock","marginBlockStart","marginBlockEnd"],d=["p","pt","pr","pb","pl","px","py","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY","paddingInline","paddingInlineStart","paddingInlineEnd","paddingBlock","paddingBlockStart","paddingBlockEnd"],p=[...u,...d];function f(e,t,n,r){var o;const i=null!=(o=(0,a.Yn)(e,t,!1))?o:n;return"number"==typeof i?e=>"string"==typeof e?e:i*e:Array.isArray(i)?e=>"string"==typeof e?e:i[e]:"function"==typeof i?i:()=>{}}function m(e){return f(e,"spacing",8)}function h(e,t){if("string"==typeof t||null==t)return t;const n=e(Math.abs(t));return t>=0?n:"number"==typeof n?-n:`-${n}`}function g(e,t){const n=m(e.theme);return Object.keys(e).map((a=>function(e,t,n,a){if(-1===t.indexOf(n))return null;const o=function(e,t){return n=>e.reduce(((e,r)=>(e[r]=h(t,n),e)),{})}(s(n),a),i=e[n];return(0,r.NI)(e,i,o)}(e,t,a,n))).reduce(o.A,{})}function v(e){return g(e,u)}function y(e){return g(e,d)}function b(e){return g(e,p)}v.propTypes={},v.filterProps=u,y.propTypes={},y.filterProps=d,b.propTypes={},b.filterProps=p},8336:(e,t,n)=>{"use strict";function r(e,t){const n=this;if(n.vars&&"function"==typeof n.getColorSchemeSelector){const r=n.getColorSchemeSelector(e).replace(/(\[[^\]]+\])/,"*:where($1)");return{[r]:t}}return n.palette.mode===e?t:{}}n.d(t,{A:()=>r})},8587:(e,t,n)=>{"use strict";function r(e,t){if(null==e)return{};var n={};for(var r in e)if({}.hasOwnProperty.call(e,r)){if(-1!==t.indexOf(r))continue;n[r]=e[r]}return n}n.d(t,{A:()=>r})},8749:(e,t,n)=>{"use strict";n.d(t,{A:()=>f});var r=n(8168),a=n(8587),o=n(1317),i=n(8094);const l={borderRadius:4};var c=n(8248),s=n(3571),u=n(4188),d=n(8336);const p=["breakpoints","palette","spacing","shape"],f=function(e={},...t){const{breakpoints:n={},palette:f={},spacing:m,shape:h={}}=e,g=(0,a.A)(e,p),v=(0,i.A)(n),y=function(e=8){if(e.mui)return e;const t=(0,c.LX)({spacing:e}),n=(...e)=>(0===e.length?[1]:e).map((e=>{const n=t(e);return"number"==typeof n?`${n}px`:n})).join(" ");return n.mui=!0,n}(m);let b=(0,o.A)({breakpoints:v,direction:"ltr",components:{},palette:(0,r.A)({mode:"light"},f),spacing:y,shape:(0,r.A)({},l,h)},g);return b.applyStyles=d.A,b=t.reduce(((e,t)=>(0,o.A)(e,t)),b),b.unstable_sxConfig=(0,r.A)({},u.A,null==g?void 0:g.unstable_sxConfig),b.unstable_sx=function(e){return(0,s.A)({sx:e,theme:this})},b}},8944:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r.A});var r=n(9453)},9452:(e,t,n)=>{"use strict";n.d(t,{EU:()=>i,NI:()=>o,vf:()=>l,zu:()=>r});const r={xs:0,sm:600,md:900,lg:1200,xl:1536},a={keys:["xs","sm","md","lg","xl"],up:e=>`@media (min-width:${r[e]}px)`};function o(e,t,n){const o=e.theme||{};if(Array.isArray(t)){const e=o.breakpoints||a;return t.reduce(((r,a,o)=>(r[e.up(e.keys[o])]=n(t[o]),r)),{})}if("object"==typeof t){const e=o.breakpoints||a;return Object.keys(t).reduce(((a,o)=>{if(-1!==Object.keys(e.values||r).indexOf(o))a[e.up(o)]=n(t[o],o);else{const e=o;a[e]=t[e]}return a}),{})}return n(t)}function i(e={}){var t;return(null==(t=e.keys)?void 0:t.reduce(((t,n)=>(t[e.up(n)]={},t)),{}))||{}}function l(e,t){return e.reduce(((e,t)=>{const n=e[t];return(!n||0===Object.keys(n).length)&&delete e[t],e}),t)}},9453:(e,t,n)=>{"use strict";function r(e){let t="https://mui.com/production-error/?code="+e;for(let e=1;e<arguments.length;e+=1)t+="&args[]="+encodeURIComponent(arguments[e]);return"Minified MUI error #"+e+"; visit "+t+" for the full message."}n.d(t,{A:()=>r})},9599:(e,t,n)=>{"use strict";n.d(t,{A:()=>s});var r=n(8168),a=n(8587),o=n(1317),i=n(4188);const l=["sx"],c=e=>{var t,n;const r={systemProps:{},otherProps:{}},a=null!=(t=null==e||null==(n=e.theme)?void 0:n.unstable_sxConfig)?t:i.A;return Object.keys(e).forEach((t=>{a[t]?r.systemProps[t]=e[t]:r.otherProps[t]=e[t]})),r};function s(e){const{sx:t}=e,n=(0,a.A)(e,l),{systemProps:i,otherProps:s}=c(n);let u;return u=Array.isArray(t)?[i,...t]:"function"==typeof t?(...e)=>{const n=t(...e);return(0,o.Q)(n)?(0,r.A)({},i,n):i}:(0,r.A)({},i,t),(0,r.A)({},s,{sx:u})}},9940:(e,t,n)=>{"use strict";n.d(t,{A:()=>o}),n(6540);var r=n(7437),a=n(4848);function o(e){const{styles:t,defaultTheme:n={}}=e,o="function"==typeof t?e=>{return t(null==(r=e)||0===Object.keys(r).length?n:e);var r}:t;return(0,a.jsx)(r.mL,{styles:o})}},9982:(e,t,n)=>{"use strict";e.exports=n(7463)},9995:(e,t,n)=>{"use strict";e.exports=n.p+"6f5a7d209753528d9c41.ttf"}},r={};function a(e){var t=r[e];if(void 0!==t)return t.exports;var o=r[e]={id:e,exports:{}};return n[e](o,o.exports,a),o.exports}a.m=n,a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,a.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var o=Object.create(null);a.r(o);var i={};e=e||[null,t({}),t([]),t(t)];for(var l=2&r&&n;"object"==typeof l&&!~e.indexOf(l);l=t(l))Object.getOwnPropertyNames(l).forEach((e=>i[e]=()=>n[e]));return i.default=()=>n,a.d(o,i),o},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;a.g.importScripts&&(e=a.g.location+"");var t=a.g.document;if(!e&&t&&(t.currentScript&&"SCRIPT"===t.currentScript.tagName.toUpperCase()&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var r=n.length-1;r>-1&&(!e||!/^http(s?):/.test(e));)e=n[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),a.p=e})(),a.b=document.baseURI||self.location.href,a.nc=void 0,(()=>{"use strict";var e={};a.r(e),a.d(e,{hasBrowserEnv:()=>Kt,hasStandardBrowserEnv:()=>Xt,hasStandardBrowserWebWorkerEnv:()=>Jt,navigator:()=>Zt,origin:()=>en});var t=a(6540),n=a.t(t,2),r=a(5338),o=a(5072),i=a.n(o),l=a(7825),c=a.n(l),s=a(7659),u=a.n(s),d=a(5056),p=a.n(d),f=a(540),m=a.n(f),h=a(1113),g=a.n(h),v=a(386),y={};y.styleTagTransform=g(),y.setAttributes=p(),y.insert=u().bind(null,"head"),y.domAPI=c(),y.insertStyleElement=m(),i()(v.A,y),v.A&&v.A.locals&&v.A.locals;var b,A,w=a(961),x=a.t(w,2);function k(){return k=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},k.apply(this,arguments)}(A=b||(b={})).Pop="POP",A.Push="PUSH",A.Replace="REPLACE";const C="popstate";function E(e,t){if(!1===e||null==e)throw new Error(t)}function S(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function N(e,t){return{usr:e.state,key:e.key,idx:t}}function B(e,t,n,r){return void 0===n&&(n=null),k({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?_(t):t,{state:n,key:t&&t.key||r||Math.random().toString(36).substr(2,8)})}function L(e){let{pathname:t="/",search:n="",hash:r=""}=e;return n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(t+="#"===r.charAt(0)?r:"#"+r),t}function _(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}var P,M;function O(e,t,n){return void 0===n&&(n="/"),function(e,t,n,r){let a=q(("string"==typeof t?_(t):t).pathname||"/",n);if(null==a)return null;let o=T(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(o);let i=null;for(let e=0;null==i&&e<o.length;++e){let t=H(a);i=U(o[e],t,r)}return i}(e,t,n,!1)}function T(e,t,n,r){void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r="");let a=(e,a,o)=>{let i={relativePath:void 0===o?e.path||"":o,caseSensitive:!0===e.caseSensitive,childrenIndex:a,route:e};i.relativePath.startsWith("/")&&(E(i.relativePath.startsWith(r),'Absolute route path "'+i.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),i.relativePath=i.relativePath.slice(r.length));let l=Z([r,i.relativePath]),c=n.concat(i);e.children&&e.children.length>0&&(E(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+l+'".'),T(e.children,t,c,l)),(null!=e.path||e.index)&&t.push({path:l,score:Y(l,e.index),routesMeta:c})};return e.forEach(((e,t)=>{var n;if(""!==e.path&&null!=(n=e.path)&&n.includes("?"))for(let n of F(e.path))a(e,t,n);else a(e,t)})),t}function F(e){let t=e.split("/");if(0===t.length)return[];let[n,...r]=t,a=n.endsWith("?"),o=n.replace(/\?$/,"");if(0===r.length)return a?[o,""]:[o];let i=F(r.join("/")),l=[];return l.push(...i.map((e=>""===e?o:[o,e].join("/")))),a&&l.push(...i),l.map((t=>e.startsWith("/")&&""===t?"/":t))}(M=P||(P={})).data="data",M.deferred="deferred",M.redirect="redirect",M.error="error",new Set(["lazy","caseSensitive","path","id","index","children"]);const D=/^:[\w-]+$/,j=3,R=2,I=1,z=10,$=-2,G=e=>"*"===e;function Y(e,t){let n=e.split("/"),r=n.length;return n.some(G)&&(r+=$),t&&(r+=R),n.filter((e=>!G(e))).reduce(((e,t)=>e+(D.test(t)?j:""===t?I:z)),r)}function U(e,t,n){void 0===n&&(n=!1);let{routesMeta:r}=e,a={},o="/",i=[];for(let e=0;e<r.length;++e){let l=r[e],c=e===r.length-1,s="/"===o?t:t.slice(o.length)||"/",u=W({path:l.relativePath,caseSensitive:l.caseSensitive,end:c},s),d=l.route;if(!u&&c&&n&&!r[r.length-1].route.index&&(u=W({path:l.relativePath,caseSensitive:l.caseSensitive,end:!1},s)),!u)return null;Object.assign(a,u.params),i.push({params:a,pathname:Z([o,u.pathname]),pathnameBase:X(Z([o,u.pathnameBase])),route:d}),"/"!==u.pathnameBase&&(o=Z([o,u.pathnameBase]))}return i}function W(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0),S("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],a="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:([\w-]+)(\?)?/g,((e,t,n)=>(r.push({paramName:t,isOptional:null!=n}),n?"/?([^\\/]+)?":"/([^\\/]+)")));return e.endsWith("*")?(r.push({paramName:"*"}),a+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?a+="\\/*$":""!==e&&"/"!==e&&(a+="(?:(?=\\/|$))"),[new RegExp(a,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),a=t.match(n);if(!a)return null;let o=a[0],i=o.replace(/(.)\/+$/,"$1"),l=a.slice(1);return{params:r.reduce(((e,t,n)=>{let{paramName:r,isOptional:a}=t;if("*"===r){let e=l[n]||"";i=o.slice(0,o.length-e.length).replace(/(.)\/+$/,"$1")}const c=l[n];return e[r]=a&&!c?void 0:(c||"").replace(/%2F/g,"/"),e}),{}),pathname:o,pathnameBase:i,pattern:e}}function H(e){try{return e.split("/").map((e=>decodeURIComponent(e).replace(/\//g,"%2F"))).join("/")}catch(t){return S(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function q(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function V(e,t,n,r){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function Q(e,t){let n=function(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}(e);return t?n.map(((e,t)=>t===n.length-1?e.pathname:e.pathnameBase)):n.map((e=>e.pathnameBase))}function K(e,t,n,r){let a;void 0===r&&(r=!1),"string"==typeof e?a=_(e):(a=k({},e),E(!a.pathname||!a.pathname.includes("?"),V("?","pathname","search",a)),E(!a.pathname||!a.pathname.includes("#"),V("#","pathname","hash",a)),E(!a.search||!a.search.includes("#"),V("#","search","hash",a)));let o,i=""===e||""===a.pathname,l=i?"/":a.pathname;if(null==l)o=n;else{let e=t.length-1;if(!r&&l.startsWith("..")){let t=l.split("/");for(;".."===t[0];)t.shift(),e-=1;a.pathname=t.join("/")}o=e>=0?t[e]:"/"}let c=function(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:a=""}="string"==typeof e?_(e):e,o=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:o,search:J(r),hash:ee(a)}}(a,o),s=l&&"/"!==l&&l.endsWith("/"),u=(i||"."===l)&&n.endsWith("/");return c.pathname.endsWith("/")||!s&&!u||(c.pathname+="/"),c}const Z=e=>e.join("/").replace(/\/\/+/g,"/"),X=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),J=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",ee=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";Error;const te=["post","put","patch","delete"],ne=(new Set(te),["get",...te]);function re(){return re=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},re.apply(this,arguments)}new Set(ne),new Set([301,302,303,307,308]),new Set([307,308]),Symbol("deferred");const ae=t.createContext(null),oe=t.createContext(null),ie=t.createContext(null),le=t.createContext(null),ce=t.createContext({outlet:null,matches:[],isDataRoute:!1}),se=t.createContext(null);function ue(){return null!=t.useContext(le)}function de(){return ue()||E(!1),t.useContext(le).location}function pe(e){t.useContext(ie).static||t.useLayoutEffect(e)}function fe(){let{isDataRoute:e}=t.useContext(ce);return e?function(){let{router:e}=function(){let e=t.useContext(ae);return e||E(!1),e}(we.UseNavigateStable),n=ke(xe.UseNavigateStable),r=t.useRef(!1);return pe((()=>{r.current=!0})),t.useCallback((function(t,a){void 0===a&&(a={}),r.current&&("number"==typeof t?e.navigate(t):e.navigate(t,re({fromRouteId:n},a)))}),[e,n])}():function(){ue()||E(!1);let e=t.useContext(ae),{basename:n,future:r,navigator:a}=t.useContext(ie),{matches:o}=t.useContext(ce),{pathname:i}=de(),l=JSON.stringify(Q(o,r.v7_relativeSplatPath)),c=t.useRef(!1);return pe((()=>{c.current=!0})),t.useCallback((function(t,r){if(void 0===r&&(r={}),!c.current)return;if("number"==typeof t)return void a.go(t);let o=K(t,JSON.parse(l),i,"path"===r.relative);null==e&&"/"!==n&&(o.pathname="/"===o.pathname?n:Z([n,o.pathname])),(r.replace?a.replace:a.push)(o,r.state,r)}),[n,a,l,i,e])}()}function me(){let{matches:e}=t.useContext(ce),n=e[e.length-1];return n?n.params:{}}function he(e,n){let{relative:r}=void 0===n?{}:n,{future:a}=t.useContext(ie),{matches:o}=t.useContext(ce),{pathname:i}=de(),l=JSON.stringify(Q(o,a.v7_relativeSplatPath));return t.useMemo((()=>K(e,JSON.parse(l),i,"path"===r)),[e,l,i,r])}function ge(e,n,r,a){ue()||E(!1);let{navigator:o,static:i}=t.useContext(ie),{matches:l}=t.useContext(ce),c=l[l.length-1],s=c?c.params:{},u=(c&&c.pathname,c?c.pathnameBase:"/");c&&c.route;let d,p=de();if(n){var f;let e="string"==typeof n?_(n):n;"/"===u||(null==(f=e.pathname)?void 0:f.startsWith(u))||E(!1),d=e}else d=p;let m=d.pathname||"/",h=m;if("/"!==u){let e=u.replace(/^\//,"").split("/");h="/"+m.replace(/^\//,"").split("/").slice(e.length).join("/")}let g=!i&&r&&r.matches&&r.matches.length>0?r.matches:O(e,{pathname:h}),v=function(e,n,r,a){var o;if(void 0===n&&(n=[]),void 0===r&&(r=null),void 0===a&&(a=null),null==e){var i;if(!r)return null;if(r.errors)e=r.matches;else{if(!(null!=(i=a)&&i.v7_partialHydration&&0===n.length&&!r.initialized&&r.matches.length>0))return null;e=r.matches}}let l=e,c=null==(o=r)?void 0:o.errors;if(null!=c){let e=l.findIndex((e=>e.route.id&&void 0!==(null==c?void 0:c[e.route.id])));e>=0||E(!1),l=l.slice(0,Math.min(l.length,e+1))}let s=!1,u=-1;if(r&&a&&a.v7_partialHydration)for(let e=0;e<l.length;e++){let t=l[e];if((t.route.HydrateFallback||t.route.hydrateFallbackElement)&&(u=e),t.route.id){let{loaderData:e,errors:n}=r,a=t.route.loader&&void 0===e[t.route.id]&&(!n||void 0===n[t.route.id]);if(t.route.lazy||a){s=!0,l=u>=0?l.slice(0,u+1):[l[0]];break}}}return l.reduceRight(((e,a,o)=>{let i,d=!1,p=null,f=null;var m;r&&(i=c&&a.route.id?c[a.route.id]:void 0,p=a.route.errorElement||ye,s&&(u<0&&0===o?(Ce[m="route-fallback"]||(Ce[m]=!0),d=!0,f=null):u===o&&(d=!0,f=a.route.hydrateFallbackElement||null)));let h=n.concat(l.slice(0,o+1)),g=()=>{let n;return n=i?p:d?f:a.route.Component?t.createElement(a.route.Component,null):a.route.element?a.route.element:e,t.createElement(Ae,{match:a,routeContext:{outlet:e,matches:h,isDataRoute:null!=r},children:n})};return r&&(a.route.ErrorBoundary||a.route.errorElement||0===o)?t.createElement(be,{location:r.location,revalidation:r.revalidation,component:p,error:i,children:g(),routeContext:{outlet:null,matches:h,isDataRoute:!0}}):g()}),null)}(g&&g.map((e=>Object.assign({},e,{params:Object.assign({},s,e.params),pathname:Z([u,o.encodeLocation?o.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?u:Z([u,o.encodeLocation?o.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),l,r,a);return n&&v?t.createElement(le.Provider,{value:{location:re({pathname:"/",search:"",hash:"",state:null,key:"default"},d),navigationType:b.Pop}},v):v}function ve(){let e=function(){var e;let n=t.useContext(se),r=function(){let e=t.useContext(oe);return e||E(!1),e}(xe.UseRouteError),a=ke(xe.UseRouteError);return void 0!==n?n:null==(e=r.errors)?void 0:e[a]}(),n=function(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),r=e instanceof Error?e.stack:null,a={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return t.createElement(t.Fragment,null,t.createElement("h2",null,"Unexpected Application Error!"),t.createElement("h3",{style:{fontStyle:"italic"}},n),r?t.createElement("pre",{style:a},r):null,null)}const ye=t.createElement(ve,null);class be extends t.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location||"idle"!==t.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:void 0!==e.error?e.error:t.error,location:t.location,revalidation:e.revalidation||t.revalidation}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return void 0!==this.state.error?t.createElement(ce.Provider,{value:this.props.routeContext},t.createElement(se.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function Ae(e){let{routeContext:n,match:r,children:a}=e,o=t.useContext(ae);return o&&o.static&&o.staticContext&&(r.route.errorElement||r.route.ErrorBoundary)&&(o.staticContext._deepestRenderedBoundaryId=r.route.id),t.createElement(ce.Provider,{value:n},a)}var we=function(e){return e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e}(we||{}),xe=function(e){return e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId",e}(xe||{});function ke(e){let n=function(){let e=t.useContext(ce);return e||E(!1),e}(),r=n.matches[n.matches.length-1];return r.route.id||E(!1),r.route.id}const Ce={};function Ee(e){E(!1)}function Se(e){let{basename:n="/",children:r=null,location:a,navigationType:o=b.Pop,navigator:i,static:l=!1,future:c}=e;ue()&&E(!1);let s=n.replace(/^\/*/,"/"),u=t.useMemo((()=>({basename:s,navigator:i,static:l,future:re({v7_relativeSplatPath:!1},c)})),[s,c,i,l]);"string"==typeof a&&(a=_(a));let{pathname:d="/",search:p="",hash:f="",state:m=null,key:h="default"}=a,g=t.useMemo((()=>{let e=q(d,s);return null==e?null:{location:{pathname:e,search:p,hash:f,state:m,key:h},navigationType:o}}),[s,d,p,f,m,h,o]);return null==g?null:t.createElement(ie.Provider,{value:u},t.createElement(le.Provider,{children:r,value:g}))}function Ne(e){let{children:t,location:n}=e;return ge(Be(t),n)}function Be(e,n){void 0===n&&(n=[]);let r=[];return t.Children.forEach(e,((e,a)=>{if(!t.isValidElement(e))return;let o=[...n,a];if(e.type===t.Fragment)return void r.push.apply(r,Be(e.props.children,o));e.type!==Ee&&E(!1),e.props.index&&e.props.children&&E(!1);let i={id:e.props.id||o.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,Component:e.props.Component,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,ErrorBoundary:e.props.ErrorBoundary,hasErrorBoundary:null!=e.props.ErrorBoundary||null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle,lazy:e.props.lazy};e.props.children&&(i.children=Be(e.props.children,o)),r.push(i)})),r}function Le(){return Le=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Le.apply(this,arguments)}function _e(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}n.startTransition,new Promise((()=>{})),t.Component,new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);const Pe=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset","viewTransition"],Me=["aria-current","caseSensitive","className","end","style","to","viewTransition","children"];try{window.__reactRouterVersion="6"}catch(e){}const Oe=t.createContext({isTransitioning:!1});new Map;const Te=n.startTransition;function Fe(e){let{basename:n,children:r,future:a,window:o}=e,i=t.useRef();var l;null==i.current&&(i.current=(void 0===(l={window:o,v5Compat:!0})&&(l={}),function(e,t,n,r){void 0===r&&(r={});let{window:a=document.defaultView,v5Compat:o=!1}=r,i=a.history,l=b.Pop,c=null,s=u();function u(){return(i.state||{idx:null}).idx}function d(){l=b.Pop;let e=u(),t=null==e?null:e-s;s=e,c&&c({action:l,location:f.location,delta:t})}function p(e){let t="null"!==a.location.origin?a.location.origin:a.location.href,n="string"==typeof e?e:L(e);return n=n.replace(/ $/,"%20"),E(t,"No window.location.(origin|href) available to create URL for href: "+n),new URL(n,t)}null==s&&(s=0,i.replaceState(k({},i.state,{idx:s}),""));let f={get action(){return l},get location(){return e(a,i)},listen(e){if(c)throw new Error("A history only accepts one active listener");return a.addEventListener(C,d),c=e,()=>{a.removeEventListener(C,d),c=null}},createHref:e=>t(a,e),createURL:p,encodeLocation(e){let t=p(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(e,t){l=b.Push;let r=B(f.location,e,t);n&&n(r,e),s=u()+1;let d=N(r,s),p=f.createHref(r);try{i.pushState(d,"",p)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;a.location.assign(p)}o&&c&&c({action:l,location:f.location,delta:1})},replace:function(e,t){l=b.Replace;let r=B(f.location,e,t);n&&n(r,e),s=u();let a=N(r,s),d=f.createHref(r);i.replaceState(a,"",d),o&&c&&c({action:l,location:f.location,delta:0})},go:e=>i.go(e)};return f}((function(e,t){let{pathname:n="/",search:r="",hash:a=""}=_(e.location.hash.substr(1));return n.startsWith("/")||n.startsWith(".")||(n="/"+n),B("",{pathname:n,search:r,hash:a},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){let n=e.document.querySelector("base"),r="";if(n&&n.getAttribute("href")){let t=e.location.href,n=t.indexOf("#");r=-1===n?t:t.slice(0,n)}return r+"#"+("string"==typeof t?t:L(t))}),(function(e,t){S("/"===e.pathname.charAt(0),"relative pathnames are not supported in hash history.push("+JSON.stringify(t)+")")}),l)));let c=i.current,[s,u]=t.useState({action:c.action,location:c.location}),{v7_startTransition:d}=a||{},p=t.useCallback((e=>{d&&Te?Te((()=>u(e))):u(e)}),[u,d]);return t.useLayoutEffect((()=>c.listen(p)),[c,p]),t.useEffect((()=>{return null==(e=a)||e.v7_startTransition,void 0!==(null==e?void 0:e.v7_relativeSplatPath)||t&&t.v7_relativeSplatPath,void(t&&(t.v7_fetcherPersist,t.v7_normalizeFormMethod,t.v7_partialHydration,t.v7_skipActionErrorRevalidation));var e,t}),[a]),t.createElement(Se,{basename:n,children:r,location:s.location,navigationType:s.action,navigator:c,future:a})}x.flushSync,n.useId;const De="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,je=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,Re=t.forwardRef((function(e,n){let r,{onClick:a,relative:o,reloadDocument:i,replace:l,state:c,target:s,to:u,preventScrollReset:d,viewTransition:p}=e,f=_e(e,Pe),{basename:m}=t.useContext(ie),h=!1;if("string"==typeof u&&je.test(u)&&(r=u,De))try{let e=new URL(window.location.href),t=u.startsWith("//")?new URL(e.protocol+u):new URL(u),n=q(t.pathname,m);t.origin===e.origin&&null!=n?u=n+t.search+t.hash:h=!0}catch(e){}let g=function(e,n){let{relative:r}=void 0===n?{}:n;ue()||E(!1);let{basename:a,navigator:o}=t.useContext(ie),{hash:i,pathname:l,search:c}=he(e,{relative:r}),s=l;return"/"!==a&&(s="/"===l?a:Z([a,l])),o.createHref({pathname:s,search:c,hash:i})}(u,{relative:o}),v=function(e,n){let{target:r,replace:a,state:o,preventScrollReset:i,relative:l,viewTransition:c}=void 0===n?{}:n,s=fe(),u=de(),d=he(e,{relative:l});return t.useCallback((t=>{if(function(e,t){return!(0!==e.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(t,r)){t.preventDefault();let n=void 0!==a?a:L(u)===L(d);s(e,{replace:n,state:o,preventScrollReset:i,relative:l,viewTransition:c})}}),[u,s,d,a,o,r,e,i,l,c])}(u,{replace:l,state:c,target:s,preventScrollReset:d,relative:o,viewTransition:p});return t.createElement("a",Le({},f,{href:r||g,onClick:h||i?a:function(e){a&&a(e),e.defaultPrevented||v(e)},ref:n,target:s}))})),Ie=t.forwardRef((function(e,n){let{"aria-current":r="page",caseSensitive:a=!1,className:o="",end:i=!1,style:l,to:c,viewTransition:s,children:u}=e,d=_e(e,Me),p=he(c,{relative:d.relative}),f=de(),m=t.useContext(oe),{navigator:h,basename:g}=t.useContext(ie),v=null!=m&&function(e,n){void 0===n&&(n={});let r=t.useContext(Oe);null==r&&E(!1);let{basename:a}=function(){let e=t.useContext(ae);return e||E(!1),e}(ze.useViewTransitionState),o=he(e,{relative:n.relative});if(!r.isTransitioning)return!1;let i=q(r.currentLocation.pathname,a)||r.currentLocation.pathname,l=q(r.nextLocation.pathname,a)||r.nextLocation.pathname;return null!=W(o.pathname,l)||null!=W(o.pathname,i)}(p)&&!0===s,y=h.encodeLocation?h.encodeLocation(p).pathname:p.pathname,b=f.pathname,A=m&&m.navigation&&m.navigation.location?m.navigation.location.pathname:null;a||(b=b.toLowerCase(),A=A?A.toLowerCase():null,y=y.toLowerCase()),A&&g&&(A=q(A,g)||A);const w="/"!==y&&y.endsWith("/")?y.length-1:y.length;let x,k=b===y||!i&&b.startsWith(y)&&"/"===b.charAt(w),C=null!=A&&(A===y||!i&&A.startsWith(y)&&"/"===A.charAt(y.length)),S={isActive:k,isPending:C,isTransitioning:v},N=k?r:void 0;x="function"==typeof o?o(S):[o,k?"active":null,C?"pending":null,v?"transitioning":null].filter(Boolean).join(" ");let B="function"==typeof l?l(S):l;return t.createElement(Re,Le({},d,{"aria-current":N,className:x,ref:n,style:B,to:c,viewTransition:s}),"function"==typeof u?u(S):u)}));var ze,$e,Ge,Ye;function Ue(e,t){return function(){return e.apply(t,arguments)}}($e=ze||(ze={})).UseScrollRestoration="useScrollRestoration",$e.UseSubmit="useSubmit",$e.UseSubmitFetcher="useSubmitFetcher",$e.UseFetcher="useFetcher",$e.useViewTransitionState="useViewTransitionState",(Ye=Ge||(Ge={})).UseFetcher="useFetcher",Ye.UseFetchers="useFetchers",Ye.UseScrollRestoration="useScrollRestoration";const{toString:We}=Object.prototype,{getPrototypeOf:He}=Object,qe=(Ve=Object.create(null),e=>{const t=We.call(e);return Ve[t]||(Ve[t]=t.slice(8,-1).toLowerCase())});var Ve;const Qe=e=>(e=e.toLowerCase(),t=>qe(t)===e),Ke=e=>t=>typeof t===e,{isArray:Ze}=Array,Xe=Ke("undefined"),Je=Qe("ArrayBuffer"),et=Ke("string"),tt=Ke("function"),nt=Ke("number"),rt=e=>null!==e&&"object"==typeof e,at=e=>{if("object"!==qe(e))return!1;const t=He(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)},ot=Qe("Date"),it=Qe("File"),lt=Qe("Blob"),ct=Qe("FileList"),st=Qe("URLSearchParams"),[ut,dt,pt,ft]=["ReadableStream","Request","Response","Headers"].map(Qe);function mt(e,t,{allOwnKeys:n=!1}={}){if(null==e)return;let r,a;if("object"!=typeof e&&(e=[e]),Ze(e))for(r=0,a=e.length;r<a;r++)t.call(null,e[r],r,e);else{const a=n?Object.getOwnPropertyNames(e):Object.keys(e),o=a.length;let i;for(r=0;r<o;r++)i=a[r],t.call(null,e[i],i,e)}}function ht(e,t){t=t.toLowerCase();const n=Object.keys(e);let r,a=n.length;for(;a-- >0;)if(r=n[a],t===r.toLowerCase())return r;return null}const gt="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,vt=e=>!Xe(e)&&e!==gt,yt=(bt="undefined"!=typeof Uint8Array&&He(Uint8Array),e=>bt&&e instanceof bt);var bt;const At=Qe("HTMLFormElement"),wt=(({hasOwnProperty:e})=>(t,n)=>e.call(t,n))(Object.prototype),xt=Qe("RegExp"),kt=(e,t)=>{const n=Object.getOwnPropertyDescriptors(e),r={};mt(n,((n,a)=>{let o;!1!==(o=t(n,a,e))&&(r[a]=o||n)})),Object.defineProperties(e,r)},Ct=Qe("AsyncFunction"),Et=(St="function"==typeof setImmediate,Nt=tt(gt.postMessage),St?setImmediate:Nt?(Bt=`axios@${Math.random()}`,Lt=[],gt.addEventListener("message",(({source:e,data:t})=>{e===gt&&t===Bt&&Lt.length&&Lt.shift()()}),!1),e=>{Lt.push(e),gt.postMessage(Bt,"*")}):e=>setTimeout(e));var St,Nt,Bt,Lt;const _t="undefined"!=typeof queueMicrotask?queueMicrotask.bind(gt):"undefined"!=typeof process&&process.nextTick||Et,Pt={isArray:Ze,isArrayBuffer:Je,isBuffer:function(e){return null!==e&&!Xe(e)&&null!==e.constructor&&!Xe(e.constructor)&&tt(e.constructor.isBuffer)&&e.constructor.isBuffer(e)},isFormData:e=>{let t;return e&&("function"==typeof FormData&&e instanceof FormData||tt(e.append)&&("formdata"===(t=qe(e))||"object"===t&&tt(e.toString)&&"[object FormData]"===e.toString()))},isArrayBufferView:function(e){let t;return t="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&Je(e.buffer),t},isString:et,isNumber:nt,isBoolean:e=>!0===e||!1===e,isObject:rt,isPlainObject:at,isReadableStream:ut,isRequest:dt,isResponse:pt,isHeaders:ft,isUndefined:Xe,isDate:ot,isFile:it,isBlob:lt,isRegExp:xt,isFunction:tt,isStream:e=>rt(e)&&tt(e.pipe),isURLSearchParams:st,isTypedArray:yt,isFileList:ct,forEach:mt,merge:function e(){const{caseless:t}=vt(this)&&this||{},n={},r=(r,a)=>{const o=t&&ht(n,a)||a;at(n[o])&&at(r)?n[o]=e(n[o],r):at(r)?n[o]=e({},r):Ze(r)?n[o]=r.slice():n[o]=r};for(let e=0,t=arguments.length;e<t;e++)arguments[e]&&mt(arguments[e],r);return n},extend:(e,t,n,{allOwnKeys:r}={})=>(mt(t,((t,r)=>{n&&tt(t)?e[r]=Ue(t,n):e[r]=t}),{allOwnKeys:r}),e),trim:e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:e=>(65279===e.charCodeAt(0)&&(e=e.slice(1)),e),inherits:(e,t,n,r)=>{e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),n&&Object.assign(e.prototype,n)},toFlatObject:(e,t,n,r)=>{let a,o,i;const l={};if(t=t||{},null==e)return t;do{for(a=Object.getOwnPropertyNames(e),o=a.length;o-- >0;)i=a[o],r&&!r(i,e,t)||l[i]||(t[i]=e[i],l[i]=!0);e=!1!==n&&He(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},kindOf:qe,kindOfTest:Qe,endsWith:(e,t,n)=>{e=String(e),(void 0===n||n>e.length)&&(n=e.length),n-=t.length;const r=e.indexOf(t,n);return-1!==r&&r===n},toArray:e=>{if(!e)return null;if(Ze(e))return e;let t=e.length;if(!nt(t))return null;const n=new Array(t);for(;t-- >0;)n[t]=e[t];return n},forEachEntry:(e,t)=>{const n=(e&&e[Symbol.iterator]).call(e);let r;for(;(r=n.next())&&!r.done;){const n=r.value;t.call(e,n[0],n[1])}},matchAll:(e,t)=>{let n;const r=[];for(;null!==(n=e.exec(t));)r.push(n);return r},isHTMLForm:At,hasOwnProperty:wt,hasOwnProp:wt,reduceDescriptors:kt,freezeMethods:e=>{kt(e,((t,n)=>{if(tt(e)&&-1!==["arguments","caller","callee"].indexOf(n))return!1;const r=e[n];tt(r)&&(t.enumerable=!1,"writable"in t?t.writable=!1:t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+n+"'")}))}))},toObjectSet:(e,t)=>{const n={},r=e=>{e.forEach((e=>{n[e]=!0}))};return Ze(e)?r(e):r(String(e).split(t)),n},toCamelCase:e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(e,t,n){return t.toUpperCase()+n})),noop:()=>{},toFiniteNumber:(e,t)=>null!=e&&Number.isFinite(e=+e)?e:t,findKey:ht,global:gt,isContextDefined:vt,isSpecCompliantForm:function(e){return!!(e&&tt(e.append)&&"FormData"===e[Symbol.toStringTag]&&e[Symbol.iterator])},toJSONObject:e=>{const t=new Array(10),n=(e,r)=>{if(rt(e)){if(t.indexOf(e)>=0)return;if(!("toJSON"in e)){t[r]=e;const a=Ze(e)?[]:{};return mt(e,((e,t)=>{const o=n(e,r+1);!Xe(o)&&(a[t]=o)})),t[r]=void 0,a}}return e};return n(e,0)},isAsyncFn:Ct,isThenable:e=>e&&(rt(e)||tt(e))&&tt(e.then)&&tt(e.catch),setImmediate:Et,asap:_t};function Mt(e,t,n,r,a){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),r&&(this.request=r),a&&(this.response=a,this.status=a.status?a.status:null)}Pt.inherits(Mt,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:Pt.toJSONObject(this.config),code:this.code,status:this.status}}});const Ot=Mt.prototype,Tt={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((e=>{Tt[e]={value:e}})),Object.defineProperties(Mt,Tt),Object.defineProperty(Ot,"isAxiosError",{value:!0}),Mt.from=(e,t,n,r,a,o)=>{const i=Object.create(Ot);return Pt.toFlatObject(e,i,(function(e){return e!==Error.prototype}),(e=>"isAxiosError"!==e)),Mt.call(i,e.message,t,n,r,a),i.cause=e,i.name=e.name,o&&Object.assign(i,o),i};const Ft=Mt;function Dt(e){return Pt.isPlainObject(e)||Pt.isArray(e)}function jt(e){return Pt.endsWith(e,"[]")?e.slice(0,-2):e}function Rt(e,t,n){return e?e.concat(t).map((function(e,t){return e=jt(e),!n&&t?"["+e+"]":e})).join(n?".":""):t}const It=Pt.toFlatObject(Pt,{},null,(function(e){return/^is[A-Z]/.test(e)})),zt=function(e,t,n){if(!Pt.isObject(e))throw new TypeError("target must be an object");t=t||new FormData;const r=(n=Pt.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(e,t){return!Pt.isUndefined(t[e])}))).metaTokens,a=n.visitor||s,o=n.dots,i=n.indexes,l=(n.Blob||"undefined"!=typeof Blob&&Blob)&&Pt.isSpecCompliantForm(t);if(!Pt.isFunction(a))throw new TypeError("visitor must be a function");function c(e){if(null===e)return"";if(Pt.isDate(e))return e.toISOString();if(!l&&Pt.isBlob(e))throw new Ft("Blob is not supported. Use a Buffer instead.");return Pt.isArrayBuffer(e)||Pt.isTypedArray(e)?l&&"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}function s(e,n,a){let l=e;if(e&&!a&&"object"==typeof e)if(Pt.endsWith(n,"{}"))n=r?n:n.slice(0,-2),e=JSON.stringify(e);else if(Pt.isArray(e)&&function(e){return Pt.isArray(e)&&!e.some(Dt)}(e)||(Pt.isFileList(e)||Pt.endsWith(n,"[]"))&&(l=Pt.toArray(e)))return n=jt(n),l.forEach((function(e,r){!Pt.isUndefined(e)&&null!==e&&t.append(!0===i?Rt([n],r,o):null===i?n:n+"[]",c(e))})),!1;return!!Dt(e)||(t.append(Rt(a,n,o),c(e)),!1)}const u=[],d=Object.assign(It,{defaultVisitor:s,convertValue:c,isVisitable:Dt});if(!Pt.isObject(e))throw new TypeError("data must be an object");return function e(n,r){if(!Pt.isUndefined(n)){if(-1!==u.indexOf(n))throw Error("Circular reference detected in "+r.join("."));u.push(n),Pt.forEach(n,(function(n,o){!0===(!(Pt.isUndefined(n)||null===n)&&a.call(t,n,Pt.isString(o)?o.trim():o,r,d))&&e(n,r?r.concat(o):[o])})),u.pop()}}(e),t};function $t(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,(function(e){return t[e]}))}function Gt(e,t){this._pairs=[],e&&zt(e,this,t)}const Yt=Gt.prototype;Yt.append=function(e,t){this._pairs.push([e,t])},Yt.toString=function(e){const t=e?function(t){return e.call(this,t,$t)}:$t;return this._pairs.map((function(e){return t(e[0])+"="+t(e[1])}),"").join("&")};const Ut=Gt;function Wt(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function Ht(e,t,n){if(!t)return e;const r=n&&n.encode||Wt;Pt.isFunction(n)&&(n={serialize:n});const a=n&&n.serialize;let o;if(o=a?a(t,n):Pt.isURLSearchParams(t)?t.toString():new Ut(t,n).toString(r),o){const t=e.indexOf("#");-1!==t&&(e=e.slice(0,t)),e+=(-1===e.indexOf("?")?"?":"&")+o}return e}const qt=class{constructor(){this.handlers=[]}use(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){Pt.forEach(this.handlers,(function(t){null!==t&&e(t)}))}},Vt={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},Qt={isBrowser:!0,classes:{URLSearchParams:"undefined"!=typeof URLSearchParams?URLSearchParams:Ut,FormData:"undefined"!=typeof FormData?FormData:null,Blob:"undefined"!=typeof Blob?Blob:null},protocols:["http","https","file","blob","url","data"]},Kt="undefined"!=typeof window&&"undefined"!=typeof document,Zt="object"==typeof navigator&&navigator||void 0,Xt=Kt&&(!Zt||["ReactNative","NativeScript","NS"].indexOf(Zt.product)<0),Jt="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts,en=Kt&&window.location.href||"http://localhost",tn={...e,...Qt},nn=function(e){function t(e,n,r,a){let o=e[a++];if("__proto__"===o)return!0;const i=Number.isFinite(+o),l=a>=e.length;return o=!o&&Pt.isArray(r)?r.length:o,l?(Pt.hasOwnProp(r,o)?r[o]=[r[o],n]:r[o]=n,!i):(r[o]&&Pt.isObject(r[o])||(r[o]=[]),t(e,n,r[o],a)&&Pt.isArray(r[o])&&(r[o]=function(e){const t={},n=Object.keys(e);let r;const a=n.length;let o;for(r=0;r<a;r++)o=n[r],t[o]=e[o];return t}(r[o])),!i)}if(Pt.isFormData(e)&&Pt.isFunction(e.entries)){const n={};return Pt.forEachEntry(e,((e,r)=>{t(function(e){return Pt.matchAll(/\w+|\[(\w*)]/g,e).map((e=>"[]"===e[0]?"":e[1]||e[0]))}(e),r,n,0)})),n}return null},rn={transitional:Vt,adapter:["xhr","http","fetch"],transformRequest:[function(e,t){const n=t.getContentType()||"",r=n.indexOf("application/json")>-1,a=Pt.isObject(e);if(a&&Pt.isHTMLForm(e)&&(e=new FormData(e)),Pt.isFormData(e))return r?JSON.stringify(nn(e)):e;if(Pt.isArrayBuffer(e)||Pt.isBuffer(e)||Pt.isStream(e)||Pt.isFile(e)||Pt.isBlob(e)||Pt.isReadableStream(e))return e;if(Pt.isArrayBufferView(e))return e.buffer;if(Pt.isURLSearchParams(e))return t.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let o;if(a){if(n.indexOf("application/x-www-form-urlencoded")>-1)return function(e,t){return zt(e,new tn.classes.URLSearchParams,Object.assign({visitor:function(e,t,n,r){return tn.isNode&&Pt.isBuffer(e)?(this.append(t,e.toString("base64")),!1):r.defaultVisitor.apply(this,arguments)}},t))}(e,this.formSerializer).toString();if((o=Pt.isFileList(e))||n.indexOf("multipart/form-data")>-1){const t=this.env&&this.env.FormData;return zt(o?{"files[]":e}:e,t&&new t,this.formSerializer)}}return a||r?(t.setContentType("application/json",!1),function(e){if(Pt.isString(e))try{return(0,JSON.parse)(e),Pt.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){const t=this.transitional||rn.transitional,n=t&&t.forcedJSONParsing,r="json"===this.responseType;if(Pt.isResponse(e)||Pt.isReadableStream(e))return e;if(e&&Pt.isString(e)&&(n&&!this.responseType||r)){const n=!(t&&t.silentJSONParsing)&&r;try{return JSON.parse(e)}catch(e){if(n){if("SyntaxError"===e.name)throw Ft.from(e,Ft.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:tn.classes.FormData,Blob:tn.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};Pt.forEach(["delete","get","head","post","put","patch"],(e=>{rn.headers[e]={}}));const an=rn,on=Pt.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),ln=Symbol("internals");function cn(e){return e&&String(e).trim().toLowerCase()}function sn(e){return!1===e||null==e?e:Pt.isArray(e)?e.map(sn):String(e)}function un(e,t,n,r,a){return Pt.isFunction(r)?r.call(this,t,n):(a&&(t=n),Pt.isString(t)?Pt.isString(r)?-1!==t.indexOf(r):Pt.isRegExp(r)?r.test(t):void 0:void 0)}class dn{constructor(e){e&&this.set(e)}set(e,t,n){const r=this;function a(e,t,n){const a=cn(t);if(!a)throw new Error("header name must be a non-empty string");const o=Pt.findKey(r,a);(!o||void 0===r[o]||!0===n||void 0===n&&!1!==r[o])&&(r[o||t]=sn(e))}const o=(e,t)=>Pt.forEach(e,((e,n)=>a(e,n,t)));if(Pt.isPlainObject(e)||e instanceof this.constructor)o(e,t);else if(Pt.isString(e)&&(e=e.trim())&&!/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim()))o((e=>{const t={};let n,r,a;return e&&e.split("\n").forEach((function(e){a=e.indexOf(":"),n=e.substring(0,a).trim().toLowerCase(),r=e.substring(a+1).trim(),!n||t[n]&&on[n]||("set-cookie"===n?t[n]?t[n].push(r):t[n]=[r]:t[n]=t[n]?t[n]+", "+r:r)})),t})(e),t);else if(Pt.isHeaders(e))for(const[t,r]of e.entries())a(r,t,n);else null!=e&&a(t,e,n);return this}get(e,t){if(e=cn(e)){const n=Pt.findKey(this,e);if(n){const e=this[n];if(!t)return e;if(!0===t)return function(e){const t=Object.create(null),n=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let r;for(;r=n.exec(e);)t[r[1]]=r[2];return t}(e);if(Pt.isFunction(t))return t.call(this,e,n);if(Pt.isRegExp(t))return t.exec(e);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,t){if(e=cn(e)){const n=Pt.findKey(this,e);return!(!n||void 0===this[n]||t&&!un(0,this[n],n,t))}return!1}delete(e,t){const n=this;let r=!1;function a(e){if(e=cn(e)){const a=Pt.findKey(n,e);!a||t&&!un(0,n[a],a,t)||(delete n[a],r=!0)}}return Pt.isArray(e)?e.forEach(a):a(e),r}clear(e){const t=Object.keys(this);let n=t.length,r=!1;for(;n--;){const a=t[n];e&&!un(0,this[a],a,e,!0)||(delete this[a],r=!0)}return r}normalize(e){const t=this,n={};return Pt.forEach(this,((r,a)=>{const o=Pt.findKey(n,a);if(o)return t[o]=sn(r),void delete t[a];const i=e?function(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((e,t,n)=>t.toUpperCase()+n))}(a):String(a).trim();i!==a&&delete t[a],t[i]=sn(r),n[i]=!0})),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const t=Object.create(null);return Pt.forEach(this,((n,r)=>{null!=n&&!1!==n&&(t[r]=e&&Pt.isArray(n)?n.join(", "):n)})),t}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map((([e,t])=>e+": "+t)).join("\n")}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...t){const n=new this(e);return t.forEach((e=>n.set(e))),n}static accessor(e){const t=(this[ln]=this[ln]={accessors:{}}).accessors,n=this.prototype;function r(e){const r=cn(e);t[r]||(function(e,t){const n=Pt.toCamelCase(" "+t);["get","set","has"].forEach((r=>{Object.defineProperty(e,r+n,{value:function(e,n,a){return this[r].call(this,t,e,n,a)},configurable:!0})}))}(n,e),t[r]=!0)}return Pt.isArray(e)?e.forEach(r):r(e),this}}dn.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),Pt.reduceDescriptors(dn.prototype,(({value:e},t)=>{let n=t[0].toUpperCase()+t.slice(1);return{get:()=>e,set(e){this[n]=e}}})),Pt.freezeMethods(dn);const pn=dn;function fn(e,t){const n=this||an,r=t||n,a=pn.from(r.headers);let o=r.data;return Pt.forEach(e,(function(e){o=e.call(n,o,a.normalize(),t?t.status:void 0)})),a.normalize(),o}function mn(e){return!(!e||!e.__CANCEL__)}function hn(e,t,n){Ft.call(this,null==e?"canceled":e,Ft.ERR_CANCELED,t,n),this.name="CanceledError"}Pt.inherits(hn,Ft,{__CANCEL__:!0});const gn=hn;function vn(e,t,n){const r=n.config.validateStatus;n.status&&r&&!r(n.status)?t(new Ft("Request failed with status code "+n.status,[Ft.ERR_BAD_REQUEST,Ft.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):e(n)}const yn=(e,t,n=3)=>{let r=0;const a=function(e,t){e=e||10;const n=new Array(e),r=new Array(e);let a,o=0,i=0;return t=void 0!==t?t:1e3,function(l){const c=Date.now(),s=r[i];a||(a=c),n[o]=l,r[o]=c;let u=i,d=0;for(;u!==o;)d+=n[u++],u%=e;if(o=(o+1)%e,o===i&&(i=(i+1)%e),c-a<t)return;const p=s&&c-s;return p?Math.round(1e3*d/p):void 0}}(50,250);return function(e,t){let n,r,a=0,o=1e3/t;const i=(t,o=Date.now())=>{a=o,n=null,r&&(clearTimeout(r),r=null),e.apply(null,t)};return[(...e)=>{const t=Date.now(),l=t-a;l>=o?i(e,t):(n=e,r||(r=setTimeout((()=>{r=null,i(n)}),o-l)))},()=>n&&i(n)]}((n=>{const o=n.loaded,i=n.lengthComputable?n.total:void 0,l=o-r,c=a(l);r=o,e({loaded:o,total:i,progress:i?o/i:void 0,bytes:l,rate:c||void 0,estimated:c&&i&&o<=i?(i-o)/c:void 0,event:n,lengthComputable:null!=i,[t?"download":"upload"]:!0})}),n)},bn=(e,t)=>{const n=null!=e;return[r=>t[0]({lengthComputable:n,total:e,loaded:r}),t[1]]},An=e=>(...t)=>Pt.asap((()=>e(...t))),wn=tn.hasStandardBrowserEnv?(xn=new URL(tn.origin),kn=tn.navigator&&/(msie|trident)/i.test(tn.navigator.userAgent),e=>(e=new URL(e,tn.origin),xn.protocol===e.protocol&&xn.host===e.host&&(kn||xn.port===e.port))):()=>!0;var xn,kn;const Cn=tn.hasStandardBrowserEnv?{write(e,t,n,r,a,o){const i=[e+"="+encodeURIComponent(t)];Pt.isNumber(n)&&i.push("expires="+new Date(n).toGMTString()),Pt.isString(r)&&i.push("path="+r),Pt.isString(a)&&i.push("domain="+a),!0===o&&i.push("secure"),document.cookie=i.join("; ")},read(e){const t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove(e){this.write(e,"",Date.now()-864e5)}}:{write(){},read:()=>null,remove(){}};function En(e,t,n){let r=!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t);return e&&r||0==n?function(e,t){return t?e.replace(/\/?\/$/,"")+"/"+t.replace(/^\/+/,""):e}(e,t):t}const Sn=e=>e instanceof pn?{...e}:e;function Nn(e,t){t=t||{};const n={};function r(e,t,n,r){return Pt.isPlainObject(e)&&Pt.isPlainObject(t)?Pt.merge.call({caseless:r},e,t):Pt.isPlainObject(t)?Pt.merge({},t):Pt.isArray(t)?t.slice():t}function a(e,t,n,a){return Pt.isUndefined(t)?Pt.isUndefined(e)?void 0:r(void 0,e,0,a):r(e,t,0,a)}function o(e,t){if(!Pt.isUndefined(t))return r(void 0,t)}function i(e,t){return Pt.isUndefined(t)?Pt.isUndefined(e)?void 0:r(void 0,e):r(void 0,t)}function l(n,a,o){return o in t?r(n,a):o in e?r(void 0,n):void 0}const c={url:o,method:o,data:o,baseURL:i,transformRequest:i,transformResponse:i,paramsSerializer:i,timeout:i,timeoutMessage:i,withCredentials:i,withXSRFToken:i,adapter:i,responseType:i,xsrfCookieName:i,xsrfHeaderName:i,onUploadProgress:i,onDownloadProgress:i,decompress:i,maxContentLength:i,maxBodyLength:i,beforeRedirect:i,transport:i,httpAgent:i,httpsAgent:i,cancelToken:i,socketPath:i,responseEncoding:i,validateStatus:l,headers:(e,t,n)=>a(Sn(e),Sn(t),0,!0)};return Pt.forEach(Object.keys(Object.assign({},e,t)),(function(r){const o=c[r]||a,i=o(e[r],t[r],r);Pt.isUndefined(i)&&o!==l||(n[r]=i)})),n}const Bn=e=>{const t=Nn({},e);let n,{data:r,withXSRFToken:a,xsrfHeaderName:o,xsrfCookieName:i,headers:l,auth:c}=t;if(t.headers=l=pn.from(l),t.url=Ht(En(t.baseURL,t.url),e.params,e.paramsSerializer),c&&l.set("Authorization","Basic "+btoa((c.username||"")+":"+(c.password?unescape(encodeURIComponent(c.password)):""))),Pt.isFormData(r))if(tn.hasStandardBrowserEnv||tn.hasStandardBrowserWebWorkerEnv)l.setContentType(void 0);else if(!1!==(n=l.getContentType())){const[e,...t]=n?n.split(";").map((e=>e.trim())).filter(Boolean):[];l.setContentType([e||"multipart/form-data",...t].join("; "))}if(tn.hasStandardBrowserEnv&&(a&&Pt.isFunction(a)&&(a=a(t)),a||!1!==a&&wn(t.url))){const e=o&&i&&Cn.read(i);e&&l.set(o,e)}return t},Ln="undefined"!=typeof XMLHttpRequest&&function(e){return new Promise((function(t,n){const r=Bn(e);let a=r.data;const o=pn.from(r.headers).normalize();let i,l,c,s,u,{responseType:d,onUploadProgress:p,onDownloadProgress:f}=r;function m(){s&&s(),u&&u(),r.cancelToken&&r.cancelToken.unsubscribe(i),r.signal&&r.signal.removeEventListener("abort",i)}let h=new XMLHttpRequest;function g(){if(!h)return;const r=pn.from("getAllResponseHeaders"in h&&h.getAllResponseHeaders());vn((function(e){t(e),m()}),(function(e){n(e),m()}),{data:d&&"text"!==d&&"json"!==d?h.response:h.responseText,status:h.status,statusText:h.statusText,headers:r,config:e,request:h}),h=null}h.open(r.method.toUpperCase(),r.url,!0),h.timeout=r.timeout,"onloadend"in h?h.onloadend=g:h.onreadystatechange=function(){h&&4===h.readyState&&(0!==h.status||h.responseURL&&0===h.responseURL.indexOf("file:"))&&setTimeout(g)},h.onabort=function(){h&&(n(new Ft("Request aborted",Ft.ECONNABORTED,e,h)),h=null)},h.onerror=function(){n(new Ft("Network Error",Ft.ERR_NETWORK,e,h)),h=null},h.ontimeout=function(){let t=r.timeout?"timeout of "+r.timeout+"ms exceeded":"timeout exceeded";const a=r.transitional||Vt;r.timeoutErrorMessage&&(t=r.timeoutErrorMessage),n(new Ft(t,a.clarifyTimeoutError?Ft.ETIMEDOUT:Ft.ECONNABORTED,e,h)),h=null},void 0===a&&o.setContentType(null),"setRequestHeader"in h&&Pt.forEach(o.toJSON(),(function(e,t){h.setRequestHeader(t,e)})),Pt.isUndefined(r.withCredentials)||(h.withCredentials=!!r.withCredentials),d&&"json"!==d&&(h.responseType=r.responseType),f&&([c,u]=yn(f,!0),h.addEventListener("progress",c)),p&&h.upload&&([l,s]=yn(p),h.upload.addEventListener("progress",l),h.upload.addEventListener("loadend",s)),(r.cancelToken||r.signal)&&(i=t=>{h&&(n(!t||t.type?new gn(null,e,h):t),h.abort(),h=null)},r.cancelToken&&r.cancelToken.subscribe(i),r.signal&&(r.signal.aborted?i():r.signal.addEventListener("abort",i)));const v=function(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}(r.url);v&&-1===tn.protocols.indexOf(v)?n(new Ft("Unsupported protocol "+v+":",Ft.ERR_BAD_REQUEST,e)):h.send(a||null)}))},_n=(e,t)=>{const{length:n}=e=e?e.filter(Boolean):[];if(t||n){let n,r=new AbortController;const a=function(e){if(!n){n=!0,i();const t=e instanceof Error?e:this.reason;r.abort(t instanceof Ft?t:new gn(t instanceof Error?t.message:t))}};let o=t&&setTimeout((()=>{o=null,a(new Ft(`timeout ${t} of ms exceeded`,Ft.ETIMEDOUT))}),t);const i=()=>{e&&(o&&clearTimeout(o),o=null,e.forEach((e=>{e.unsubscribe?e.unsubscribe(a):e.removeEventListener("abort",a)})),e=null)};e.forEach((e=>e.addEventListener("abort",a)));const{signal:l}=r;return l.unsubscribe=()=>Pt.asap(i),l}},Pn=function*(e,t){let n=e.byteLength;if(!t||n<t)return void(yield e);let r,a=0;for(;a<n;)r=a+t,yield e.slice(a,r),a=r},Mn=(e,t,n,r)=>{const a=async function*(e,t){for await(const n of async function*(e){if(e[Symbol.asyncIterator])return void(yield*e);const t=e.getReader();try{for(;;){const{done:e,value:n}=await t.read();if(e)break;yield n}}finally{await t.cancel()}}(e))yield*Pn(n,t)}(e,t);let o,i=0,l=e=>{o||(o=!0,r&&r(e))};return new ReadableStream({async pull(e){try{const{done:t,value:r}=await a.next();if(t)return l(),void e.close();let o=r.byteLength;if(n){let e=i+=o;n(e)}e.enqueue(new Uint8Array(r))}catch(e){throw l(e),e}},cancel:e=>(l(e),a.return())},{highWaterMark:2})},On="function"==typeof fetch&&"function"==typeof Request&&"function"==typeof Response,Tn=On&&"function"==typeof ReadableStream,Fn=On&&("function"==typeof TextEncoder?(Dn=new TextEncoder,e=>Dn.encode(e)):async e=>new Uint8Array(await new Response(e).arrayBuffer()));var Dn;const jn=(e,...t)=>{try{return!!e(...t)}catch(e){return!1}},Rn=Tn&&jn((()=>{let e=!1;const t=new Request(tn.origin,{body:new ReadableStream,method:"POST",get duplex(){return e=!0,"half"}}).headers.has("Content-Type");return e&&!t})),In=Tn&&jn((()=>Pt.isReadableStream(new Response("").body))),zn={stream:In&&(e=>e.body)};var $n;On&&($n=new Response,["text","arrayBuffer","blob","formData","stream"].forEach((e=>{!zn[e]&&(zn[e]=Pt.isFunction($n[e])?t=>t[e]():(t,n)=>{throw new Ft(`Response type '${e}' is not supported`,Ft.ERR_NOT_SUPPORT,n)})})));const Gn={http:null,xhr:Ln,fetch:On&&(async e=>{let{url:t,method:n,data:r,signal:a,cancelToken:o,timeout:i,onDownloadProgress:l,onUploadProgress:c,responseType:s,headers:u,withCredentials:d="same-origin",fetchOptions:p}=Bn(e);s=s?(s+"").toLowerCase():"text";let f,m=_n([a,o&&o.toAbortSignal()],i);const h=m&&m.unsubscribe&&(()=>{m.unsubscribe()});let g;try{if(c&&Rn&&"get"!==n&&"head"!==n&&0!==(g=await(async(e,t)=>{const n=Pt.toFiniteNumber(e.getContentLength());return null==n?(async e=>{if(null==e)return 0;if(Pt.isBlob(e))return e.size;if(Pt.isSpecCompliantForm(e)){const t=new Request(tn.origin,{method:"POST",body:e});return(await t.arrayBuffer()).byteLength}return Pt.isArrayBufferView(e)||Pt.isArrayBuffer(e)?e.byteLength:(Pt.isURLSearchParams(e)&&(e+=""),Pt.isString(e)?(await Fn(e)).byteLength:void 0)})(t):n})(u,r))){let e,n=new Request(t,{method:"POST",body:r,duplex:"half"});if(Pt.isFormData(r)&&(e=n.headers.get("content-type"))&&u.setContentType(e),n.body){const[e,t]=bn(g,yn(An(c)));r=Mn(n.body,65536,e,t)}}Pt.isString(d)||(d=d?"include":"omit");const a="credentials"in Request.prototype;f=new Request(t,{...p,signal:m,method:n.toUpperCase(),headers:u.normalize().toJSON(),body:r,duplex:"half",credentials:a?d:void 0});let o=await fetch(f);const i=In&&("stream"===s||"response"===s);if(In&&(l||i&&h)){const e={};["status","statusText","headers"].forEach((t=>{e[t]=o[t]}));const t=Pt.toFiniteNumber(o.headers.get("content-length")),[n,r]=l&&bn(t,yn(An(l),!0))||[];o=new Response(Mn(o.body,65536,n,(()=>{r&&r(),h&&h()})),e)}s=s||"text";let v=await zn[Pt.findKey(zn,s)||"text"](o,e);return!i&&h&&h(),await new Promise(((t,n)=>{vn(t,n,{data:v,headers:pn.from(o.headers),status:o.status,statusText:o.statusText,config:e,request:f})}))}catch(t){if(h&&h(),t&&"TypeError"===t.name&&/fetch/i.test(t.message))throw Object.assign(new Ft("Network Error",Ft.ERR_NETWORK,e,f),{cause:t.cause||t});throw Ft.from(t,t&&t.code,e,f)}})};Pt.forEach(Gn,((e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch(e){}Object.defineProperty(e,"adapterName",{value:t})}}));const Yn=e=>`- ${e}`,Un=e=>Pt.isFunction(e)||null===e||!1===e,Wn=e=>{e=Pt.isArray(e)?e:[e];const{length:t}=e;let n,r;const a={};for(let o=0;o<t;o++){let t;if(n=e[o],r=n,!Un(n)&&(r=Gn[(t=String(n)).toLowerCase()],void 0===r))throw new Ft(`Unknown adapter '${t}'`);if(r)break;a[t||"#"+o]=r}if(!r){const e=Object.entries(a).map((([e,t])=>`adapter ${e} `+(!1===t?"is not supported by the environment":"is not available in the build")));let n=t?e.length>1?"since :\n"+e.map(Yn).join("\n"):" "+Yn(e[0]):"as no adapter specified";throw new Ft("There is no suitable adapter to dispatch the request "+n,"ERR_NOT_SUPPORT")}return r};function Hn(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new gn(null,e)}function qn(e){return Hn(e),e.headers=pn.from(e.headers),e.data=fn.call(e,e.transformRequest),-1!==["post","put","patch"].indexOf(e.method)&&e.headers.setContentType("application/x-www-form-urlencoded",!1),Wn(e.adapter||an.adapter)(e).then((function(t){return Hn(e),t.data=fn.call(e,e.transformResponse,t),t.headers=pn.from(t.headers),t}),(function(t){return mn(t)||(Hn(e),t&&t.response&&(t.response.data=fn.call(e,e.transformResponse,t.response),t.response.headers=pn.from(t.response.headers))),Promise.reject(t)}))}const Vn={};["object","boolean","number","function","string","symbol"].forEach(((e,t)=>{Vn[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));const Qn={};Vn.transitional=function(e,t,n){function r(e,t){return"[Axios v1.8.1] Transitional option '"+e+"'"+t+(n?". "+n:"")}return(n,a,o)=>{if(!1===e)throw new Ft(r(a," has been removed"+(t?" in "+t:"")),Ft.ERR_DEPRECATED);return t&&!Qn[a]&&(Qn[a]=!0,console.warn(r(a," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,a,o)}},Vn.spelling=function(e){return(t,n)=>(console.warn(`${n} is likely a misspelling of ${e}`),!0)};const Kn={assertOptions:function(e,t,n){if("object"!=typeof e)throw new Ft("options must be an object",Ft.ERR_BAD_OPTION_VALUE);const r=Object.keys(e);let a=r.length;for(;a-- >0;){const o=r[a],i=t[o];if(i){const t=e[o],n=void 0===t||i(t,o,e);if(!0!==n)throw new Ft("option "+o+" must be "+n,Ft.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new Ft("Unknown option "+o,Ft.ERR_BAD_OPTION)}},validators:Vn},Zn=Kn.validators;class Xn{constructor(e){this.defaults=e,this.interceptors={request:new qt,response:new qt}}async request(e,t){try{return await this._request(e,t)}catch(e){if(e instanceof Error){let t={};Error.captureStackTrace?Error.captureStackTrace(t):t=new Error;const n=t.stack?t.stack.replace(/^.+\n/,""):"";try{e.stack?n&&!String(e.stack).endsWith(n.replace(/^.+\n.+\n/,""))&&(e.stack+="\n"+n):e.stack=n}catch(e){}}throw e}}_request(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},t=Nn(this.defaults,t);const{transitional:n,paramsSerializer:r,headers:a}=t;void 0!==n&&Kn.assertOptions(n,{silentJSONParsing:Zn.transitional(Zn.boolean),forcedJSONParsing:Zn.transitional(Zn.boolean),clarifyTimeoutError:Zn.transitional(Zn.boolean)},!1),null!=r&&(Pt.isFunction(r)?t.paramsSerializer={serialize:r}:Kn.assertOptions(r,{encode:Zn.function,serialize:Zn.function},!0)),void 0!==t.allowAbsoluteUrls||(void 0!==this.defaults.allowAbsoluteUrls?t.allowAbsoluteUrls=this.defaults.allowAbsoluteUrls:t.allowAbsoluteUrls=!0),Kn.assertOptions(t,{baseUrl:Zn.spelling("baseURL"),withXsrfToken:Zn.spelling("withXSRFToken")},!0),t.method=(t.method||this.defaults.method||"get").toLowerCase();let o=a&&Pt.merge(a.common,a[t.method]);a&&Pt.forEach(["delete","get","head","post","put","patch","common"],(e=>{delete a[e]})),t.headers=pn.concat(o,a);const i=[];let l=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(l=l&&e.synchronous,i.unshift(e.fulfilled,e.rejected))}));const c=[];let s;this.interceptors.response.forEach((function(e){c.push(e.fulfilled,e.rejected)}));let u,d=0;if(!l){const e=[qn.bind(this),void 0];for(e.unshift.apply(e,i),e.push.apply(e,c),u=e.length,s=Promise.resolve(t);d<u;)s=s.then(e[d++],e[d++]);return s}u=i.length;let p=t;for(d=0;d<u;){const e=i[d++],t=i[d++];try{p=e(p)}catch(e){t.call(this,e);break}}try{s=qn.call(this,p)}catch(e){return Promise.reject(e)}for(d=0,u=c.length;d<u;)s=s.then(c[d++],c[d++]);return s}getUri(e){return Ht(En((e=Nn(this.defaults,e)).baseURL,e.url,e.allowAbsoluteUrls),e.params,e.paramsSerializer)}}Pt.forEach(["delete","get","head","options"],(function(e){Xn.prototype[e]=function(t,n){return this.request(Nn(n||{},{method:e,url:t,data:(n||{}).data}))}})),Pt.forEach(["post","put","patch"],(function(e){function t(t){return function(n,r,a){return this.request(Nn(a||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:n,data:r}))}}Xn.prototype[e]=t(),Xn.prototype[e+"Form"]=t(!0)}));const Jn=Xn;class er{constructor(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");let t;this.promise=new Promise((function(e){t=e}));const n=this;this.promise.then((e=>{if(!n._listeners)return;let t=n._listeners.length;for(;t-- >0;)n._listeners[t](e);n._listeners=null})),this.promise.then=e=>{let t;const r=new Promise((e=>{n.subscribe(e),t=e})).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e((function(e,r,a){n.reason||(n.reason=new gn(e,r,a),t(n.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}toAbortSignal(){const e=new AbortController,t=t=>{e.abort(t)};return this.subscribe(t),e.signal.unsubscribe=()=>this.unsubscribe(t),e.signal}static source(){let e;return{token:new er((function(t){e=t})),cancel:e}}}const tr=er,nr={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(nr).forEach((([e,t])=>{nr[t]=e}));const rr=nr,ar=function e(t){const n=new Jn(t),r=Ue(Jn.prototype.request,n);return Pt.extend(r,Jn.prototype,n,{allOwnKeys:!0}),Pt.extend(r,n,null,{allOwnKeys:!0}),r.create=function(n){return e(Nn(t,n))},r}(an);ar.Axios=Jn,ar.CanceledError=gn,ar.CancelToken=tr,ar.isCancel=mn,ar.VERSION="1.8.1",ar.toFormData=zt,ar.AxiosError=Ft,ar.Cancel=ar.CanceledError,ar.all=function(e){return Promise.all(e)},ar.spread=function(e){return function(t){return e.apply(null,t)}},ar.isAxiosError=function(e){return Pt.isObject(e)&&!0===e.isAxiosError},ar.mergeConfig=Nn,ar.AxiosHeaders=pn,ar.formToJSON=e=>nn(Pt.isHTMLForm(e)?new FormData(e):e),ar.getAdapter=Wn,ar.HttpStatusCode=rr,ar.default=ar;const or=ar;function ir(e){return ir="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ir(e)}function lr(){lr=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,a=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",l=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var o=t&&t.prototype instanceof v?t:v,i=Object.create(o.prototype),l=new _(r||[]);return a(i,"_invoke",{value:S(e,n,l)}),i}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var p="suspendedStart",f="suspendedYield",m="executing",h="completed",g={};function v(){}function y(){}function b(){}var A={};s(A,i,(function(){return this}));var w=Object.getPrototypeOf,x=w&&w(w(P([])));x&&x!==n&&r.call(x,i)&&(A=x);var k=b.prototype=v.prototype=Object.create(A);function C(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function E(e,t){function n(a,o,i,l){var c=d(e[a],e,o);if("throw"!==c.type){var s=c.arg,u=s.value;return u&&"object"==ir(u)&&r.call(u,"__await")?t.resolve(u.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(u).then((function(e){s.value=e,i(s)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var o;a(this,"_invoke",{value:function(e,r){function a(){return new t((function(t,a){n(e,r,t,a)}))}return o=o?o.then(a,a):a()}})}function S(t,n,r){var a=p;return function(o,i){if(a===m)throw Error("Generator is already running");if(a===h){if("throw"===o)throw i;return{value:e,done:!0}}for(r.method=o,r.arg=i;;){var l=r.delegate;if(l){var c=N(l,r);if(c){if(c===g)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(a===p)throw a=h,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);a=m;var s=d(t,n,r);if("normal"===s.type){if(a=r.done?h:f,s.arg===g)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(a=h,r.method="throw",r.arg=s.arg)}}}function N(t,n){var r=n.method,a=t.iterator[r];if(a===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,N(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),g;var o=d(a,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,g;var i=o.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,g):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,g)}function B(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function L(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(B,this),this.reset(!0)}function P(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var a=-1,o=function n(){for(;++a<t.length;)if(r.call(t,a))return n.value=t[a],n.done=!1,n;return n.value=e,n.done=!0,n};return o.next=o}}throw new TypeError(ir(t)+" is not iterable")}return y.prototype=b,a(k,"constructor",{value:b,configurable:!0}),a(b,"constructor",{value:y,configurable:!0}),y.displayName=s(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,s(e,c,"GeneratorFunction")),e.prototype=Object.create(k),e},t.awrap=function(e){return{__await:e}},C(E.prototype),s(E.prototype,l,(function(){return this})),t.AsyncIterator=E,t.async=function(e,n,r,a,o){void 0===o&&(o=Promise);var i=new E(u(e,n,r,a),o);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(k),s(k,c,"Generator"),s(k,i,(function(){return this})),s(k,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=P,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(L),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function a(r,a){return l.type="throw",l.arg=t,n.next=r,a&&(n.method="next",n.arg=e),!!a}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],l=i.completion;if("root"===i.tryLoc)return a("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(c&&s){if(this.prev<i.catchLoc)return a(i.catchLoc,!0);if(this.prev<i.finallyLoc)return a(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return a(i.catchLoc,!0)}else{if(!s)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return a(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,g):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),L(n),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;L(n)}return a}}throw Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),g}},t}function cr(e,t,n,r,a,o,i){try{var l=e[o](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,a)}function sr(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,l=[],c=!0,s=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){s=!0,a=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw a}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return ur(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ur(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ur(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const dr=function(e){var n=sr((0,t.useState)([]),2),r=n[0],a=n[1],o=sr((0,t.useState)(null),2),i=(o[0],o[1]),l=sr((0,t.useState)([]),2),c=l[0],s=l[1],u=fe(),d=e.food;(0,t.useEffect)((function(){p(d)}),[d]);var p=function(){var e,t=(e=lr().mark((function e(){var t,n,r,o,l,c;return lr().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://www.themealdb.com/api/json/v1/1/filter.php?i=".concat(d),n="https://www.themealdb.com/api/json/v1/1/search.php?s=".concat(d),e.prev=2,e.next=5,or.get(t);case 5:return r=e.sent,e.next=8,or.get(n);case 8:o=e.sent,l=r.data,c=o.data,a(l.meals),s(c.meals),setIsLoading(!1),e.next=19;break;case 16:e.prev=16,e.t0=e.catch(2),i(e.t0);case 19:case"end":return e.stop()}}),e,null,[[2,16]])})),function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function i(e){cr(o,r,a,i,l,"next",e)}function l(e){cr(o,r,a,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}();return null==r&&null==c?t.createElement("td",{className:"noLink"},d):t.createElement(t.Fragment,null,t.createElement("td",{className:"name",onClick:function(){var e;e="/".concat(d),u(e),window.scrollTo({top:0,behavior:"smooth"})}},d," "))};function pr(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,l=[],c=!0,s=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){s=!0,a=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw a}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return fr(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?fr(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function fr(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const mr=function(){var e=pr((0,t.useState)(""),2),n=e[0],r=e[1],a=pr((0,t.useState)(""),2),o=a[0],i=a[1],l=pr((0,t.useState)(""),2),c=l[0],s=l[1],u=pr((0,t.useState)(""),2),d=u[0],p=u[1],f=pr((0,t.useState)(""),2),m=f[0],h=f[1],g=pr((0,t.useState)(""),2),v=g[0],y=g[1],b=pr((0,t.useState)(""),2),A=b[0],w=b[1],x=pr((0,t.useState)(""),2),k=x[0],C=x[1],E=pr((0,t.useState)(""),2),S=E[0],N=E[1],B=pr((0,t.useState)(""),2),L=B[0],_=B[1],P=pr((0,t.useState)(""),2),M=P[0],O=P[1],T=pr((0,t.useState)(""),2),F=T[0],D=T[1],j=pr((0,t.useState)(""),2),R=j[0],I=j[1],z=pr((0,t.useState)(""),2),$=z[0],G=z[1],Y=pr((0,t.useState)(""),2),U=Y[0],W=Y[1],H=pr((0,t.useState)(""),2),q=H[0],V=H[1],Q=pr((0,t.useState)(""),2),K=Q[0],Z=Q[1],X=pr((0,t.useState)(""),2),J=X[0],ee=X[1],te=pr((0,t.useState)(""),2),ne=te[0],re=te[1],ae=pr((0,t.useState)(""),2),oe=ae[0],ie=ae[1],le=pr((0,t.useState)(""),2),ce=le[0],se=le[1],ue=pr((0,t.useState)(""),2),de=ue[0],pe=ue[1],me=pr((0,t.useState)(""),2),he=me[0],ge=me[1],ve=pr((0,t.useState)(""),2),ye=ve[0],be=ve[1],Ae=pr((0,t.useState)(""),2),we=Ae[0],xe=Ae[1],ke=pr((0,t.useState)(""),2),Ce=ke[0],Ee=ke[1],Se=pr((0,t.useState)(""),2),Ne=Se[0],Be=Se[1],Le=pr((0,t.useState)(""),2),_e=Le[0],Pe=Le[1],Me=pr((0,t.useState)(""),2),Oe=Me[0],Te=Me[1],Fe=pr((0,t.useState)(""),2),De=Fe[0],je=Fe[1],Re=pr((0,t.useState)(""),2),Ie=Re[0],ze=Re[1],$e=pr((0,t.useState)(""),2),Ge=$e[0],Ye=$e[1],Ue=pr((0,t.useState)(""),2),We=Ue[0],He=Ue[1],qe=pr((0,t.useState)(""),2),Ve=qe[0],Qe=qe[1],Ke=pr((0,t.useState)(""),2),Ze=Ke[0],Xe=Ke[1],Je=pr((0,t.useState)(""),2),et=Je[0],tt=Je[1],nt=pr((0,t.useState)(""),2),rt=nt[0],at=nt[1],ot=pr((0,t.useState)(""),2),it=ot[0],lt=ot[1],ct=pr((0,t.useState)(""),2),st=ct[0],ut=ct[1],dt=pr((0,t.useState)(""),2),pt=dt[0],ft=dt[1],mt=pr((0,t.useState)(""),2),ht=mt[0],gt=mt[1],vt=pr((0,t.useState)(""),2),yt=vt[0],bt=vt[1],At=pr((0,t.useState)(""),2),wt=At[0],xt=At[1],kt=pr((0,t.useState)(""),2),Ct=kt[0],Et=kt[1],St=pr((0,t.useState)(""),2),Nt=St[0],Bt=St[1],Lt=pr((0,t.useState)(""),2),_t=Lt[0],Pt=Lt[1],Mt=pr((0,t.useState)(""),2),Ot=Mt[0],Tt=Mt[1],Ft=pr((0,t.useState)(""),2),Dt=Ft[0],jt=Ft[1],Rt=pr((0,t.useState)(""),2),It=Rt[0],zt=Rt[1],$t=pr((0,t.useState)(""),2),Gt=$t[0],Yt=$t[1];return fe(),t.createElement(t.Fragment,null,t.createElement("div",{className:"groceries"},t.createElement("div",{className:"container"},t.createElement("table",null,t.createElement("thead",null,t.createElement("tr",{className:"title"},t.createElement("th",null,"Groceries"),t.createElement("th",null,"g/ml"),t.createElement("th",null,"Protein"),t.createElement("th",null,"CH"),t.createElement("th",null,"Fat"),t.createElement("th",null,"Calories"))),t.createElement("tbody",null,t.createElement("tr",{className:"hydrates"},t.createElement(dr,{food:"Rice"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",name:"value1",type:"number",value:n,onChange:function(e){r(e.target.value)}})),t.createElement("td",{className:"protein"},(.076*n).toFixed(1)),t.createElement("td",{className:"protein"},(.78*n).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(3.51*n).toFixed(1))),t.createElement("tr",{className:"hydrates"},t.createElement(dr,{food:"Oatmeal"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value2",value:o,onChange:function(e){i(e.target.value)}})),t.createElement("td",{className:"protein"},(.139*o).toFixed(1)),t.createElement("td",{className:"protein"},(.644*o).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(3.74*o).toFixed(1))),t.createElement("tr",{className:"hydrates"},t.createElement(dr,{food:"Potato"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value3",value:c,onChange:function(e){s(e.target.value)}})),t.createElement("td",{className:"protein"},(.09*c).toFixed(1)),t.createElement("td",{className:"protein"},(.2*c).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.85*c).toFixed(1))),t.createElement("tr",{className:"hydrates"},t.createElement(dr,{food:"Corn"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value4",value:d,onChange:function(e){p(e.target.value)}})),t.createElement("td",{className:"protein"},(.07*d).toFixed(1)),t.createElement("td",{className:"protein"},(.77*d).toFixed(1)),t.createElement("td",{className:"protein"},(.015*d).toFixed(1)),t.createElement("td",{className:"protein"},(3.5*d).toFixed(1))),t.createElement("tr",{className:"hydrates"},t.createElement(dr,{food:"Spaghetti"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value5",value:m,onChange:function(e){h(e.target.value)}})),t.createElement("td",{className:"protein"},(.12*m).toFixed(1)),t.createElement("td",{className:"protein"},(.63*m).toFixed(1)),t.createElement("td",{className:"protein"},(.018*m).toFixed(1)),t.createElement("td",{className:"protein"},(3.37*m).toFixed(1))),t.createElement("tr",{className:"prot"},t.createElement(dr,{food:"Lens"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value6",value:v,onChange:function(e){y(e.target.value)}})),t.createElement("td",{className:"protein"},(.25*v).toFixed(1)),t.createElement("td",{className:"protein"},(.6*v).toFixed(1)),t.createElement("td",{className:"protein"},(.01*v).toFixed(1)),t.createElement("td",{className:"protein"},(3.4*v).toFixed(1))),t.createElement("tr",{className:"prot"},t.createElement(dr,{food:"Peas"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value7",value:A,onChange:function(e){w(e.target.value)}})),t.createElement("td",{className:"protein"},(.22*A).toFixed(1)),t.createElement("td",{className:"protein"},(.56*A).toFixed(1)),t.createElement("td",{className:"protein"},(.01*A).toFixed(1)),t.createElement("td",{className:"protein"},(3.1*A).toFixed(1))),t.createElement("tr",{className:"prot"},t.createElement(dr,{food:"Bean"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value8",value:k,onChange:function(e){C(e.target.value)}})),t.createElement("td",{className:"protein"},(.21*k).toFixed(1)),t.createElement("td",{className:"protein"},(.45*k).toFixed(1)),t.createElement("td",{className:"protein"},(.016*k).toFixed(1)),t.createElement("td",{className:"protein"},(2.7*k).toFixed(1))),t.createElement("tr",{className:"prot"},t.createElement(dr,{food:"Tuna"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value9",value:S,onChange:function(e){N(e.target.value)}})),t.createElement("td",{className:"protein"},(.23*S).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.209*S).toFixed(1)),t.createElement("td",{className:"protein"},(2.84*S).toFixed(1))),t.createElement("tr",{className:"prot"},t.createElement(dr,{food:"Chicken"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value10",value:L,onChange:function(e){_(e.target.value)}})),t.createElement("td",{className:"protein"},(.208*L).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.068*L).toFixed(1)),t.createElement("td",{className:"protein"},(1.45*L).toFixed(1))),t.createElement("tr",{className:"prot"},t.createElement(dr,{food:"Turkey"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value11",value:M,onChange:function(e){O(e.target.value)}})),t.createElement("td",{className:"protein"},(.19*M).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.01*M).toFixed(1)),t.createElement("td",{className:"protein"},(.95*M).toFixed(1))),t.createElement("tr",{className:"prot"},t.createElement(dr,{food:"Lean beef"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value12",value:F,onChange:function(e){D(e.target.value)}})),t.createElement("td",{className:"protein"},(.195*F).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.125*F).toFixed(1)),t.createElement("td",{className:"protein"},(1.19*F).toFixed(1))),t.createElement("tr",{className:"prot"},t.createElement(dr,{food:"Beef"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value13",value:R,onChange:function(e){I(e.target.value)}})),t.createElement("td",{className:"protein"},(.195*R).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.125*R).toFixed(1)),t.createElement("td",{className:"protein"},(1.91*R).toFixed(1))),t.createElement("tr",{className:"prot"},t.createElement(dr,{food:"Pork"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value14",value:$,onChange:function(e){G(e.target.value)}})),t.createElement("td",{className:"protein"},(.2*$).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.09*$).toFixed(1)),t.createElement("td",{className:"protein"},(1.61*$).toFixed(1))),t.createElement("tr",{className:"prot"},t.createElement(dr,{food:"Egg"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value15",value:U,onChange:function(e){W(e.target.value)}})),t.createElement("td",{className:"protein"},(6*U).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(5*U).toFixed(1)),t.createElement("td",{className:"protein"},(55*U*1.62).toFixed(1))),t.createElement("tr",{className:"milk"},t.createElement(dr,{food:"Butter"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value16",value:q,onChange:function(e){V(e.target.value)}})),t.createElement("td",{className:"protein"},(.01*q).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.83*q).toFixed(1)),t.createElement("td",{className:"protein"},(7.5*q).toFixed(1))),t.createElement("tr",{className:"milk"},t.createElement(dr,{food:"Milk"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value17",value:K,onChange:function(e){Z(e.target.value)}})),t.createElement("td",{className:"protein"},(.03*K).toFixed(1)),t.createElement("td",{className:"protein"},(.045*K).toFixed(1)),t.createElement("td",{className:"protein"},(.28*K).toFixed(1)),t.createElement("td",{className:"protein"},(.56*K).toFixed(1))),t.createElement("tr",{className:"milk"},t.createElement(dr,{food:"Young cheese"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value18",value:J,onChange:function(e){ee(e.target.value)}})),t.createElement("td",{className:"protein"},(.125*J).toFixed(1)),t.createElement("td",{className:"protein"},(.04*J).toFixed(1)),t.createElement("td",{className:"protein"},(.055*J).toFixed(1)),t.createElement("td",{className:"protein"},(1.15*J).toFixed(1))),t.createElement("tr",{className:"milk"},t.createElement(dr,{food:"Yogurt"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value19",value:ne,onChange:function(e){re(e.target.value)}})),t.createElement("td",{className:"protein"},(.032*ne).toFixed(1)),t.createElement("td",{className:"protein"},(.035*ne).toFixed(1)),t.createElement("td",{className:"protein"},(.028*ne).toFixed(1)),t.createElement("td",{className:"protein"},(.52*ne).toFixed(1))),t.createElement("tr",{className:"milk"},t.createElement(dr,{food:"Parmesan"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value20",value:oe,onChange:function(e){ie(e.target.value)}})),t.createElement("td",{className:"protein"},(.43*oe).toFixed(1)),t.createElement("td",{className:"protein"},(.03*oe).toFixed(1)),t.createElement("td",{className:"protein"},(.35*oe).toFixed(1)),t.createElement("td",{className:"protein"},(5*oe).toFixed(1))),t.createElement("tr",{className:"oil"},t.createElement(dr,{food:"Olive oil"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value21",value:ce,onChange:function(e){se(e.target.value)}})),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(1*ce).toFixed(1)),t.createElement("td",{className:"protein"},(8.84*ce).toFixed(1))),t.createElement("tr",{className:"oil"},t.createElement(dr,{food:"Green Olives"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value22",value:de,onChange:function(e){pe(e.target.value)}})),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.14*de).toFixed(1)),t.createElement("td",{className:"protein"},(1.46*de).toFixed(1))),t.createElement("tr",{className:"oil"},t.createElement(dr,{food:"Coconut oil"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value23",value:he,onChange:function(e){ge(e.target.value)}})),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(1*he).toFixed(1)),t.createElement("td",{className:"protein"},(8.9*he).toFixed(1)))))),t.createElement("div",{className:"container"},t.createElement("table",null,t.createElement("thead",null,t.createElement("tr",{className:"title"},t.createElement("th",null,"Groceries"),t.createElement("th",null,"g/ml"),t.createElement("th",null,"Protein"),t.createElement("th",null,"CH"),t.createElement("th",null,"Fat"),t.createElement("th",null,"Calories"))),t.createElement("tbody",null,t.createElement("tr",{className:"almond"},t.createElement(dr,{food:"Coconut"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value24",value:ye,onChange:function(e){be(e.target.value)}})),t.createElement("td",{className:"protein"},(.03*ye).toFixed(1)),t.createElement("td",{className:"protein"},(.15*ye).toFixed(1)),t.createElement("td",{className:"protein"},(.335*ye).toFixed(1)),t.createElement("td",{className:"protein"},(3.54*ye).toFixed(1))),t.createElement("tr",{className:"almond"},t.createElement(dr,{food:"Almonds"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value25",value:we,onChange:function(e){xe(e.target.value)}})),t.createElement("td",{className:"protein"},(.22*we).toFixed(1)),t.createElement("td",{className:"protein"},(.2*we).toFixed(1)),t.createElement("td",{className:"protein"},(.54*we).toFixed(1)),t.createElement("td",{className:"protein"},(6.34*we).toFixed(1))),t.createElement("tr",{className:"almond"},t.createElement(dr,{food:"Walnuts"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value26",value:Ce,onChange:function(e){Ee(e.target.value)}})),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.622*Ce).toFixed(1)),t.createElement("td",{className:"protein"},(6.77*Ce).toFixed(1))),t.createElement("tr",{className:"almond"},t.createElement(dr,{food:"Hazelnuts"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value27",value:Ne,onChange:function(e){Be(e.target.value)}})),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.605*Ne).toFixed(1)),t.createElement("td",{className:"protein"},(6.57*Ne).toFixed(1))),t.createElement("tr",{className:"almond"},t.createElement(dr,{food:"Sunflower seeds"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value28",value:_e,onChange:function(e){Pe(e.target.value)}})),t.createElement("td",{className:"protein"},(.2*_e).toFixed(1)),t.createElement("td",{className:"protein"},(.2*_e).toFixed(1)),t.createElement("td",{className:"protein"},(.515*_e).toFixed(1)),t.createElement("td",{className:"protein"},(5.84*_e).toFixed(1))),t.createElement("tr",{className:"almond"},t.createElement(dr,{food:"Flax seed"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value29",value:Oe,onChange:function(e){Te(e.target.value)}})),t.createElement("td",{className:"protein"},(.18*Oe).toFixed(1)),t.createElement("td",{className:"protein"},(.28*Oe).toFixed(1)),t.createElement("td",{className:"protein"},(.42*Oe).toFixed(1)),t.createElement("td",{className:"protein"},(5.34*Oe).toFixed(1))),t.createElement("tr",{className:"fruit"},t.createElement(dr,{food:"Banana"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value30",value:De,onChange:function(e){je(e.target.value)}})),t.createElement("td",{className:"protein"},(.01*De).toFixed(1)),t.createElement("td",{className:"protein"},(.23*De).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.89*De).toFixed(1))),t.createElement("tr",{className:"fruit"},t.createElement(dr,{food:"Apples"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value31",value:Ie,onChange:function(e){ze(e.target.value)}})),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.13*Ie).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.5*Ie).toFixed(1))),t.createElement("tr",{className:"fruit"},t.createElement(dr,{food:"Orange"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value32",value:Ge,onChange:function(e){Ye(e.target.value)}})),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.117*Ge).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.47*Ge).toFixed(1))),t.createElement("tr",{className:"fruit"},t.createElement(dr,{food:"Melon"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value33",value:We,onChange:function(e){He(e.target.value)}})),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.816*We).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.34*We).toFixed(1))),t.createElement("tr",{className:"fruit"},t.createElement(dr,{food:"Grapefruit"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value34",value:Ve,onChange:function(e){Qe(e.target.value)}})),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.07*Ve).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.28*Ve).toFixed(1))),t.createElement("tr",{className:"fruit"},t.createElement(dr,{food:"Pineapple"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value35",value:Ze,onChange:function(e){Xe(e.target.value)}})),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.126*Ze).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.48*Ze).toFixed(1))),t.createElement("tr",{className:"fruit"},t.createElement(dr,{food:"Raisins"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value36",value:et,onChange:function(e){tt(e.target.value)}})),t.createElement("td",{className:"protein"},(.016*et).toFixed(1)),t.createElement("td",{className:"protein"},(.66*et).toFixed(1)),t.createElement("td",{className:"protein"},(.01*et).toFixed(1)),t.createElement("td",{className:"protein"},(2.7*et).toFixed(1))),t.createElement("tr",{className:"carrot"},t.createElement(dr,{food:"Cabbage"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value37",value:rt,onChange:function(e){at(e.target.value)}})),t.createElement("td",{className:"protein"},(.02*rt).toFixed(1)),t.createElement("td",{className:"protein"},(.03*rt).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.22*rt).toFixed(1))),t.createElement("tr",{className:"carrot"},t.createElement(dr,{food:"Carrot"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value38",value:it,onChange:function(e){lt(e.target.value)}})),t.createElement("td",{className:"protein"},(.01*it).toFixed(1)),t.createElement("td",{className:"protein"},(.09*it).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.4*it).toFixed(1))),t.createElement("tr",{className:"carrot"},t.createElement(dr,{food:"Beetroot"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value39",value:st,onChange:function(e){ut(e.target.value)}})),t.createElement("td",{className:"protein"},(.016*st).toFixed(1)),t.createElement("td",{className:"protein"},(.1*st).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.43*st).toFixed(1))),t.createElement("tr",{className:"carrot"},t.createElement(dr,{food:"Broccoli"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value40",value:pt,onChange:function(e){ft(e.target.value)}})),t.createElement("td",{className:"protein"},(.03*pt).toFixed(1)),t.createElement("td",{className:"protein"},(.07*pt).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.34*pt).toFixed(1))),t.createElement("tr",{className:"carrot"},t.createElement(dr,{food:"Kale"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value41",value:ht,onChange:function(e){gt(e.target.value)}})),t.createElement("td",{className:"protein"},(.02*ht).toFixed(1)),t.createElement("td",{className:"protein"},(.1*ht).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.5*ht).toFixed(1))),t.createElement("tr",{className:"carrot"},t.createElement(dr,{food:"Spinach"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value42",value:yt,onChange:function(e){bt(e.target.value)}})),t.createElement("td",{className:"protein"},(.029*yt).toFixed(1)),t.createElement("td",{className:"protein"},(.036*yt).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.23*yt).toFixed(1))),t.createElement("tr",{className:"carrot"},t.createElement(dr,{food:"Zucchini"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value43",value:wt,onChange:function(e){xt(e.target.value)}})),t.createElement("td",{className:"protein"},(.01*wt).toFixed(1)),t.createElement("td",{className:"protein"},(.03*wt).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.16*wt).toFixed(1))),t.createElement("tr",{className:"carrot"},t.createElement(dr,{food:"Leek"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value44",value:Ct,onChange:function(e){Et(e.target.value)}})),t.createElement("td",{className:"protein"},(.01*Ct).toFixed(1)),t.createElement("td",{className:"protein"},(.14*Ct).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.61*Ct).toFixed(1))),t.createElement("tr",{className:"carrot"},t.createElement(dr,{food:"Eggplant"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value45",value:Nt,onChange:function(e){Bt(e.target.value)}})),t.createElement("td",{className:"protein"},(.011*Nt).toFixed(1)),t.createElement("td",{className:"protein"},(.029*Nt).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.16*Nt).toFixed(1))),t.createElement("tr",{className:"carrot"},t.createElement(dr,{food:"Tomato"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value46",value:_t,onChange:function(e){Pt(e.target.value)}})),t.createElement("td",{className:"protein"},(.0088*_t).toFixed(1)),t.createElement("td",{className:"protein"},(.039*_t).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.18*_t).toFixed(1))),t.createElement("tr",{className:"carrot"},t.createElement(dr,{food:"Tomato juice"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value47",value:Ot,onChange:function(e){Tt(e.target.value)}})),t.createElement("td",{className:"protein"},(.008*Ot).toFixed(1)),t.createElement("td",{className:"protein"},(.059*Ot).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.27*Ot).toFixed(1))),t.createElement("tr",{className:"alcohol"},t.createElement(dr,{food:"Red wine"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value48",value:Dt,onChange:function(e){jt(e.target.value)}})),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.026*Dt).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.85*Dt).toFixed(1))),t.createElement("tr",{className:"alcohol"},t.createElement(dr,{food:"Light beer"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value49",value:It,onChange:function(e){zt(e.target.value)}})),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.035*It).toFixed(1)),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(.43*It).toFixed(1))),t.createElement("tr",{className:"alcohol"},t.createElement(dr,{food:"Brandy"}),t.createElement("td",{className:"protein"},t.createElement("input",{className:"inputPro",type:"number",name:"value50",value:Gt,onChange:function(e){Yt(e.target.value)}})),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"}),t.createElement("td",{className:"protein"},(3.5*Gt).toFixed(1)))),t.createElement("tfoot",null,t.createElement("tr",{className:"title"},t.createElement("td",{style:{padding:"20px"}},"Total"),t.createElement("td",null),t.createElement("td",{className:"protein"},(Number(.076*n)+Number(.139*o)+Number(.09*c)+Number(.07*d)+Number(.012*m)+Number(.25*v)+Number(.22*A)+Number(.21*k)+Number(.023*S)+Number(.208*L)+Number(.19*M)+Number(.195*F)+Number(.195*R)+Number(.2*$)+Number(6*U)+Number(.01*q)+Number(.03*K)+Number(.125*J)+Number(.032*ne)+Number(.43*oe)+Number(.03*ye)+Number(.22*we)+Number(.2*_e)+Number(.18*Oe)+Number(.01*De)+Number(.016*et)+Number(.02*rt)+Number(.01*it)+Number(.016*st)+Number(.03*pt)+Number(.02*ht)+Number(.029*yt)+Number(.01*wt)+Number(.01*Ct)+Number(.011*Nt)+Number(.0088*_t)+Number(.008*Ot)).toFixed(1)),t.createElement("td",{className:"protein"},(Number(.78*n)+Number(.644*o)+Number(.2*c)+Number(.77*d)+Number(.063*m)+Number(.6*v)+Number(.56*A)+Number(.45*k)+Number(.045*K)+Number(.04*J)+.035*ne+Number(.03*oe)+Number(.15*ye)+Number(.2*we)+Number(.2*_e)+Number(.28*Oe)+Number(.23*De)+Number(.13*Ie)+Number(.117*Ge)+Number(.816*We)+Number(.07*Ve)+Number(.126*Ze)+Number(.66*et)+Number(.03*rt)+Number(.09*it)+Number(.1*st)+Number(.07*pt)+Number(.1*ht)+Number(.036*yt)+Number(.03*wt)+Number(.14*Ct)+Number(.029*Nt)+Number(.039*_t)+Number(.059*Ot)+Number(.026*Dt)+Number(.035*It)).toFixed(1)),t.createElement("td",{className:"protein"},(Number(.015*d)+Number(.018*m)+Number(.01*v)+Number(.01*A)+Number(.016*k)+Number(.209*S)+Number(.068*L)+Number(.01*M)+Number(.125*F)+Number(.125*R)+Number(.09*$)+Number(5*U)+Number(.83*q)+Number(.28*K)+Number(.055*J)+Number(.028*ne)+Number(.35*oe)+Number(1*ce)+Number(.14*de)+Number(1*he)+Number(.335*ye)+Number(.54*we)+Number(.622*Ce)+Number(.605*Ne)+Number(.515*_e)+Number(.42*Oe)+Number(.01*et)).toFixed(1)),t.createElement("td",{className:"protein"},(Number(3.51*n)+Number(3.74*o)+Number(.85*c)+Number(3.5*d)+Number(3.37*m)+Number(3.4*v)+Number(3.1*A)+Number(2.7*k)+Number(2.84*S)+Number(1.45*L)+Number(.95*M)+Number(1.19*F)+Number(1.91*R)+Number(1.61*$)+Number(55*U*1.62)+Number(7.5*q)+Number(.56*K)+Number(1.15*J)+Number(.52*ne)+Number(5*oe)+Number(8.84*ce)+Number(1.46*de)+Number(8.9*he)+Number(3.54*ye)+Number(6.34*we)+Number(6.77*Ce)+Number(6.57*Ne)+Number(5.84*_e)+Number(5.34*Oe)+Number(.89*De)+Number(.5*Ie)+Number(.47*Ge)+Number(.34*We)+Number(.28*Ve)+Number(.48*Ze)+Number(2.7*et)+Number(.22*rt)+Number(.4*it)+Number(.43*st)+Number(.34*pt)+Number(.5*ht)+Number(.23*yt)+Number(.16*wt)+Number(.61*Ct)+Number(.16*Nt)+Number(.18*_t)+Number(.27*Ot)+Number(.85*Dt)+Number(.43*It)+Number(3.5*Gt)).toFixed(1))))))),t.createElement("div",null))};function hr(e){return hr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},hr(e)}function gr(){gr=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,a=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",l=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var o=t&&t.prototype instanceof v?t:v,i=Object.create(o.prototype),l=new _(r||[]);return a(i,"_invoke",{value:S(e,n,l)}),i}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var p="suspendedStart",f="suspendedYield",m="executing",h="completed",g={};function v(){}function y(){}function b(){}var A={};s(A,i,(function(){return this}));var w=Object.getPrototypeOf,x=w&&w(w(P([])));x&&x!==n&&r.call(x,i)&&(A=x);var k=b.prototype=v.prototype=Object.create(A);function C(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function E(e,t){function n(a,o,i,l){var c=d(e[a],e,o);if("throw"!==c.type){var s=c.arg,u=s.value;return u&&"object"==hr(u)&&r.call(u,"__await")?t.resolve(u.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(u).then((function(e){s.value=e,i(s)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var o;a(this,"_invoke",{value:function(e,r){function a(){return new t((function(t,a){n(e,r,t,a)}))}return o=o?o.then(a,a):a()}})}function S(t,n,r){var a=p;return function(o,i){if(a===m)throw Error("Generator is already running");if(a===h){if("throw"===o)throw i;return{value:e,done:!0}}for(r.method=o,r.arg=i;;){var l=r.delegate;if(l){var c=N(l,r);if(c){if(c===g)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(a===p)throw a=h,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);a=m;var s=d(t,n,r);if("normal"===s.type){if(a=r.done?h:f,s.arg===g)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(a=h,r.method="throw",r.arg=s.arg)}}}function N(t,n){var r=n.method,a=t.iterator[r];if(a===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,N(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),g;var o=d(a,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,g;var i=o.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,g):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,g)}function B(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function L(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(B,this),this.reset(!0)}function P(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var a=-1,o=function n(){for(;++a<t.length;)if(r.call(t,a))return n.value=t[a],n.done=!1,n;return n.value=e,n.done=!0,n};return o.next=o}}throw new TypeError(hr(t)+" is not iterable")}return y.prototype=b,a(k,"constructor",{value:b,configurable:!0}),a(b,"constructor",{value:y,configurable:!0}),y.displayName=s(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,s(e,c,"GeneratorFunction")),e.prototype=Object.create(k),e},t.awrap=function(e){return{__await:e}},C(E.prototype),s(E.prototype,l,(function(){return this})),t.AsyncIterator=E,t.async=function(e,n,r,a,o){void 0===o&&(o=Promise);var i=new E(u(e,n,r,a),o);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(k),s(k,c,"Generator"),s(k,i,(function(){return this})),s(k,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=P,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(L),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function a(r,a){return l.type="throw",l.arg=t,n.next=r,a&&(n.method="next",n.arg=e),!!a}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],l=i.completion;if("root"===i.tryLoc)return a("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(c&&s){if(this.prev<i.catchLoc)return a(i.catchLoc,!0);if(this.prev<i.finallyLoc)return a(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return a(i.catchLoc,!0)}else{if(!s)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return a(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,g):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),L(n),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;L(n)}return a}}throw Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),g}},t}function vr(e,t,n,r,a,o,i){try{var l=e[o](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,a)}function yr(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,l=[],c=!0,s=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){s=!0,a=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw a}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return br(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?br(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function br(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const Ar=function(e){var n=yr((0,t.useState)([]),2),r=n[0],a=n[1],o=yr((0,t.useState)(null),2),i=(o[0],o[1]),l=e.drinkID;(0,t.useEffect)((function(){c(l)}),[l]);var c=function(){var e,t=(e=gr().mark((function e(){var t,n,r;return gr().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://www.thecocktaildb.com/api/json/v1/1/lookup.php?i=".concat(l),e.prev=1,e.next=4,or.get(t);case 4:n=e.sent,r=n.data,a(r.drinks[0]),e.next=12;break;case 9:e.prev=9,e.t0=e.catch(1),i(e.t0);case 12:case"end":return e.stop()}}),e,null,[[1,9]])})),function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function i(e){vr(o,r,a,i,l,"next",e)}function l(e){vr(o,r,a,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}();return t.createElement(t.Fragment,null,t.createElement("table",null,t.createElement("tbody",null,r.strCategory&&t.createElement("tr",null,t.createElement("td",{colSpan:2,className:"categ"},r.strCategory)),r.strMeasure1&&t.createElement("tr",null,t.createElement("td",{className:"measur"},r.strMeasure1),t.createElement("td",{className:"ingred"},r.strIngredient1)),r.strMeasure2&&t.createElement("tr",null,t.createElement("td",{className:"measur"},r.strMeasure2),t.createElement("td",{className:"ingred"},r.strIngredient2)),r.strMeasure3&&t.createElement("tr",null,t.createElement("td",{className:"measur"},r.strMeasure3),t.createElement("td",{className:"ingred"},r.strIngredient3)),r.strMeasure4&&t.createElement("tr",null,t.createElement("td",{className:"measur"},r.strMeasure4),t.createElement("td",{className:"ingred"},r.strIngredient4)),r.strMeasure5&&t.createElement("tr",null,t.createElement("td",{className:"measur"},r.strMeasure5),t.createElement("td",{className:"ingred"},r.strIngredient5)),r.strMeasure6&&t.createElement("tr",null,t.createElement("td",{className:"measur"},r.strMeasure6),t.createElement("td",{className:"ingred"},r.strIngredient6)),r.strMeasure7&&t.createElement("tr",null,t.createElement("td",{className:"measur"},r.strMeasure7),t.createElement("td",{className:"ingred"},r.strIngredient7)),r.strMeasure8&&t.createElement("tr",null,t.createElement("td",{className:"measur"},r.strMeasure8),t.createElement("td",{className:"ingred"},r.strIngredient8)),r.strMeasure9&&t.createElement("tr",null,t.createElement("td",{className:"measur"},r.strMeasure9),t.createElement("td",{className:"ingred"},r.strIngredient9)),r.strMeasure10&&t.createElement("tr",null,t.createElement("td",{className:"measur"},r.strMeasure10),t.createElement("td",{className:"ingred"},r.strIngredient10)),r.strMeasure11&&t.createElement("tr",null,t.createElement("td",{className:"measur"},r.strMeasure11),t.createElement("td",{className:"ingred"},r.strIngredient11)),r.strMeasure12&&t.createElement("tr",null,t.createElement("td",{className:"measur"},r.strMeasure12),t.createElement("td",{className:"ingred"},r.strIngredient12)),r.strMeasure13&&t.createElement("tr",null,t.createElement("td",{className:"measur"},r.strMeasure13),t.createElement("td",{className:"ingred"},r.strIngredient13)),r.strMeasure14&&t.createElement("tr",null,t.createElement("td",{className:"measur"},r.strMeasure14),t.createElement("td",{className:"ingred"},r.strIngredient14)),r.strMeasure15&&t.createElement("tr",null,t.createElement("td",{className:"measur"},r.strMeasure15),t.createElement("td",{className:"ingred"},r.strIngredient15)),t.createElement("tr",null,t.createElement("td",{colSpan:2,className:"instruc"},r.strInstructions)),r.strGlass&&t.createElement("tr",null,t.createElement("td",{colSpan:2,className:"measur",style:{paddingRight:"20px",paddingBottom:"30px"}},r.strGlass)))))};var wr=a(8587),xr=a(8168);function kr(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e)){var a=e.length;for(t=0;t<a;t++)e[t]&&(n=kr(e[t]))&&(r&&(r+=" "),r+=n)}else for(n in e)e[n]&&(r&&(r+=" "),r+=n);return r}const Cr=function(){for(var e,t,n=0,r="",a=arguments.length;n<a;n++)(e=arguments[n])&&(t=kr(e))&&(r&&(r+=" "),r+=t);return r};function Er(e,t,n=void 0){const r={};return Object.keys(e).forEach((a=>{r[a]=e[a].reduce(((e,r)=>{if(r){const a=t(r);""!==a&&e.push(a),n&&n[r]&&e.push(n[r])}return e}),[]).join(" ")})),r}var Sr=a(771),Nr=a(6461),Br=a(9453),Lr=a(1317),_r=a(4188),Pr=a(3571),Mr=a(8749);const Or={black:"#000",white:"#fff"},Tr={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#f5f5f5",A200:"#eeeeee",A400:"#bdbdbd",A700:"#616161"},Fr="#f3e5f5",Dr="#ce93d8",jr="#ba68c8",Rr="#ab47bc",Ir="#9c27b0",zr="#7b1fa2",$r="#e57373",Gr="#ef5350",Yr="#f44336",Ur="#d32f2f",Wr="#c62828",Hr="#ffb74d",qr="#ffa726",Vr="#ff9800",Qr="#f57c00",Kr="#e65100",Zr="#e3f2fd",Xr="#90caf9",Jr="#42a5f5",ea="#1976d2",ta="#1565c0",na="#4fc3f7",ra="#29b6f6",aa="#03a9f4",oa="#0288d1",ia="#01579b",la="#81c784",ca="#66bb6a",sa="#4caf50",ua="#388e3c",da="#2e7d32",pa="#1b5e20",fa=["mode","contrastThreshold","tonalOffset"],ma={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.6)",disabled:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:Or.white,default:Or.white},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},ha={text:{primary:Or.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:"#121212",default:"#121212"},action:{active:Or.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function ga(e,t,n,r){const a=r.light||r,o=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=(0,Sr.a)(e.main,a):"dark"===t&&(e.dark=(0,Sr.e$)(e.main,o)))}const va=["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"],ya={textTransform:"uppercase"},ba='"Roboto", "Helvetica", "Arial", sans-serif';function Aa(e,t){const n="function"==typeof t?t(e):t,{fontFamily:r=ba,fontSize:a=14,fontWeightLight:o=300,fontWeightRegular:i=400,fontWeightMedium:l=500,fontWeightBold:c=700,htmlFontSize:s=16,allVariants:u,pxToRem:d}=n,p=(0,wr.A)(n,va),f=a/14,m=d||(e=>e/s*f+"rem"),h=(e,t,n,a,o)=>{return(0,xr.A)({fontFamily:r,fontWeight:e,fontSize:m(t),lineHeight:n},r===ba?{letterSpacing:(i=a/t,Math.round(1e5*i)/1e5+"em")}:{},o,u);var i},g={h1:h(o,96,1.167,-1.5),h2:h(o,60,1.2,-.5),h3:h(i,48,1.167,0),h4:h(i,34,1.235,.25),h5:h(i,24,1.334,0),h6:h(l,20,1.6,.15),subtitle1:h(i,16,1.75,.15),subtitle2:h(l,14,1.57,.1),body1:h(i,16,1.5,.15),body2:h(i,14,1.43,.15),button:h(l,14,1.75,.4,ya),caption:h(i,12,1.66,.4),overline:h(i,12,2.66,1,ya),inherit:{fontFamily:"inherit",fontWeight:"inherit",fontSize:"inherit",lineHeight:"inherit",letterSpacing:"inherit"}};return(0,Lr.A)((0,xr.A)({htmlFontSize:s,pxToRem:m,fontFamily:r,fontSize:a,fontWeightLight:o,fontWeightRegular:i,fontWeightMedium:l,fontWeightBold:c},g),p,{clone:!1})}function wa(...e){return[`${e[0]}px ${e[1]}px ${e[2]}px ${e[3]}px rgba(0,0,0,0.2)`,`${e[4]}px ${e[5]}px ${e[6]}px ${e[7]}px rgba(0,0,0,0.14)`,`${e[8]}px ${e[9]}px ${e[10]}px ${e[11]}px rgba(0,0,0,0.12)`].join(",")}const xa=["none",wa(0,2,1,-1,0,1,1,0,0,1,3,0),wa(0,3,1,-2,0,2,2,0,0,1,5,0),wa(0,3,3,-2,0,3,4,0,0,1,8,0),wa(0,2,4,-1,0,4,5,0,0,1,10,0),wa(0,3,5,-1,0,5,8,0,0,1,14,0),wa(0,3,5,-1,0,6,10,0,0,1,18,0),wa(0,4,5,-2,0,7,10,1,0,2,16,1),wa(0,5,5,-3,0,8,10,1,0,3,14,2),wa(0,5,6,-3,0,9,12,1,0,3,16,2),wa(0,6,6,-3,0,10,14,1,0,4,18,3),wa(0,6,7,-4,0,11,15,1,0,4,20,3),wa(0,7,8,-4,0,12,17,2,0,5,22,4),wa(0,7,8,-4,0,13,19,2,0,5,24,4),wa(0,7,9,-4,0,14,21,2,0,5,26,4),wa(0,8,9,-5,0,15,22,2,0,6,28,5),wa(0,8,10,-5,0,16,24,2,0,6,30,5),wa(0,8,11,-5,0,17,26,2,0,6,32,5),wa(0,9,11,-5,0,18,28,2,0,7,34,6),wa(0,9,12,-6,0,19,29,2,0,7,36,6),wa(0,10,13,-6,0,20,31,3,0,8,38,7),wa(0,10,13,-6,0,21,33,3,0,8,40,7),wa(0,10,14,-6,0,22,35,3,0,8,42,7),wa(0,11,14,-7,0,23,36,3,0,9,44,8),wa(0,11,15,-7,0,24,38,3,0,9,46,8)],ka=["duration","easing","delay"],Ca={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},Ea={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function Sa(e){return`${Math.round(e)}ms`}function Na(e){if(!e)return 0;const t=e/36;return Math.round(10*(4+15*t**.25+t/5))}function Ba(e){const t=(0,xr.A)({},Ca,e.easing),n=(0,xr.A)({},Ea,e.duration);return(0,xr.A)({getAutoHeightDuration:Na,create:(e=["all"],r={})=>{const{duration:a=n.standard,easing:o=t.easeInOut,delay:i=0}=r;return(0,wr.A)(r,ka),(Array.isArray(e)?e:[e]).map((e=>`${e} ${"string"==typeof a?a:Sa(a)} ${o} ${"string"==typeof i?i:Sa(i)}`)).join(",")}},e,{easing:t,duration:n})}const La={mobileStepper:1e3,fab:1050,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500},_a=["breakpoints","mixins","spacing","palette","transitions","typography","shape"];const Pa=function(e={},...t){const{mixins:n={},palette:r={},transitions:a={},typography:o={}}=e,i=(0,wr.A)(e,_a);if(e.vars)throw new Error((0,Br.A)(18));const l=function(e){const{mode:t="light",contrastThreshold:n=3,tonalOffset:r=.2}=e,a=(0,wr.A)(e,fa),o=e.primary||function(e="light"){return"dark"===e?{main:Xr,light:Zr,dark:Jr}:{main:ea,light:Jr,dark:ta}}(t),i=e.secondary||function(e="light"){return"dark"===e?{main:Dr,light:Fr,dark:Rr}:{main:Ir,light:jr,dark:zr}}(t),l=e.error||function(e="light"){return"dark"===e?{main:Yr,light:$r,dark:Ur}:{main:Ur,light:Gr,dark:Wr}}(t),c=e.info||function(e="light"){return"dark"===e?{main:ra,light:na,dark:oa}:{main:oa,light:aa,dark:ia}}(t),s=e.success||function(e="light"){return"dark"===e?{main:ca,light:la,dark:ua}:{main:da,light:sa,dark:pa}}(t),u=e.warning||function(e="light"){return"dark"===e?{main:qr,light:Hr,dark:Qr}:{main:"#ed6c02",light:Vr,dark:Kr}}(t);function d(e){return(0,Sr.eM)(e,ha.text.primary)>=n?ha.text.primary:ma.text.primary}const p=({color:e,name:t,mainShade:n=500,lightShade:a=300,darkShade:o=700})=>{if(!(e=(0,xr.A)({},e)).main&&e[n]&&(e.main=e[n]),!e.hasOwnProperty("main"))throw new Error((0,Br.A)(11,t?` (${t})`:"",n));if("string"!=typeof e.main)throw new Error((0,Br.A)(12,t?` (${t})`:"",JSON.stringify(e.main)));return ga(e,"light",a,r),ga(e,"dark",o,r),e.contrastText||(e.contrastText=d(e.main)),e},f={dark:ha,light:ma};return(0,Lr.A)((0,xr.A)({common:(0,xr.A)({},Or),mode:t,primary:p({color:o,name:"primary"}),secondary:p({color:i,name:"secondary",mainShade:"A400",lightShade:"A200",darkShade:"A700"}),error:p({color:l,name:"error"}),warning:p({color:u,name:"warning"}),info:p({color:c,name:"info"}),success:p({color:s,name:"success"}),grey:Tr,contrastThreshold:n,getContrastText:d,augmentColor:p,tonalOffset:r},f[t]),a)}(r),c=(0,Mr.A)(e);let s=(0,Lr.A)(c,{mixins:(u=c.breakpoints,d=n,(0,xr.A)({toolbar:{minHeight:56,[u.up("xs")]:{"@media (orientation: landscape)":{minHeight:48}},[u.up("sm")]:{minHeight:64}}},d)),palette:l,shadows:xa.slice(),typography:Aa(l,o),transitions:Ba(a),zIndex:(0,xr.A)({},La)});var u,d;return s=(0,Lr.A)(s,i),s=t.reduce(((e,t)=>(0,Lr.A)(e,t)),s),s.unstable_sxConfig=(0,xr.A)({},_r.A,null==i?void 0:i.unstable_sxConfig),s.unstable_sx=function(e){return(0,Pr.A)({sx:e,theme:this})},s},Ma=Pa(),Oa="$$material",Ta=(0,Nr.Ay)({themeId:Oa,defaultTheme:Ma,rootShouldForwardProp:e=>function(e){return"ownerState"!==e&&"theme"!==e&&"sx"!==e&&"as"!==e}(e)&&"classes"!==e}),Fa=e=>{let t;return t=e<1?5.11916*e**2:4.5*Math.log(e+1)+2,(t/100).toFixed(2)};function Da(e,t){const n=(0,xr.A)({},t);return Object.keys(e).forEach((r=>{if(r.toString().match(/^(components|slots)$/))n[r]=(0,xr.A)({},e[r],n[r]);else if(r.toString().match(/^(componentsProps|slotProps)$/)){const a=e[r]||{},o=t[r];n[r]={},o&&Object.keys(o)?a&&Object.keys(a)?(n[r]=(0,xr.A)({},o),Object.keys(a).forEach((e=>{n[r][e]=Da(a[e],o[e])}))):n[r]=o:n[r]=a}else void 0===n[r]&&(n[r]=e[r])})),n}var ja=a(4848);const Ra=t.createContext(void 0);function Ia(e){return function({props:e,name:n}){return function(e){const{theme:t,name:n,props:r}=e;if(!t||!t.components||!t.components[n])return r;const a=t.components[n];return a.defaultProps?Da(a.defaultProps,r):a.styleOverrides||a.variants?r:Da(a,r)}({props:e,name:n,theme:{components:t.useContext(Ra)}})}(e)}const za=e=>e,$a=(()=>{let e=za;return{configure(t){e=t},generate:t=>e(t),reset(){e=za}}})(),Ga={active:"active",checked:"checked",completed:"completed",disabled:"disabled",error:"error",expanded:"expanded",focused:"focused",focusVisible:"focusVisible",open:"open",readOnly:"readOnly",required:"required",selected:"selected"};function Ya(e,t,n="Mui"){const r=Ga[t];return r?`${n}-${r}`:`${$a.generate(e)}-${t}`}function Ua(e,t,n="Mui"){const r={};return t.forEach((t=>{r[t]=Ya(e,t,n)})),r}function Wa(e){return Ya("MuiPaper",e)}Ua("MuiPaper",["root","rounded","outlined","elevation","elevation0","elevation1","elevation2","elevation3","elevation4","elevation5","elevation6","elevation7","elevation8","elevation9","elevation10","elevation11","elevation12","elevation13","elevation14","elevation15","elevation16","elevation17","elevation18","elevation19","elevation20","elevation21","elevation22","elevation23","elevation24"]);const Ha=["className","component","elevation","square","variant"],qa=Ta("div",{name:"MuiPaper",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],!n.square&&t.rounded,"elevation"===n.variant&&t[`elevation${n.elevation}`]]}})((({theme:e,ownerState:t})=>{var n;return(0,xr.A)({backgroundColor:(e.vars||e).palette.background.paper,color:(e.vars||e).palette.text.primary,transition:e.transitions.create("box-shadow")},!t.square&&{borderRadius:e.shape.borderRadius},"outlined"===t.variant&&{border:`1px solid ${(e.vars||e).palette.divider}`},"elevation"===t.variant&&(0,xr.A)({boxShadow:(e.vars||e).shadows[t.elevation]},!e.vars&&"dark"===e.palette.mode&&{backgroundImage:`linear-gradient(${(0,Sr.X4)("#fff",Fa(t.elevation))}, ${(0,Sr.X4)("#fff",Fa(t.elevation))})`},e.vars&&{backgroundImage:null==(n=e.vars.overlays)?void 0:n[t.elevation]}))})),Va=t.forwardRef((function(e,t){const n=Ia({props:e,name:"MuiPaper"}),{className:r,component:a="div",elevation:o=1,square:i=!1,variant:l="elevation"}=n,c=(0,wr.A)(n,Ha),s=(0,xr.A)({},n,{component:a,elevation:o,square:i,variant:l}),u=(e=>{const{square:t,elevation:n,variant:r,classes:a}=e;return Er({root:["root",r,!t&&"rounded","elevation"===r&&`elevation${n}`]},Wa,a)})(s);return(0,ja.jsx)(qa,(0,xr.A)({as:a,ownerState:s,className:Cr(u.root,r),ref:t},c))})),Qa=function(e){return"string"==typeof e};function Ka(...e){return t.useMemo((()=>e.every((e=>null==e))?null:t=>{e.forEach((e=>{!function(e,t){"function"==typeof e?e(t):e&&(e.current=t)}(e,t)}))}),e)}function Za(e){const t=function(e){return e&&e.ownerDocument||document}(e);return t.defaultView||window}const Xa="undefined"!=typeof window?t.useLayoutEffect:t.useEffect,Ja=["onChange","maxRows","minRows","style","value"];function eo(e){return parseInt(e,10)||0}const to={visibility:"hidden",position:"absolute",overflow:"hidden",height:0,top:0,left:0,transform:"translateZ(0)"},no=t.forwardRef((function(e,n){const{onChange:r,maxRows:a,minRows:o=1,style:i,value:l}=e,c=(0,wr.A)(e,Ja),{current:s}=t.useRef(null!=l),u=t.useRef(null),d=Ka(n,u),p=t.useRef(null),f=t.useRef(null),m=t.useCallback((()=>{const t=u.current,n=Za(t).getComputedStyle(t);if("0px"===n.width)return{outerHeightStyle:0,overflowing:!1};const r=f.current;r.style.width=n.width,r.value=t.value||e.placeholder||"x","\n"===r.value.slice(-1)&&(r.value+=" ");const i=n.boxSizing,l=eo(n.paddingBottom)+eo(n.paddingTop),c=eo(n.borderBottomWidth)+eo(n.borderTopWidth),s=r.scrollHeight;r.value="x";const d=r.scrollHeight;let p=s;return o&&(p=Math.max(Number(o)*d,p)),a&&(p=Math.min(Number(a)*d,p)),p=Math.max(p,d),{outerHeightStyle:p+("border-box"===i?l+c:0),overflowing:Math.abs(p-s)<=1}}),[a,o,e.placeholder]),h=t.useCallback((()=>{const e=m();if(null==(t=e)||0===Object.keys(t).length||0===t.outerHeightStyle&&!t.overflowing)return;var t;const n=e.outerHeightStyle,r=u.current;p.current!==n&&(p.current=n,r.style.height=`${n}px`),r.style.overflow=e.overflowing?"hidden":""}),[m]);return Xa((()=>{const e=()=>{h()};const t=function(e,t=166){let n;function r(...r){clearTimeout(n),n=setTimeout((()=>{e.apply(this,r)}),t)}return r.clear=()=>{clearTimeout(n)},r}(e),n=u.current,r=Za(n);let a;return r.addEventListener("resize",t),"undefined"!=typeof ResizeObserver&&(a=new ResizeObserver(e),a.observe(n)),()=>{t.clear(),cancelAnimationFrame(undefined),r.removeEventListener("resize",t),a&&a.disconnect()}}),[m,h]),Xa((()=>{h()})),(0,ja.jsxs)(t.Fragment,{children:[(0,ja.jsx)("textarea",(0,xr.A)({value:l,onChange:e=>{s||h(),r&&r(e)},ref:d,rows:o,style:i},c)),(0,ja.jsx)("textarea",{"aria-hidden":!0,className:e.className,readOnly:!0,ref:f,tabIndex:-1,style:(0,xr.A)({},to,i,{paddingTop:0,paddingBottom:0})})]})})),ro=t.createContext(void 0),ao=a(3967).A,oo=Ka,io=Xa;var lo=a(9940),co=a(4684);const so=(0,Mr.A)(),uo=function(e=so){return function(e=null){const n=t.useContext(co.T);return n&&(r=n,0!==Object.keys(r).length)?n:e;var r}(e)},po=function({styles:e,themeId:t,defaultTheme:n={}}){const r=uo(n),a="function"==typeof e?e(t&&r[t]||r):e;return(0,ja.jsx)(lo.A,{styles:a})},fo=function(e){return(0,ja.jsx)(po,(0,xr.A)({},e,{defaultTheme:Ma,themeId:Oa}))};function mo(e){return null!=e&&!(Array.isArray(e)&&0===e.length)}function ho(e){return Ya("MuiInputBase",e)}const go=Ua("MuiInputBase",["root","formControl","focused","disabled","adornedStart","adornedEnd","error","sizeSmall","multiline","colorSecondary","fullWidth","hiddenLabel","readOnly","input","inputSizeSmall","inputMultiline","inputTypeSearch","inputAdornedStart","inputAdornedEnd","inputHiddenLabel"]),vo=["aria-describedby","autoComplete","autoFocus","className","color","components","componentsProps","defaultValue","disabled","disableInjectingGlobalStyles","endAdornment","error","fullWidth","id","inputComponent","inputProps","inputRef","margin","maxRows","minRows","multiline","name","onBlur","onChange","onClick","onFocus","onKeyDown","onKeyUp","placeholder","readOnly","renderSuffix","rows","size","slotProps","slots","startAdornment","type","value"],yo=Ta("div",{name:"MuiInputBase",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.formControl&&t.formControl,n.startAdornment&&t.adornedStart,n.endAdornment&&t.adornedEnd,n.error&&t.error,"small"===n.size&&t.sizeSmall,n.multiline&&t.multiline,n.color&&t[`color${ao(n.color)}`],n.fullWidth&&t.fullWidth,n.hiddenLabel&&t.hiddenLabel]}})((({theme:e,ownerState:t})=>(0,xr.A)({},e.typography.body1,{color:(e.vars||e).palette.text.primary,lineHeight:"1.4375em",boxSizing:"border-box",position:"relative",cursor:"text",display:"inline-flex",alignItems:"center",[`&.${go.disabled}`]:{color:(e.vars||e).palette.text.disabled,cursor:"default"}},t.multiline&&(0,xr.A)({padding:"4px 0 5px"},"small"===t.size&&{paddingTop:1}),t.fullWidth&&{width:"100%"}))),bo=Ta("input",{name:"MuiInputBase",slot:"Input",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.input,"small"===n.size&&t.inputSizeSmall,n.multiline&&t.inputMultiline,"search"===n.type&&t.inputTypeSearch,n.startAdornment&&t.inputAdornedStart,n.endAdornment&&t.inputAdornedEnd,n.hiddenLabel&&t.inputHiddenLabel]}})((({theme:e,ownerState:t})=>{const n="light"===e.palette.mode,r=(0,xr.A)({color:"currentColor"},e.vars?{opacity:e.vars.opacity.inputPlaceholder}:{opacity:n?.42:.5},{transition:e.transitions.create("opacity",{duration:e.transitions.duration.shorter})}),a={opacity:"0 !important"},o=e.vars?{opacity:e.vars.opacity.inputPlaceholder}:{opacity:n?.42:.5};return(0,xr.A)({font:"inherit",letterSpacing:"inherit",color:"currentColor",padding:"4px 0 5px",border:0,boxSizing:"content-box",background:"none",height:"1.4375em",margin:0,WebkitTapHighlightColor:"transparent",display:"block",minWidth:0,width:"100%",animationName:"mui-auto-fill-cancel",animationDuration:"10ms","&::-webkit-input-placeholder":r,"&::-moz-placeholder":r,"&:-ms-input-placeholder":r,"&::-ms-input-placeholder":r,"&:focus":{outline:0},"&:invalid":{boxShadow:"none"},"&::-webkit-search-decoration":{WebkitAppearance:"none"},[`label[data-shrink=false] + .${go.formControl} &`]:{"&::-webkit-input-placeholder":a,"&::-moz-placeholder":a,"&:-ms-input-placeholder":a,"&::-ms-input-placeholder":a,"&:focus::-webkit-input-placeholder":o,"&:focus::-moz-placeholder":o,"&:focus:-ms-input-placeholder":o,"&:focus::-ms-input-placeholder":o},[`&.${go.disabled}`]:{opacity:1,WebkitTextFillColor:(e.vars||e).palette.text.disabled},"&:-webkit-autofill":{animationDuration:"5000s",animationName:"mui-auto-fill"}},"small"===t.size&&{paddingTop:1},t.multiline&&{height:"auto",resize:"none",padding:0,paddingTop:0},"search"===t.type&&{MozAppearance:"textfield"})})),Ao=(0,ja.jsx)(fo,{styles:{"@keyframes mui-auto-fill":{from:{display:"block"}},"@keyframes mui-auto-fill-cancel":{from:{display:"block"}}}}),wo=t.forwardRef((function(e,n){var r;const a=Ia({props:e,name:"MuiInputBase"}),{"aria-describedby":o,autoComplete:i,autoFocus:l,className:c,components:s={},componentsProps:u={},defaultValue:d,disabled:p,disableInjectingGlobalStyles:f,endAdornment:m,fullWidth:h=!1,id:g,inputComponent:v="input",inputProps:y={},inputRef:b,maxRows:A,minRows:w,multiline:x=!1,name:k,onBlur:C,onChange:E,onClick:S,onFocus:N,onKeyDown:B,onKeyUp:L,placeholder:_,readOnly:P,renderSuffix:M,rows:O,slotProps:T={},slots:F={},startAdornment:D,type:j="text",value:R}=a,I=(0,wr.A)(a,vo),z=null!=y.value?y.value:R,{current:$}=t.useRef(null!=z),G=t.useRef(),Y=t.useCallback((e=>{}),[]),U=oo(G,b,y.ref,Y),[W,H]=t.useState(!1),q=t.useContext(ro),V=function({props:e,states:t,muiFormControl:n}){return t.reduce(((t,r)=>(t[r]=e[r],n&&void 0===e[r]&&(t[r]=n[r]),t)),{})}({props:a,muiFormControl:q,states:["color","disabled","error","hiddenLabel","size","required","filled"]});V.focused=q?q.focused:W,t.useEffect((()=>{!q&&p&&W&&(H(!1),C&&C())}),[q,p,W,C]);const Q=q&&q.onFilled,K=q&&q.onEmpty,Z=t.useCallback((e=>{!function(e,t=!1){return e&&(mo(e.value)&&""!==e.value||t&&mo(e.defaultValue)&&""!==e.defaultValue)}(e)?K&&K():Q&&Q()}),[Q,K]);io((()=>{$&&Z({value:z})}),[z,Z,$]),t.useEffect((()=>{Z(G.current)}),[]);let X=v,J=y;x&&"input"===X&&(J=O?(0,xr.A)({type:void 0,minRows:O,maxRows:O},J):(0,xr.A)({type:void 0,maxRows:A,minRows:w},J),X=no),t.useEffect((()=>{q&&q.setAdornedStart(Boolean(D))}),[q,D]);const ee=(0,xr.A)({},a,{color:V.color||"primary",disabled:V.disabled,endAdornment:m,error:V.error,focused:V.focused,formControl:q,fullWidth:h,hiddenLabel:V.hiddenLabel,multiline:x,size:V.size,startAdornment:D,type:j}),te=(e=>{const{classes:t,color:n,disabled:r,error:a,endAdornment:o,focused:i,formControl:l,fullWidth:c,hiddenLabel:s,multiline:u,readOnly:d,size:p,startAdornment:f,type:m}=e;return Er({root:["root",`color${ao(n)}`,r&&"disabled",a&&"error",c&&"fullWidth",i&&"focused",l&&"formControl",p&&"medium"!==p&&`size${ao(p)}`,u&&"multiline",f&&"adornedStart",o&&"adornedEnd",s&&"hiddenLabel",d&&"readOnly"],input:["input",r&&"disabled","search"===m&&"inputTypeSearch",u&&"inputMultiline","small"===p&&"inputSizeSmall",s&&"inputHiddenLabel",f&&"inputAdornedStart",o&&"inputAdornedEnd",d&&"readOnly"]},ho,t)})(ee),ne=F.root||s.Root||yo,re=T.root||u.root||{},ae=F.input||s.Input||bo;return J=(0,xr.A)({},J,null!=(r=T.input)?r:u.input),(0,ja.jsxs)(t.Fragment,{children:[!f&&Ao,(0,ja.jsxs)(ne,(0,xr.A)({},re,!Qa(ne)&&{ownerState:(0,xr.A)({},ee,re.ownerState)},{ref:n,onClick:e=>{G.current&&e.currentTarget===e.target&&G.current.focus(),S&&S(e)}},I,{className:Cr(te.root,re.className,c,P&&"MuiInputBase-readOnly"),children:[D,(0,ja.jsx)(ro.Provider,{value:null,children:(0,ja.jsx)(ae,(0,xr.A)({ownerState:ee,"aria-invalid":V.error,"aria-describedby":o,autoComplete:i,autoFocus:l,defaultValue:d,disabled:V.disabled,id:g,onAnimationStart:e=>{Z("mui-auto-fill-cancel"===e.animationName?G.current:{value:"x"})},name:k,placeholder:_,readOnly:P,required:V.required,rows:O,value:z,onKeyDown:B,onKeyUp:L,type:j},J,!Qa(ae)&&{as:X,ownerState:(0,xr.A)({},ee,J.ownerState)},{ref:U,className:Cr(te.input,J.className,P&&"MuiInputBase-readOnly"),onBlur:e=>{C&&C(e),y.onBlur&&y.onBlur(e),q&&q.onBlur?q.onBlur(e):H(!1)},onChange:(e,...t)=>{if(!$){const t=e.target||G.current;if(null==t)throw new Error((0,Br.A)(1));Z({value:t.value})}y.onChange&&y.onChange(e,...t),E&&E(e,...t)},onFocus:e=>{V.disabled?e.stopPropagation():(N&&N(e),y.onFocus&&y.onFocus(e),q&&q.onFocus?q.onFocus(e):H(!0))}}))}),m,M?M((0,xr.A)({},V,{startAdornment:D})):null]}))]})})),xo=function(e){const n=t.useRef(e);return Xa((()=>{n.current=e})),t.useRef(((...e)=>(0,n.current)(...e))).current},ko={},Co=[];class Eo{constructor(){this.currentId=null,this.clear=()=>{null!==this.currentId&&(clearTimeout(this.currentId),this.currentId=null)},this.disposeEffect=()=>this.clear}static create(){return new Eo}start(e,t){this.clear(),this.currentId=setTimeout((()=>{this.currentId=null,t()}),e)}}let So=!0,No=!1;const Bo=new Eo,Lo={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function _o(e){e.metaKey||e.altKey||e.ctrlKey||(So=!0)}function Po(){So=!1}function Mo(){"hidden"===this.visibilityState&&No&&(So=!0)}const Oo=function(){const e=t.useCallback((e=>{var t;null!=e&&((t=e.ownerDocument).addEventListener("keydown",_o,!0),t.addEventListener("mousedown",Po,!0),t.addEventListener("pointerdown",Po,!0),t.addEventListener("touchstart",Po,!0),t.addEventListener("visibilitychange",Mo,!0))}),[]),n=t.useRef(!1);return{isFocusVisibleRef:n,onFocus:function(e){return!!function(e){const{target:t}=e;try{return t.matches(":focus-visible")}catch(e){}return So||function(e){const{type:t,tagName:n}=e;return!("INPUT"!==n||!Lo[t]||e.readOnly)||"TEXTAREA"===n&&!e.readOnly||!!e.isContentEditable}(t)}(e)&&(n.current=!0,!0)},onBlur:function(){return!!n.current&&(No=!0,Bo.start(100,(()=>{No=!1})),n.current=!1,!0)},ref:e}};function To(e,t){return To=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},To(e,t)}const Fo=t.createContext(null);function Do(e,n){var r=Object.create(null);return e&&t.Children.map(e,(function(e){return e})).forEach((function(e){r[e.key]=function(e){return n&&(0,t.isValidElement)(e)?n(e):e}(e)})),r}function jo(e,t,n){return null!=n[t]?n[t]:e.props[t]}function Ro(e,n,r){var a=Do(e.children),o=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,a=Object.create(null),o=[];for(var i in e)i in t?o.length&&(a[i]=o,o=[]):o.push(i);var l={};for(var c in t){if(a[c])for(r=0;r<a[c].length;r++){var s=a[c][r];l[a[c][r]]=n(s)}l[c]=n(c)}for(r=0;r<o.length;r++)l[o[r]]=n(o[r]);return l}(n,a);return Object.keys(o).forEach((function(i){var l=o[i];if((0,t.isValidElement)(l)){var c=i in n,s=i in a,u=n[i],d=(0,t.isValidElement)(u)&&!u.props.in;!s||c&&!d?s||!c||d?s&&c&&(0,t.isValidElement)(u)&&(o[i]=(0,t.cloneElement)(l,{onExited:r.bind(null,l),in:u.props.in,exit:jo(l,"exit",e),enter:jo(l,"enter",e)})):o[i]=(0,t.cloneElement)(l,{in:!1}):o[i]=(0,t.cloneElement)(l,{onExited:r.bind(null,l),in:!0,exit:jo(l,"exit",e),enter:jo(l,"enter",e)})}})),o}var Io=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},zo=function(e){var n,r;function a(t,n){var r,a=(r=e.call(this,t,n)||this).handleExited.bind(function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(r));return r.state={contextValue:{isMounting:!0},handleExited:a,firstRender:!0},r}r=e,(n=a).prototype=Object.create(r.prototype),n.prototype.constructor=n,To(n,r);var o=a.prototype;return o.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},o.componentWillUnmount=function(){this.mounted=!1},a.getDerivedStateFromProps=function(e,n){var r,a,o=n.children,i=n.handleExited;return{children:n.firstRender?(r=e,a=i,Do(r.children,(function(e){return(0,t.cloneElement)(e,{onExited:a.bind(null,e),in:!0,appear:jo(e,"appear",r),enter:jo(e,"enter",r),exit:jo(e,"exit",r)})}))):Ro(e,o,i),firstRender:!1}},o.handleExited=function(e,t){var n=Do(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var n=(0,xr.A)({},t.children);return delete n[e.key],{children:n}})))},o.render=function(){var e=this.props,n=e.component,r=e.childFactory,a=(0,wr.A)(e,["component","childFactory"]),o=this.state.contextValue,i=Io(this.state.children).map(r);return delete a.appear,delete a.enter,delete a.exit,null===n?t.createElement(Fo.Provider,{value:o},i):t.createElement(Fo.Provider,{value:o},t.createElement(n,a,i))},a}(t.Component);zo.propTypes={},zo.defaultProps={component:"div",childFactory:function(e){return e}};const $o=zo;var Go=a(7437);const Yo=Ua("MuiTouchRipple",["root","ripple","rippleVisible","ripplePulsate","child","childLeaving","childPulsate"]),Uo=["center","classes","className"];let Wo,Ho,qo,Vo,Qo=e=>e;const Ko=(0,Go.i7)(Wo||(Wo=Qo`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`)),Zo=(0,Go.i7)(Ho||(Ho=Qo`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`)),Xo=(0,Go.i7)(qo||(qo=Qo`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`)),Jo=Ta("span",{name:"MuiTouchRipple",slot:"Root"})({overflow:"hidden",pointerEvents:"none",position:"absolute",zIndex:0,top:0,right:0,bottom:0,left:0,borderRadius:"inherit"}),ei=Ta((function(e){const{className:n,classes:r,pulsate:a=!1,rippleX:o,rippleY:i,rippleSize:l,in:c,onExited:s,timeout:u}=e,[d,p]=t.useState(!1),f=Cr(n,r.ripple,r.rippleVisible,a&&r.ripplePulsate),m={width:l,height:l,top:-l/2+i,left:-l/2+o},h=Cr(r.child,d&&r.childLeaving,a&&r.childPulsate);return c||d||p(!0),t.useEffect((()=>{if(!c&&null!=s){const e=setTimeout(s,u);return()=>{clearTimeout(e)}}}),[s,c,u]),(0,ja.jsx)("span",{className:f,style:m,children:(0,ja.jsx)("span",{className:h})})}),{name:"MuiTouchRipple",slot:"Ripple"})(Vo||(Vo=Qo`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`),Yo.rippleVisible,Ko,550,(({theme:e})=>e.transitions.easing.easeInOut),Yo.ripplePulsate,(({theme:e})=>e.transitions.duration.shorter),Yo.child,Yo.childLeaving,Zo,550,(({theme:e})=>e.transitions.easing.easeInOut),Yo.childPulsate,Xo,(({theme:e})=>e.transitions.easing.easeInOut)),ti=t.forwardRef((function(e,n){const r=Ia({props:e,name:"MuiTouchRipple"}),{center:a=!1,classes:o={},className:i}=r,l=(0,wr.A)(r,Uo),[c,s]=t.useState([]),u=t.useRef(0),d=t.useRef(null);t.useEffect((()=>{d.current&&(d.current(),d.current=null)}),[c]);const p=t.useRef(!1),f=function(){const e=function(e){const n=t.useRef(ko);return n.current===ko&&(n.current=e(void 0)),n}(Eo.create).current;var n;return n=e.disposeEffect,t.useEffect(n,Co),e}(),m=t.useRef(null),h=t.useRef(null),g=t.useCallback((e=>{const{pulsate:t,rippleX:n,rippleY:r,rippleSize:a,cb:i}=e;s((e=>[...e,(0,ja.jsx)(ei,{classes:{ripple:Cr(o.ripple,Yo.ripple),rippleVisible:Cr(o.rippleVisible,Yo.rippleVisible),ripplePulsate:Cr(o.ripplePulsate,Yo.ripplePulsate),child:Cr(o.child,Yo.child),childLeaving:Cr(o.childLeaving,Yo.childLeaving),childPulsate:Cr(o.childPulsate,Yo.childPulsate)},timeout:550,pulsate:t,rippleX:n,rippleY:r,rippleSize:a},u.current)])),u.current+=1,d.current=i}),[o]),v=t.useCallback(((e={},t={},n=()=>{})=>{const{pulsate:r=!1,center:o=a||t.pulsate,fakeElement:i=!1}=t;if("mousedown"===(null==e?void 0:e.type)&&p.current)return void(p.current=!1);"touchstart"===(null==e?void 0:e.type)&&(p.current=!0);const l=i?null:h.current,c=l?l.getBoundingClientRect():{width:0,height:0,left:0,top:0};let s,u,d;if(o||void 0===e||0===e.clientX&&0===e.clientY||!e.clientX&&!e.touches)s=Math.round(c.width/2),u=Math.round(c.height/2);else{const{clientX:t,clientY:n}=e.touches&&e.touches.length>0?e.touches[0]:e;s=Math.round(t-c.left),u=Math.round(n-c.top)}if(o)d=Math.sqrt((2*c.width**2+c.height**2)/3),d%2==0&&(d+=1);else{const e=2*Math.max(Math.abs((l?l.clientWidth:0)-s),s)+2,t=2*Math.max(Math.abs((l?l.clientHeight:0)-u),u)+2;d=Math.sqrt(e**2+t**2)}null!=e&&e.touches?null===m.current&&(m.current=()=>{g({pulsate:r,rippleX:s,rippleY:u,rippleSize:d,cb:n})},f.start(80,(()=>{m.current&&(m.current(),m.current=null)}))):g({pulsate:r,rippleX:s,rippleY:u,rippleSize:d,cb:n})}),[a,g,f]),y=t.useCallback((()=>{v({},{pulsate:!0})}),[v]),b=t.useCallback(((e,t)=>{if(f.clear(),"touchend"===(null==e?void 0:e.type)&&m.current)return m.current(),m.current=null,void f.start(0,(()=>{b(e,t)}));m.current=null,s((e=>e.length>0?e.slice(1):e)),d.current=t}),[f]);return t.useImperativeHandle(n,(()=>({pulsate:y,start:v,stop:b})),[y,v,b]),(0,ja.jsx)(Jo,(0,xr.A)({className:Cr(Yo.root,o.root,i),ref:h},l,{children:(0,ja.jsx)($o,{component:null,exit:!0,children:c})}))}));function ni(e){return Ya("MuiButtonBase",e)}const ri=Ua("MuiButtonBase",["root","disabled","focusVisible"]),ai=["action","centerRipple","children","className","component","disabled","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","LinkComponent","onBlur","onClick","onContextMenu","onDragLeave","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","tabIndex","TouchRippleProps","touchRippleRef","type"],oi=Ta("button",{name:"MuiButtonBase",slot:"Root",overridesResolver:(e,t)=>t.root})({display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",boxSizing:"border-box",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle",MozAppearance:"none",WebkitAppearance:"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},[`&.${ri.disabled}`]:{pointerEvents:"none",cursor:"default"},"@media print":{colorAdjust:"exact"}}),ii=t.forwardRef((function(e,n){const r=Ia({props:e,name:"MuiButtonBase"}),{action:a,centerRipple:o=!1,children:i,className:l,component:c="button",disabled:s=!1,disableRipple:u=!1,disableTouchRipple:d=!1,focusRipple:p=!1,LinkComponent:f="a",onBlur:m,onClick:h,onContextMenu:g,onDragLeave:v,onFocus:y,onFocusVisible:b,onKeyDown:A,onKeyUp:w,onMouseDown:x,onMouseLeave:k,onMouseUp:C,onTouchEnd:E,onTouchMove:S,onTouchStart:N,tabIndex:B=0,TouchRippleProps:L,touchRippleRef:_,type:P}=r,M=(0,wr.A)(r,ai),O=t.useRef(null),T=t.useRef(null),F=oo(T,_),{isFocusVisibleRef:D,onFocus:j,onBlur:R,ref:I}=Oo(),[z,$]=t.useState(!1);s&&z&&$(!1),t.useImperativeHandle(a,(()=>({focusVisible:()=>{$(!0),O.current.focus()}})),[]);const[G,Y]=t.useState(!1);t.useEffect((()=>{Y(!0)}),[]);const U=G&&!u&&!s;function W(e,t,n=d){return xo((r=>(t&&t(r),!n&&T.current&&T.current[e](r),!0)))}t.useEffect((()=>{z&&p&&!u&&G&&T.current.pulsate()}),[u,p,z,G]);const H=W("start",x),q=W("stop",g),V=W("stop",v),Q=W("stop",C),K=W("stop",(e=>{z&&e.preventDefault(),k&&k(e)})),Z=W("start",N),X=W("stop",E),J=W("stop",S),ee=W("stop",(e=>{R(e),!1===D.current&&$(!1),m&&m(e)}),!1),te=xo((e=>{O.current||(O.current=e.currentTarget),j(e),!0===D.current&&($(!0),b&&b(e)),y&&y(e)})),ne=()=>{const e=O.current;return c&&"button"!==c&&!("A"===e.tagName&&e.href)},re=t.useRef(!1),ae=xo((e=>{p&&!re.current&&z&&T.current&&" "===e.key&&(re.current=!0,T.current.stop(e,(()=>{T.current.start(e)}))),e.target===e.currentTarget&&ne()&&" "===e.key&&e.preventDefault(),A&&A(e),e.target===e.currentTarget&&ne()&&"Enter"===e.key&&!s&&(e.preventDefault(),h&&h(e))})),oe=xo((e=>{p&&" "===e.key&&T.current&&z&&!e.defaultPrevented&&(re.current=!1,T.current.stop(e,(()=>{T.current.pulsate(e)}))),w&&w(e),h&&e.target===e.currentTarget&&ne()&&" "===e.key&&!e.defaultPrevented&&h(e)}));let ie=c;"button"===ie&&(M.href||M.to)&&(ie=f);const le={};"button"===ie?(le.type=void 0===P?"button":P,le.disabled=s):(M.href||M.to||(le.role="button"),s&&(le["aria-disabled"]=s));const ce=oo(n,I,O),se=(0,xr.A)({},r,{centerRipple:o,component:c,disabled:s,disableRipple:u,disableTouchRipple:d,focusRipple:p,tabIndex:B,focusVisible:z}),ue=(e=>{const{disabled:t,focusVisible:n,focusVisibleClassName:r,classes:a}=e,o=Er({root:["root",t&&"disabled",n&&"focusVisible"]},ni,a);return n&&r&&(o.root+=` ${r}`),o})(se);return(0,ja.jsxs)(oi,(0,xr.A)({as:ie,className:Cr(ue.root,l),ownerState:se,onBlur:ee,onClick:h,onContextMenu:q,onFocus:te,onKeyDown:ae,onKeyUp:oe,onMouseDown:H,onMouseLeave:K,onMouseUp:Q,onDragLeave:V,onTouchEnd:X,onTouchMove:J,onTouchStart:Z,ref:ce,tabIndex:s?-1:B,type:P},le,M,{children:[i,U?(0,ja.jsx)(ti,(0,xr.A)({ref:F,center:o},L)):null]}))}));function li(e){return Ya("MuiIconButton",e)}const ci=Ua("MuiIconButton",["root","disabled","colorInherit","colorPrimary","colorSecondary","colorError","colorInfo","colorSuccess","colorWarning","edgeStart","edgeEnd","sizeSmall","sizeMedium","sizeLarge"]),si=["edge","children","className","color","disabled","disableFocusRipple","size"],ui=Ta(ii,{name:"MuiIconButton",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,"default"!==n.color&&t[`color${ao(n.color)}`],n.edge&&t[`edge${ao(n.edge)}`],t[`size${ao(n.size)}`]]}})((({theme:e,ownerState:t})=>(0,xr.A)({textAlign:"center",flex:"0 0 auto",fontSize:e.typography.pxToRem(24),padding:8,borderRadius:"50%",overflow:"visible",color:(e.vars||e).palette.action.active,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest})},!t.disableRipple&&{"&:hover":{backgroundColor:e.vars?`rgba(${e.vars.palette.action.activeChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,Sr.X4)(e.palette.action.active,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},"start"===t.edge&&{marginLeft:"small"===t.size?-3:-12},"end"===t.edge&&{marginRight:"small"===t.size?-3:-12})),(({theme:e,ownerState:t})=>{var n;const r=null==(n=(e.vars||e).palette)?void 0:n[t.color];return(0,xr.A)({},"inherit"===t.color&&{color:"inherit"},"inherit"!==t.color&&"default"!==t.color&&(0,xr.A)({color:null==r?void 0:r.main},!t.disableRipple&&{"&:hover":(0,xr.A)({},r&&{backgroundColor:e.vars?`rgba(${r.mainChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,Sr.X4)(r.main,e.palette.action.hoverOpacity)},{"@media (hover: none)":{backgroundColor:"transparent"}})}),"small"===t.size&&{padding:5,fontSize:e.typography.pxToRem(18)},"large"===t.size&&{padding:12,fontSize:e.typography.pxToRem(28)},{[`&.${ci.disabled}`]:{backgroundColor:"transparent",color:(e.vars||e).palette.action.disabled}})})),di=t.forwardRef((function(e,t){const n=Ia({props:e,name:"MuiIconButton"}),{edge:r=!1,children:a,className:o,color:i="default",disabled:l=!1,disableFocusRipple:c=!1,size:s="medium"}=n,u=(0,wr.A)(n,si),d=(0,xr.A)({},n,{edge:r,color:i,disabled:l,disableFocusRipple:c,size:s}),p=(e=>{const{classes:t,disabled:n,color:r,edge:a,size:o}=e;return Er({root:["root",n&&"disabled","default"!==r&&`color${ao(r)}`,a&&`edge${ao(a)}`,`size${ao(o)}`]},li,t)})(d);return(0,ja.jsx)(ui,(0,xr.A)({className:Cr(p.root,o),centerRipple:!0,focusRipple:!c,disabled:l,ref:t},u,{ownerState:d,children:a}))}));function pi(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,l=[],c=!0,s=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){s=!0,a=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw a}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return fi(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?fi(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function fi(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}var mi=t.createContext({searchStringValue:"",setSearchStringFn:function(){}}),hi=function(e){var n=e.children,r=pi((0,t.useState)(""),2),a=r[0],o=r[1],i=pi((0,t.useState)(""),2),l=(i[0],i[1],pi((0,t.useState)(""),2));return l[0],l[1],t.createElement(mi.Provider,{value:{searchStringValue:a,setSearchStringFn:o}},n)};const gi=mi,vi=function(){var e=(0,t.useContext)(gi),n=fe(),r=(0,t.useRef)(),a=function(){if(0===r.current.value.trim().length)return!1;e.setSearchStringFn(r.current.value.trim()),n("/recipe")};return t.createElement(Va,{className:"paper",component:"form"},t.createElement(wo,{autoFocus:!0,placeholder:"Recipe",inputRef:r,onKeyDown:function(e){"Enter"===e.key&&(e.preventDefault(),a(),window.scrollTo({top:0,behavior:"smooth"}))}}),t.createElement(di,{type:"button",onClick:function(){a(),window.scrollTo({top:0,behavior:"smooth"})},"aria-label":"search"},"🍖"))},yi=function(){var e=(0,t.useContext)(gi),n=fe(),r=(0,t.useRef)(),a=function(){if(0===r.current.value.trim().length)return!1;e.setSearchStringFn(r.current.value.trim()),n("/cocktail")};return t.createElement(Va,{className:"paper",component:"form"},t.createElement(wo,{className:"base",autoFocus:!0,placeholder:"Cocktails",inputRef:r,onKeyDown:function(e){"Enter"===e.key&&(e.preventDefault(),a(),window.scrollTo({top:0,behavior:"smooth"}))}}),t.createElement(di,{type:"button",onClick:function(){a(),window.scrollTo({top:0,behavior:"smooth"})},"aria-label":"search"},"🥂"))};var bi=function(){if("undefined"!=typeof Map)return Map;function e(e,t){var n=-1;return e.some((function(e,r){return e[0]===t&&(n=r,!0)})),n}return function(){function t(){this.__entries__=[]}return Object.defineProperty(t.prototype,"size",{get:function(){return this.__entries__.length},enumerable:!0,configurable:!0}),t.prototype.get=function(t){var n=e(this.__entries__,t),r=this.__entries__[n];return r&&r[1]},t.prototype.set=function(t,n){var r=e(this.__entries__,t);~r?this.__entries__[r][1]=n:this.__entries__.push([t,n])},t.prototype.delete=function(t){var n=this.__entries__,r=e(n,t);~r&&n.splice(r,1)},t.prototype.has=function(t){return!!~e(this.__entries__,t)},t.prototype.clear=function(){this.__entries__.splice(0)},t.prototype.forEach=function(e,t){void 0===t&&(t=null);for(var n=0,r=this.__entries__;n<r.length;n++){var a=r[n];e.call(t,a[1],a[0])}},t}()}(),Ai="undefined"!=typeof window&&"undefined"!=typeof document&&window.document===document,wi=void 0!==a.g&&a.g.Math===Math?a.g:"undefined"!=typeof self&&self.Math===Math?self:"undefined"!=typeof window&&window.Math===Math?window:Function("return this")(),xi="function"==typeof requestAnimationFrame?requestAnimationFrame.bind(wi):function(e){return setTimeout((function(){return e(Date.now())}),1e3/60)},ki=["top","right","bottom","left","width","height","size","weight"],Ci="undefined"!=typeof MutationObserver,Ei=function(){function e(){this.connected_=!1,this.mutationEventsAdded_=!1,this.mutationsObserver_=null,this.observers_=[],this.onTransitionEnd_=this.onTransitionEnd_.bind(this),this.refresh=function(e){var t=!1,n=!1,r=0;function a(){t&&(t=!1,e()),n&&i()}function o(){xi(a)}function i(){var e=Date.now();if(t){if(e-r<2)return;n=!0}else t=!0,n=!1,setTimeout(o,20);r=e}return i}(this.refresh.bind(this))}return e.prototype.addObserver=function(e){~this.observers_.indexOf(e)||this.observers_.push(e),this.connected_||this.connect_()},e.prototype.removeObserver=function(e){var t=this.observers_,n=t.indexOf(e);~n&&t.splice(n,1),!t.length&&this.connected_&&this.disconnect_()},e.prototype.refresh=function(){this.updateObservers_()&&this.refresh()},e.prototype.updateObservers_=function(){var e=this.observers_.filter((function(e){return e.gatherActive(),e.hasActive()}));return e.forEach((function(e){return e.broadcastActive()})),e.length>0},e.prototype.connect_=function(){Ai&&!this.connected_&&(document.addEventListener("transitionend",this.onTransitionEnd_),window.addEventListener("resize",this.refresh),Ci?(this.mutationsObserver_=new MutationObserver(this.refresh),this.mutationsObserver_.observe(document,{attributes:!0,childList:!0,characterData:!0,subtree:!0})):(document.addEventListener("DOMSubtreeModified",this.refresh),this.mutationEventsAdded_=!0),this.connected_=!0)},e.prototype.disconnect_=function(){Ai&&this.connected_&&(document.removeEventListener("transitionend",this.onTransitionEnd_),window.removeEventListener("resize",this.refresh),this.mutationsObserver_&&this.mutationsObserver_.disconnect(),this.mutationEventsAdded_&&document.removeEventListener("DOMSubtreeModified",this.refresh),this.mutationsObserver_=null,this.mutationEventsAdded_=!1,this.connected_=!1)},e.prototype.onTransitionEnd_=function(e){var t=e.propertyName,n=void 0===t?"":t;ki.some((function(e){return!!~n.indexOf(e)}))&&this.refresh()},e.getInstance=function(){return this.instance_||(this.instance_=new e),this.instance_},e.instance_=null,e}(),Si=function(e,t){for(var n=0,r=Object.keys(t);n<r.length;n++){var a=r[n];Object.defineProperty(e,a,{value:t[a],enumerable:!1,writable:!1,configurable:!0})}return e},Ni=function(e){return e&&e.ownerDocument&&e.ownerDocument.defaultView||wi},Bi=Oi(0,0,0,0);function Li(e){return parseFloat(e)||0}function _i(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return t.reduce((function(t,n){return t+Li(e["border-"+n+"-width"])}),0)}var Pi="undefined"!=typeof SVGGraphicsElement?function(e){return e instanceof Ni(e).SVGGraphicsElement}:function(e){return e instanceof Ni(e).SVGElement&&"function"==typeof e.getBBox};function Mi(e){return Ai?Pi(e)?function(e){var t=e.getBBox();return Oi(0,0,t.width,t.height)}(e):function(e){var t=e.clientWidth,n=e.clientHeight;if(!t&&!n)return Bi;var r=Ni(e).getComputedStyle(e),a=function(e){for(var t={},n=0,r=["top","right","bottom","left"];n<r.length;n++){var a=r[n],o=e["padding-"+a];t[a]=Li(o)}return t}(r),o=a.left+a.right,i=a.top+a.bottom,l=Li(r.width),c=Li(r.height);if("border-box"===r.boxSizing&&(Math.round(l+o)!==t&&(l-=_i(r,"left","right")+o),Math.round(c+i)!==n&&(c-=_i(r,"top","bottom")+i)),!function(e){return e===Ni(e).document.documentElement}(e)){var s=Math.round(l+o)-t,u=Math.round(c+i)-n;1!==Math.abs(s)&&(l-=s),1!==Math.abs(u)&&(c-=u)}return Oi(a.left,a.top,l,c)}(e):Bi}function Oi(e,t,n,r){return{x:e,y:t,width:n,height:r}}var Ti=function(){function e(e){this.broadcastWidth=0,this.broadcastHeight=0,this.contentRect_=Oi(0,0,0,0),this.target=e}return e.prototype.isActive=function(){var e=Mi(this.target);return this.contentRect_=e,e.width!==this.broadcastWidth||e.height!==this.broadcastHeight},e.prototype.broadcastRect=function(){var e=this.contentRect_;return this.broadcastWidth=e.width,this.broadcastHeight=e.height,e},e}(),Fi=function(e,t){var n,r,a,o,i,l,c,s=(r=(n=t).x,a=n.y,o=n.width,i=n.height,l="undefined"!=typeof DOMRectReadOnly?DOMRectReadOnly:Object,c=Object.create(l.prototype),Si(c,{x:r,y:a,width:o,height:i,top:a,right:r+o,bottom:i+a,left:r}),c);Si(this,{target:e,contentRect:s})},Di=function(){function e(e,t,n){if(this.activeObservations_=[],this.observations_=new bi,"function"!=typeof e)throw new TypeError("The callback provided as parameter 1 is not a function.");this.callback_=e,this.controller_=t,this.callbackCtx_=n}return e.prototype.observe=function(e){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(e instanceof Ni(e).Element))throw new TypeError('parameter 1 is not of type "Element".');var t=this.observations_;t.has(e)||(t.set(e,new Ti(e)),this.controller_.addObserver(this),this.controller_.refresh())}},e.prototype.unobserve=function(e){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(e instanceof Ni(e).Element))throw new TypeError('parameter 1 is not of type "Element".');var t=this.observations_;t.has(e)&&(t.delete(e),t.size||this.controller_.removeObserver(this))}},e.prototype.disconnect=function(){this.clearActive(),this.observations_.clear(),this.controller_.removeObserver(this)},e.prototype.gatherActive=function(){var e=this;this.clearActive(),this.observations_.forEach((function(t){t.isActive()&&e.activeObservations_.push(t)}))},e.prototype.broadcastActive=function(){if(this.hasActive()){var e=this.callbackCtx_,t=this.activeObservations_.map((function(e){return new Fi(e.target,e.broadcastRect())}));this.callback_.call(e,t,e),this.clearActive()}},e.prototype.clearActive=function(){this.activeObservations_.splice(0)},e.prototype.hasActive=function(){return this.activeObservations_.length>0},e}(),ji="undefined"!=typeof WeakMap?new WeakMap:new bi,Ri=function e(t){if(!(this instanceof e))throw new TypeError("Cannot call a class as a function.");if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");var n=Ei.getInstance(),r=new Di(t,n,this);ji.set(this,r)};["observe","unobserve","disconnect"].forEach((function(e){Ri.prototype[e]=function(){var t;return(t=ji.get(this))[e].apply(t,arguments)}}));const Ii=void 0!==wi.ResizeObserver?wi.ResizeObserver:Ri;var zi,$i={Linear:{None:function(e){return e}},Quadratic:{In:function(e){return e*e},Out:function(e){return e*(2-e)},InOut:function(e){return(e*=2)<1?.5*e*e:-.5*(--e*(e-2)-1)}},Cubic:{In:function(e){return e*e*e},Out:function(e){return--e*e*e+1},InOut:function(e){return(e*=2)<1?.5*e*e*e:.5*((e-=2)*e*e+2)}},Quartic:{In:function(e){return e*e*e*e},Out:function(e){return 1- --e*e*e*e},InOut:function(e){return(e*=2)<1?.5*e*e*e*e:-.5*((e-=2)*e*e*e-2)}},Quintic:{In:function(e){return e*e*e*e*e},Out:function(e){return--e*e*e*e*e+1},InOut:function(e){return(e*=2)<1?.5*e*e*e*e*e:.5*((e-=2)*e*e*e*e+2)}},Sinusoidal:{In:function(e){return 1-Math.cos(e*Math.PI/2)},Out:function(e){return Math.sin(e*Math.PI/2)},InOut:function(e){return.5*(1-Math.cos(Math.PI*e))}},Exponential:{In:function(e){return 0===e?0:Math.pow(1024,e-1)},Out:function(e){return 1===e?1:1-Math.pow(2,-10*e)},InOut:function(e){return 0===e?0:1===e?1:(e*=2)<1?.5*Math.pow(1024,e-1):.5*(2-Math.pow(2,-10*(e-1)))}},Circular:{In:function(e){return 1-Math.sqrt(1-e*e)},Out:function(e){return Math.sqrt(1- --e*e)},InOut:function(e){return(e*=2)<1?-.5*(Math.sqrt(1-e*e)-1):.5*(Math.sqrt(1-(e-=2)*e)+1)}},Elastic:{In:function(e){return 0===e?0:1===e?1:-Math.pow(2,10*(e-1))*Math.sin(5*(e-1.1)*Math.PI)},Out:function(e){return 0===e?0:1===e?1:Math.pow(2,-10*e)*Math.sin(5*(e-.1)*Math.PI)+1},InOut:function(e){return 0===e?0:1===e?1:(e*=2)<1?-.5*Math.pow(2,10*(e-1))*Math.sin(5*(e-1.1)*Math.PI):.5*Math.pow(2,-10*(e-1))*Math.sin(5*(e-1.1)*Math.PI)+1}},Back:{In:function(e){var t=1.70158;return e*e*((t+1)*e-t)},Out:function(e){var t=1.70158;return--e*e*((t+1)*e+t)+1},InOut:function(e){var t=2.5949095;return(e*=2)<1?e*e*((t+1)*e-t)*.5:.5*((e-=2)*e*((t+1)*e+t)+2)}},Bounce:{In:function(e){return 1-$i.Bounce.Out(1-e)},Out:function(e){return e<1/2.75?7.5625*e*e:e<2/2.75?7.5625*(e-=1.5/2.75)*e+.75:e<2.5/2.75?7.5625*(e-=2.25/2.75)*e+.9375:7.5625*(e-=2.625/2.75)*e+.984375},InOut:function(e){return e<.5?.5*$i.Bounce.In(2*e):.5*$i.Bounce.Out(2*e-1)+.5}}},Gi="undefined"==typeof self&&"undefined"!=typeof process&&process.hrtime?function(){var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:"undefined"!=typeof self&&void 0!==self.performance&&void 0!==self.performance.now?self.performance.now.bind(self.performance):void 0!==Date.now?Date.now:function(){return(new Date).getTime()},Yi=function(){function e(){this._tweens={},this._tweensAddedDuringUpdate={}}return e.prototype.getAll=function(){var e=this;return Object.keys(this._tweens).map((function(t){return e._tweens[t]}))},e.prototype.removeAll=function(){this._tweens={}},e.prototype.add=function(e){this._tweens[e.getId()]=e,this._tweensAddedDuringUpdate[e.getId()]=e},e.prototype.remove=function(e){delete this._tweens[e.getId()],delete this._tweensAddedDuringUpdate[e.getId()]},e.prototype.update=function(e,t){void 0===e&&(e=Gi()),void 0===t&&(t=!1);var n=Object.keys(this._tweens);if(0===n.length)return!1;for(;n.length>0;){this._tweensAddedDuringUpdate={};for(var r=0;r<n.length;r++){var a=this._tweens[n[r]],o=!t;a&&!1===a.update(e,o)&&!t&&delete this._tweens[n[r]]}n=Object.keys(this._tweensAddedDuringUpdate)}return!0},e}(),Ui={Linear:function(e,t){var n=e.length-1,r=n*t,a=Math.floor(r),o=Ui.Utils.Linear;return t<0?o(e[0],e[1],r):t>1?o(e[n],e[n-1],n-r):o(e[a],e[a+1>n?n:a+1],r-a)},Bezier:function(e,t){for(var n=0,r=e.length-1,a=Math.pow,o=Ui.Utils.Bernstein,i=0;i<=r;i++)n+=a(1-t,r-i)*a(t,i)*e[i]*o(r,i);return n},CatmullRom:function(e,t){var n=e.length-1,r=n*t,a=Math.floor(r),o=Ui.Utils.CatmullRom;return e[0]===e[n]?(t<0&&(a=Math.floor(r=n*(1+t))),o(e[(a-1+n)%n],e[a],e[(a+1)%n],e[(a+2)%n],r-a)):t<0?e[0]-(o(e[0],e[0],e[1],e[1],-r)-e[0]):t>1?e[n]-(o(e[n],e[n],e[n-1],e[n-1],r-n)-e[n]):o(e[a?a-1:0],e[a],e[n<a+1?n:a+1],e[n<a+2?n:a+2],r-a)},Utils:{Linear:function(e,t,n){return(t-e)*n+e},Bernstein:function(e,t){var n=Ui.Utils.Factorial;return n(e)/n(t)/n(e-t)},Factorial:(zi=[1],function(e){var t=1;if(zi[e])return zi[e];for(var n=e;n>1;n--)t*=n;return zi[e]=t,t}),CatmullRom:function(e,t,n,r,a){var o=.5*(n-e),i=.5*(r-t),l=a*a;return(2*t-2*n+o+i)*(a*l)+(-3*t+3*n-2*o-i)*l+o*a+t}}},Wi=function(){function e(){}return e.nextId=function(){return e._nextId++},e._nextId=0,e}(),Hi=new Yi,qi=function(){function e(e,t){void 0===t&&(t=Hi),this._object=e,this._group=t,this._isPaused=!1,this._pauseStart=0,this._valuesStart={},this._valuesEnd={},this._valuesStartRepeat={},this._duration=1e3,this._initialRepeat=0,this._repeat=0,this._yoyo=!1,this._isPlaying=!1,this._reversed=!1,this._delayTime=0,this._startTime=0,this._easingFunction=$i.Linear.None,this._interpolationFunction=Ui.Linear,this._chainedTweens=[],this._onStartCallbackFired=!1,this._id=Wi.nextId(),this._isChainStopped=!1,this._goToEnd=!1}return e.prototype.getId=function(){return this._id},e.prototype.isPlaying=function(){return this._isPlaying},e.prototype.isPaused=function(){return this._isPaused},e.prototype.to=function(e,t){return this._valuesEnd=Object.create(e),void 0!==t&&(this._duration=t),this},e.prototype.duration=function(e){return this._duration=e,this},e.prototype.start=function(e){if(this._isPlaying)return this;if(this._group&&this._group.add(this),this._repeat=this._initialRepeat,this._reversed)for(var t in this._reversed=!1,this._valuesStartRepeat)this._swapEndStartRepeatValues(t),this._valuesStart[t]=this._valuesStartRepeat[t];return this._isPlaying=!0,this._isPaused=!1,this._onStartCallbackFired=!1,this._isChainStopped=!1,this._startTime=void 0!==e?"string"==typeof e?Gi()+parseFloat(e):e:Gi(),this._startTime+=this._delayTime,this._setupProperties(this._object,this._valuesStart,this._valuesEnd,this._valuesStartRepeat),this},e.prototype._setupProperties=function(e,t,n,r){for(var a in n){var o=e[a],i=Array.isArray(o),l=i?"array":typeof o,c=!i&&Array.isArray(n[a]);if("undefined"!==l&&"function"!==l){if(c){var s=n[a];if(0===s.length)continue;s=s.map(this._handleRelativeValue.bind(this,o)),n[a]=[o].concat(s)}if("object"!==l&&!i||!o||c)void 0===t[a]&&(t[a]=o),i||(t[a]*=1),r[a]=c?n[a].slice().reverse():t[a]||0;else{for(var u in t[a]=i?[]:{},o)t[a][u]=o[u];r[a]=i?[]:{},this._setupProperties(o,t[a],n[a],r[a])}}}},e.prototype.stop=function(){return this._isChainStopped||(this._isChainStopped=!0,this.stopChainedTweens()),this._isPlaying?(this._group&&this._group.remove(this),this._isPlaying=!1,this._isPaused=!1,this._onStopCallback&&this._onStopCallback(this._object),this):this},e.prototype.end=function(){return this._goToEnd=!0,this.update(1/0),this},e.prototype.pause=function(e){return void 0===e&&(e=Gi()),this._isPaused||!this._isPlaying||(this._isPaused=!0,this._pauseStart=e,this._group&&this._group.remove(this)),this},e.prototype.resume=function(e){return void 0===e&&(e=Gi()),this._isPaused&&this._isPlaying?(this._isPaused=!1,this._startTime+=e-this._pauseStart,this._pauseStart=0,this._group&&this._group.add(this),this):this},e.prototype.stopChainedTweens=function(){for(var e=0,t=this._chainedTweens.length;e<t;e++)this._chainedTweens[e].stop();return this},e.prototype.group=function(e){return this._group=e,this},e.prototype.delay=function(e){return this._delayTime=e,this},e.prototype.repeat=function(e){return this._initialRepeat=e,this._repeat=e,this},e.prototype.repeatDelay=function(e){return this._repeatDelayTime=e,this},e.prototype.yoyo=function(e){return this._yoyo=e,this},e.prototype.easing=function(e){return this._easingFunction=e,this},e.prototype.interpolation=function(e){return this._interpolationFunction=e,this},e.prototype.chain=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this._chainedTweens=e,this},e.prototype.onStart=function(e){return this._onStartCallback=e,this},e.prototype.onUpdate=function(e){return this._onUpdateCallback=e,this},e.prototype.onRepeat=function(e){return this._onRepeatCallback=e,this},e.prototype.onComplete=function(e){return this._onCompleteCallback=e,this},e.prototype.onStop=function(e){return this._onStopCallback=e,this},e.prototype.update=function(e,t){if(void 0===e&&(e=Gi()),void 0===t&&(t=!0),this._isPaused)return!0;var n,r,a=this._startTime+this._duration;if(!this._goToEnd&&!this._isPlaying){if(e>a)return!1;t&&this.start(e)}if(this._goToEnd=!1,e<this._startTime)return!0;!1===this._onStartCallbackFired&&(this._onStartCallback&&this._onStartCallback(this._object),this._onStartCallbackFired=!0),r=(e-this._startTime)/this._duration,r=0===this._duration||r>1?1:r;var o=this._easingFunction(r);if(this._updateProperties(this._object,this._valuesStart,this._valuesEnd,o),this._onUpdateCallback&&this._onUpdateCallback(this._object,r),1===r){if(this._repeat>0){for(n in isFinite(this._repeat)&&this._repeat--,this._valuesStartRepeat)this._yoyo||"string"!=typeof this._valuesEnd[n]||(this._valuesStartRepeat[n]=this._valuesStartRepeat[n]+parseFloat(this._valuesEnd[n])),this._yoyo&&this._swapEndStartRepeatValues(n),this._valuesStart[n]=this._valuesStartRepeat[n];return this._yoyo&&(this._reversed=!this._reversed),void 0!==this._repeatDelayTime?this._startTime=e+this._repeatDelayTime:this._startTime=e+this._delayTime,this._onRepeatCallback&&this._onRepeatCallback(this._object),!0}this._onCompleteCallback&&this._onCompleteCallback(this._object);for(var i=0,l=this._chainedTweens.length;i<l;i++)this._chainedTweens[i].start(this._startTime+this._duration);return this._isPlaying=!1,!1}return!0},e.prototype._updateProperties=function(e,t,n,r){for(var a in n)if(void 0!==t[a]){var o=t[a]||0,i=n[a],l=Array.isArray(e[a]),c=Array.isArray(i);!l&&c?e[a]=this._interpolationFunction(i,r):"object"==typeof i&&i?this._updateProperties(e[a],o,i,r):"number"==typeof(i=this._handleRelativeValue(o,i))&&(e[a]=o+(i-o)*r)}},e.prototype._handleRelativeValue=function(e,t){return"string"!=typeof t?t:"+"===t.charAt(0)||"-"===t.charAt(0)?e+parseFloat(t):parseFloat(t)},e.prototype._swapEndStartRepeatValues=function(e){var t=this._valuesStartRepeat[e],n=this._valuesEnd[e];this._valuesStartRepeat[e]="string"==typeof n?this._valuesStartRepeat[e]+parseFloat(n):this._valuesEnd[e],this._valuesEnd[e]=t},e}(),Vi=(Wi.nextId,Hi);function Qi(){return Qi=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Qi.apply(this,arguments)}Vi.getAll.bind(Vi),Vi.removeAll.bind(Vi),Vi.add.bind(Vi),Vi.remove.bind(Vi),Vi.update.bind(Vi);var Ki=function(e,n){return n&&n<t.Children.count(e)?n:0},Zi={linear:$i.Linear.None,ease:$i.Quadratic.InOut,"ease-in":$i.Quadratic.In,"ease-out":$i.Quadratic.Out,cubic:$i.Cubic.InOut,"cubic-in":$i.Cubic.In,"cubic-out":$i.Cubic.Out},Xi=function(e){return e?Zi[e]:Zi.linear},Ji=function(e,n,r){var a=e.prevArrow,o=e.infinite,i=n<=0&&!o,l={"data-type":"prev","aria-label":"Previous Slide",disabled:i,onClick:r};if(a)return t.cloneElement(a,Qi({className:(a.props.className||"")+" nav "+(i?"disabled":"")},l));var c="nav default-nav "+(i?"disabled":"");return t.createElement("button",Object.assign({type:"button",className:c},l),t.createElement("svg",{width:"24",height:"24",viewBox:"0 0 24 24"},t.createElement("path",{d:"M16.67 0l2.83 2.829-9.339 9.175 9.339 9.167-2.83 2.829-12.17-11.996z"})))},el=function(e,n,r,a){var o=e.nextArrow,i=e.infinite,l=e.children,c=1;a?c=null==a?void 0:a.settings.slidesToScroll:"slidesToScroll"in e&&(c=e.slidesToScroll||1);var s=n>=t.Children.count(l)-c&&!i,u={"data-type":"next","aria-label":"Next Slide",disabled:s,onClick:r};if(o)return t.cloneElement(o,Qi({className:(o.props.className||"")+" nav "+(s?"disabled":"")},u));var d="nav default-nav "+(s?"disabled":"");return t.createElement("button",Object.assign({type:"button",className:d},u),t.createElement("svg",{width:"24",height:"24",viewBox:"0 0 24 24"},t.createElement("path",{d:"M5 3l3.057-3 11.943 12-11.943 12-3.057-3 9-9z"})))},tl=function(e,n,r,a){var o=e.children,i=e.indicators,l=1;a?l=null==a?void 0:a.settings.slidesToScroll:"slidesToScroll"in e&&(l=e.slidesToScroll||1);var c=Math.ceil(t.Children.count(o)/l);return t.createElement("ul",{className:"indicators"},Array.from({length:c},(function(e,a){var o={"data-key":a,"aria-label":"Go to slide "+(a+1),onClick:r},c=Math.floor((n+l-1)/l)===a;return"function"==typeof i?function(e,n,r,a){return t.cloneElement(a,Qi({className:a.props.className+" "+(e?"active":""),key:n},r))}(c,a,o,i(a)):function(e,n,r){return t.createElement("li",{key:n},t.createElement("button",Object.assign({type:"button",className:"each-slideshow-indicator "+(e?"active":"")},r)))}(c,a,o)})))},nl={duration:5e3,transitionDuration:1e3,defaultIndex:0,infinite:!0,autoplay:!0,indicators:!1,arrows:!0,pauseOnHover:!0,easing:"linear",canSwipe:!0,cssClass:"",responsive:[]},rl=t.forwardRef((function(e,n){var r=(0,t.useState)(Ki(e.children,e.defaultIndex)),a=r[0],o=r[1],i=(0,t.useRef)(null),l=(0,t.useRef)(null),c=(0,t.useRef)(new Yi),s=(0,t.useRef)(),u=(0,t.useRef)(),d=(0,t.useMemo)((function(){return t.Children.count(e.children)}),[e.children]),p=(0,t.useCallback)((function(){if(l.current&&i.current){var e=i.current.clientWidth,t=e*d;l.current.style.width=t+"px";for(var n=0;n<l.current.children.length;n++){var r=l.current.children[n];r&&(r.style.width=e+"px",r.style.left=n*-e+"px",r.style.display="block")}}}),[i,l,d]),f=(0,t.useCallback)((function(){i.current&&(u.current=new Ii((function(e){e&&p()})),u.current.observe(i.current))}),[i,p]),m=(0,t.useCallback)((function(){var n=e.autoplay,r=e.children,o=e.duration,i=e.infinite;n&&t.Children.count(r)>1&&(i||a<t.Children.count(r)-1)&&(s.current=setTimeout(v,o))}),[e,a]);(0,t.useEffect)((function(){return f(),function(){c.current.removeAll(),clearTimeout(s.current),h()}}),[f,c]),(0,t.useEffect)((function(){clearTimeout(s.current),m()}),[a,e.autoplay,m]),(0,t.useEffect)((function(){p()}),[d,p]),(0,t.useImperativeHandle)(n,(function(){return{goNext:function(){v()},goBack:function(){y()},goTo:function(e,t){null!=t&&t.skipTransition?o(e):x(e)}}}));var h=function(){u.current&&i.current&&u.current.unobserve(i.current)},g=function(){e.pauseOnHover&&clearTimeout(s.current)},v=function(){var n=e.children;(e.infinite||a!==t.Children.count(n)-1)&&w((a+1)%t.Children.count(n))},y=function(){var n=e.children;(e.infinite||0!==a)&&w(0===a?t.Children.count(n)-1:a-1)},b=function(e){"prev"===e.currentTarget.dataset.type?y():v()},A=function e(){requestAnimationFrame(e),c.current.update()},w=function(t){if(!c.current.getAll().length){var n;null!=(n=l.current)&&n.children[t]||(t=0),clearTimeout(s.current),A();var r=new qi({opacity:0,scale:1},c.current).to({opacity:1,scale:e.scale},e.transitionDuration).onUpdate((function(e){l.current&&(l.current.children[t].style.opacity=e.opacity,l.current.children[a].style.opacity=1-e.opacity,l.current.children[a].style.transform="scale("+e.scale+")")}));r.easing(Xi(e.easing)),r.onStart((function(){"function"==typeof e.onStartChange&&e.onStartChange(a,t)})),r.onComplete((function(){l.current&&(o(t),l.current.children[a].style.transform="scale(1)"),"function"==typeof e.onChange&&e.onChange(a,t)})),r.start()}},x=function(e){e!==a&&w(e)};return t.createElement("div",{dir:"ltr","aria-roledescription":"carousel"},t.createElement("div",{className:"react-slideshow-container "+(e.cssClass||""),onMouseEnter:g,onMouseOver:g,onMouseLeave:function(){var t=e.pauseOnHover,n=e.autoplay,r=e.duration;t&&n&&(s.current=setTimeout((function(){return v()}),r))}},e.arrows&&Ji(e,a,b),t.createElement("div",{className:"react-slideshow-fadezoom-wrapper "+e.cssClass,ref:i},t.createElement("div",{className:"react-slideshow-fadezoom-images-wrap",ref:l},(t.Children.map(e.children,(function(e){return e}))||[]).map((function(e,n){return t.createElement("div",{style:{opacity:n===a?"1":"0",zIndex:n===a?"1":"0"},"data-index":n,key:n,"aria-roledescription":"slide","aria-hidden":n===a?"false":"true"},e)})))),e.arrows&&el(e,a,b)),e.indicators&&tl(e,a,(function(e){var t=e.currentTarget;t.dataset.key&&parseInt(t.dataset.key)!==a&&x(parseInt(t.dataset.key))})))}));rl.defaultProps=nl,t.forwardRef((function(e,n){return t.createElement(rl,Object.assign({},e,{scale:1,ref:n}))})).defaultProps=nl,t.forwardRef((function(e,n){return t.createElement(rl,Object.assign({},e,{ref:n}))})).defaultProps=nl;var al=t.forwardRef((function(e,n){var r,a=(0,t.useState)(Ki(e.children,e.defaultIndex)),o=a[0],i=a[1],l=(0,t.useState)(0),c=l[0],s=l[1],u=(0,t.useRef)(null),d=(0,t.useRef)(null),p=(0,t.useRef)(new Yi),f=(0,t.useMemo)((function(){return function(e,t){if("undefined"!=typeof window&&Array.isArray(t))return t.find((function(t){return t.breakpoint<=e}))}(c,e.responsive)}),[c,e.responsive]),m=(0,t.useMemo)((function(){return f?f.settings.slidesToScroll:e.slidesToScroll||1}),[f,e.slidesToScroll]),h=(0,t.useMemo)((function(){return f?f.settings.slidesToShow:e.slidesToShow||1}),[f,e.slidesToShow]),g=(0,t.useMemo)((function(){return t.Children.count(e.children)}),[e.children]),v=(0,t.useMemo)((function(){return c/h}),[c,h]),y=(0,t.useRef)(),b=(0,t.useRef)(),A=!1,w=0,x=e.vertical?"translateY":"translateX",k=e.vertical?"clientY":"clientX",C=e.vertical?"pageY":"pageX",E=(0,t.useCallback)((function(){if(d.current){var t=c*d.current.children.length,n=e.vertical?"height":"width";d.current.style[n]=t+"px",e.vertical&&u.current&&(u.current.style[n]=c+"px");for(var r=0;r<d.current.children.length;r++){var a=d.current.children[r];a&&(e.vertical||(a.style[n]=v+"px"),a.style.display="block")}}}),[c,v]),S=(0,t.useCallback)((function(){u.current&&(b.current=new Ii((function(e){e&&D()})),b.current.observe(u.current))}),[u]),N=(0,t.useCallback)((function(){var t=e.autoplay,n=e.infinite,r=e.duration;t&&(n||o<g-1)&&(y.current=setTimeout(P,r))}),[e,g,o]);(0,t.useEffect)((function(){E()}),[c,E]),(0,t.useEffect)((function(){return S(),function(){p.current.removeAll(),clearTimeout(y.current),B()}}),[u,S,p]),(0,t.useEffect)((function(){clearTimeout(y.current),N()}),[o,c,e.autoplay,N]),(0,t.useImperativeHandle)(n,(function(){return{goNext:function(){P()},goBack:function(){M()},goTo:function(e,t){null!=t&&t.skipTransition?i(e):O(e)}}}));var B=function(){b&&u.current&&b.current.unobserve(u.current)},L=function(){e.pauseOnHover&&clearTimeout(y.current)},_=function(t){var n;if(e.canSwipe&&A&&(n=window.TouchEvent&&t.nativeEvent instanceof TouchEvent?t.nativeEvent.touches[0][C]:t.nativeEvent[k])&&r){var a=v*(o+$()),i=n-r;if(!e.infinite&&o===g-m&&i<0)return;if(!e.infinite&&0===o&&i>0)return;a-=w=i,d.current.style.transform=x+"(-"+a+"px)"}},P=function(){if(e.infinite||o!==g-m){var t=T(o+m);z(t)}},M=function(){if(e.infinite||0!==o){var t=o-m;t%m&&(t=Math.ceil(t/m)*m),z(t)}},O=function(e){z(T(e))},T=function(e){return e<g&&e+m>g&&(g-m)%m?g-m:e},F=function(e){"next"===e.currentTarget.dataset.type?P():M()},D=function(){var t=e.vertical?"clientHeight":"clientWidth";e.vertical?d.current&&s(d.current.children[0][t]):u.current&&s(u.current[t])},j=function(t){e.canSwipe&&(r=window.TouchEvent&&t.nativeEvent instanceof TouchEvent?t.nativeEvent.touches[0][C]:t.nativeEvent[k],clearTimeout(y.current),A=!0)},R=function(){e.canSwipe&&(A=!1,Math.abs(w)/c>.2?w<0?P():M():Math.abs(w)>0&&z(o,300))},I=function e(){requestAnimationFrame(e),p.current.update()},z=function(t,n){var r=n||e.transitionDuration,a=o,l=p.current.getAll();if(u.current){var c=e.vertical?"clientHeight":"clientWidth",s=u.current[c]/h;if(!l.length){clearTimeout(y.current);var f={margin:-s*(a+$())+w},v=new qi(f,p.current).to({margin:-s*(t+$())},r).onUpdate((function(e){d.current&&(d.current.style.transform=x+"("+e.margin+"px)")}));v.easing(Xi(e.easing)),I();var b=t;b<0?b=g-m:b>=g&&(b=0),v.onStart((function(){"function"==typeof e.onStartChange&&e.onStartChange(o,b)})),v.onComplete((function(){w=0,"function"==typeof e.onChange&&e.onChange(o,b),i(b)})),v.start()}}},$=function(){return e.infinite?h:0},G={transform:x+"(-"+(o+$())*v+"px)"};return t.createElement("div",{dir:"ltr","aria-roledescription":"carousel"},t.createElement("div",{className:"react-slideshow-container",onMouseEnter:L,onMouseOver:L,onMouseLeave:function(){A?R():e.pauseOnHover&&e.autoplay&&(y.current=setTimeout(P,e.duration))},onMouseDown:j,onMouseUp:R,onMouseMove:_,onTouchStart:j,onTouchEnd:R,onTouchCancel:R,onTouchMove:_},e.arrows&&Ji(e,o,F),t.createElement("div",{className:"react-slideshow-wrapper slide "+(e.cssClass||""),ref:u},t.createElement("div",{className:"images-wrap "+(e.vertical?"vertical":"horizontal"),style:G,ref:d},e.infinite&&t.Children.toArray(e.children).slice(-h).map((function(e,n){return t.createElement("div",{"data-index":n-h,"aria-roledescription":"slide","aria-hidden":"true",key:n-h},e)})),(t.Children.map(e.children,(function(e){return e}))||[]).map((function(e,n){var r=function(e){return e<o+h&&e>=o}(n);return t.createElement("div",{"data-index":n,key:n,className:r?"active":"","aria-roledescription":"slide","aria-hidden":r?"false":"true"},e)})),function(){if(e.infinite||h!==m)return t.Children.toArray(e.children).slice(0,h).map((function(e,n){return t.createElement("div",{"data-index":g+n,"aria-roledescription":"slide","aria-hidden":"true",key:g+n},e)}))}())),e.arrows&&el(e,o,F,f)),!!e.indicators&&tl(e,o,(function(e){var t=e.currentTarget;if(t.dataset.key){var n=parseInt(t.dataset.key);O(n*m)}}),f))}));al.defaultProps=nl;var ol=a(5807),il={};il.styleTagTransform=g(),il.setAttributes=p(),il.insert=u().bind(null,"head"),il.domAPI=c(),il.insertStyleElement=m(),i()(ol.A,il),ol.A&&ol.A.locals&&ol.A.locals;var ll={cm:!0,mm:!0,in:!0,px:!0,pt:!0,pc:!0,em:!0,ex:!0,ch:!0,rem:!0,vw:!0,vh:!0,vmin:!0,vmax:!0,"%":!0};function cl(e){if("number"==typeof e)return{value:e,unit:"px"};var t,n=(e.match(/^[0-9.]*/)||"").toString();t=n.includes(".")?parseFloat(n):parseInt(n,10);var r=(e.match(/[^0-9]*$/)||"").toString();return ll[r]?{value:t,unit:r}:(console.warn("React Spinners: ".concat(e," is not a valid css value. Defaulting to ").concat(t,"px.")),{value:t,unit:"px"})}function sl(e){var t=cl(e);return"".concat(t.value).concat(t.unit)}var ul=function(e,t,n){var r="react-spinners-".concat(e,"-").concat(n);if("undefined"==typeof window||!window.document)return r;var a=document.createElement("style");document.head.appendChild(a);var o=a.sheet,i="\n    @keyframes ".concat(r," {\n      ").concat(t,"\n    }\n  ");return o&&o.insertRule(i,0),r},dl=function(){return dl=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},dl.apply(this,arguments)},pl=[ul("PacmanLoader","0% {transform: rotate(0deg)} 50% {transform: rotate(-44deg)}","pacman-1"),ul("PacmanLoader","0% {transform: rotate(0deg)} 50% {transform: rotate(44deg)}","pacman-2")];const fl=function(e){var n=e.loading,r=void 0===n||n,a=e.color,o=void 0===a?"#000000":a,i=e.speedMultiplier,l=void 0===i?1:i,c=e.cssOverride,s=void 0===c?{}:c,u=e.size,d=void 0===u?25:u,p=e.margin,f=void 0===p?2:p,m=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n}(e,["loading","color","speedMultiplier","cssOverride","size","margin"]),h=cl(d),g=h.value,v=h.unit,y=dl({display:"inherit",position:"relative",fontSize:0,height:"".concat(2*g).concat(v),width:"".concat(2*g).concat(v)},s),b=ul("PacmanLoader","75% {opacity: 0.7}\n    100% {transform: translate(".concat("".concat(-4*g).concat(v),", ").concat("".concat(-g/4).concat(v),")}"),"ball"),A=function(e){return{width:"".concat(g/3).concat(v),height:"".concat(g/3).concat(v),backgroundColor:o,margin:sl(f),borderRadius:"100%",transform:"translate(0, ".concat("".concat(-g/4).concat(v),")"),position:"absolute",top:"".concat(g).concat(v),left:"".concat(4*g).concat(v),animation:"".concat(b," ").concat(1/l,"s ").concat(.25*e,"s infinite linear"),animationFillMode:"both"}},w="".concat(sl(d)," solid transparent"),x="".concat(sl(d)," solid ").concat(o),k=function(e){return{width:0,height:0,borderRight:w,borderTop:0===e?w:x,borderLeft:x,borderBottom:0===e?x:w,borderRadius:sl(d),position:"absolute",animation:"".concat(pl[e]," ").concat(.8/l,"s infinite ease-in-out"),animationFillMode:"both"}},C=k(0),E=k(1);return r?t.createElement("span",dl({style:y},m),t.createElement("span",{style:C}),t.createElement("span",{style:E}),t.createElement("span",{style:A(2)}),t.createElement("span",{style:A(3)}),t.createElement("span",{style:A(4)}),t.createElement("span",{style:A(5)})):null},ml=function(){return t.createElement(t.Fragment,null,t.createElement("div",{className:"loader"},t.createElement(fl,{color:"#8cdd84",size:"50px",speedMultiplier:"1.2"})))},hl=a.p+"20530258fd1959d5a9d6f42398412139.jpg",gl=a.p+"4f31357b982294e6a7c9305c23c5ecc8.jpg",vl=a.p+"f25c68470a32d86c37be51ff058b1135.jpg",yl=a.p+"45d0efc1e243265069172683be89c9d4.jpg",bl=a.p+"f9f886401acaff743fa0c80ce3f796f7.jpg",Al=a.p+"b4dfa0859a8782432b92701ffc87e2bf.jpg",wl=a.p+"d1975d906567f4a1288da566448b305f.jpg",xl=a.p+"24cb4809c6347f41fc974d7419506419.jpg",kl=a.p+"a863cafedcb502f080c57ab6b5ef4bd6.jpg";function Cl(e){return Cl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Cl(e)}function El(){El=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,a=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",l=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var o=t&&t.prototype instanceof v?t:v,i=Object.create(o.prototype),l=new _(r||[]);return a(i,"_invoke",{value:S(e,n,l)}),i}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var p="suspendedStart",f="suspendedYield",m="executing",h="completed",g={};function v(){}function y(){}function b(){}var A={};s(A,i,(function(){return this}));var w=Object.getPrototypeOf,x=w&&w(w(P([])));x&&x!==n&&r.call(x,i)&&(A=x);var k=b.prototype=v.prototype=Object.create(A);function C(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function E(e,t){function n(a,o,i,l){var c=d(e[a],e,o);if("throw"!==c.type){var s=c.arg,u=s.value;return u&&"object"==Cl(u)&&r.call(u,"__await")?t.resolve(u.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(u).then((function(e){s.value=e,i(s)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var o;a(this,"_invoke",{value:function(e,r){function a(){return new t((function(t,a){n(e,r,t,a)}))}return o=o?o.then(a,a):a()}})}function S(t,n,r){var a=p;return function(o,i){if(a===m)throw Error("Generator is already running");if(a===h){if("throw"===o)throw i;return{value:e,done:!0}}for(r.method=o,r.arg=i;;){var l=r.delegate;if(l){var c=N(l,r);if(c){if(c===g)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(a===p)throw a=h,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);a=m;var s=d(t,n,r);if("normal"===s.type){if(a=r.done?h:f,s.arg===g)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(a=h,r.method="throw",r.arg=s.arg)}}}function N(t,n){var r=n.method,a=t.iterator[r];if(a===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,N(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),g;var o=d(a,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,g;var i=o.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,g):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,g)}function B(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function L(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(B,this),this.reset(!0)}function P(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var a=-1,o=function n(){for(;++a<t.length;)if(r.call(t,a))return n.value=t[a],n.done=!1,n;return n.value=e,n.done=!0,n};return o.next=o}}throw new TypeError(Cl(t)+" is not iterable")}return y.prototype=b,a(k,"constructor",{value:b,configurable:!0}),a(b,"constructor",{value:y,configurable:!0}),y.displayName=s(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,s(e,c,"GeneratorFunction")),e.prototype=Object.create(k),e},t.awrap=function(e){return{__await:e}},C(E.prototype),s(E.prototype,l,(function(){return this})),t.AsyncIterator=E,t.async=function(e,n,r,a,o){void 0===o&&(o=Promise);var i=new E(u(e,n,r,a),o);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(k),s(k,c,"Generator"),s(k,i,(function(){return this})),s(k,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=P,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(L),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function a(r,a){return l.type="throw",l.arg=t,n.next=r,a&&(n.method="next",n.arg=e),!!a}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],l=i.completion;if("root"===i.tryLoc)return a("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(c&&s){if(this.prev<i.catchLoc)return a(i.catchLoc,!0);if(this.prev<i.finallyLoc)return a(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return a(i.catchLoc,!0)}else{if(!s)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return a(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,g):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),L(n),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;L(n)}return a}}throw Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),g}},t}function Sl(e,t,n,r,a,o,i){try{var l=e[o](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,a)}function Nl(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,l=[],c=!0,s=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){s=!0,a=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw a}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Bl(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Bl(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Bl(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const Ll=function(){var e=Nl((0,t.useState)(null),2),n=(e[0],e[1]),r=Nl((0,t.useState)([]),2),a=r[0],o=r[1],i=Nl((0,t.useState)([]),2),l=(i[0],i[1]),c=Nl((0,t.useState)([]),2),s=c[0],u=c[1],d=Nl((0,t.useState)([]),2),p=(d[0],d[1]),f=Nl((0,t.useState)([]),2),m=f[0],h=f[1],g=Nl((0,t.useState)(!0),2),v=g[0],y=g[1],b=fe();(0,t.useEffect)((function(){A()}),[]);var A=function(){var e,t=(e=El().mark((function e(){var t,r,a,i,c,s,d,f,m,g,v,b,A,w;return El().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://www.themealdb.com/api/json/v1/1/search.php?f=f",r="https://www.themealdb.com/api/json/v1/1/random.php",a="https://www.themealdb.com/api/json/v1/1/list.php?a=list",i="https://www.themealdb.com/api/json/v1/1/categories.php",e.prev=5,e.next=8,or.get("https://www.thecocktaildb.com/api/json/v1/1/random.php");case 8:return c=e.sent,e.next=11,or.get(t);case 11:return s=e.sent,e.next=14,or.get(r);case 14:return d=e.sent,e.next=17,or.get(a);case 17:return f=e.sent,e.next=20,or.get(i);case 20:m=e.sent,g=c.data,v=s.data,b=d.data.meals,A=f.data.meals,w=m.data.categories,o(g.drinks),l(v.meals),u(b),p(A),h(w),y(!1),e.next=37;break;case 34:e.prev=34,e.t0=e.catch(5),n(e.t0);case 37:case"end":return e.stop()}}),e,null,[[5,34]])})),function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function i(e){Sl(o,r,a,i,l,"next",e)}function l(e){Sl(o,r,a,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),w=function(e){var t="home/".concat(e);b(t)},x=function(e){var t="home3/".concat(e);b(t)};return v?t.createElement(ml,null):t.createElement(t.Fragment,null,t.createElement("div",{className:"home"},t.createElement("div",{className:"slide-container"},t.createElement(al,null,t.createElement("div",null,t.createElement("img",{style:{width:"100%"},src:hl})),t.createElement("div",null,t.createElement("img",{style:{width:"100%"},src:gl})),t.createElement("div",null,t.createElement("img",{style:{width:"100%"},src:vl})),t.createElement("div",null,t.createElement("img",{style:{width:"100%"},src:yl})),t.createElement("div",null,t.createElement("img",{style:{width:"100%"},src:bl})),t.createElement("div",null,t.createElement("img",{style:{width:"100%"},src:Al})),t.createElement("div",null,t.createElement("img",{style:{width:"100%"},src:wl})),t.createElement("div",null,t.createElement("img",{style:{width:"100%"},src:xl})),t.createElement("div",null,t.createElement("img",{style:{width:"100%"},src:kl}))))),t.createElement("div",{className:"home"},t.createElement("div",null,t.createElement("h1",null,"Welcome to"),t.createElement("h2",null,"DISH & DRINK"))),t.createElement("div",{className:"titleLine"},t.createElement("h1",null,"Today's recommendation"),t.createElement("h1",null,t.createElement("hr",null))),t.createElement("div",{className:"home"},t.createElement("div",{className:"suggestion"},s.map((function(e,n){return t.createElement("div",{key:n},t.createElement("div",{className:"drink"},t.createElement("img",{src:e.strMealThumb,className:"sugestImg",onClick:function(){w(e.idMeal),window.scrollTo({top:0,behavior:"smooth"})}}),t.createElement("p",{className:"drinkLink",onClick:function(){w(e.idMeal),window.scrollTo({top:0,behavior:"smooth"})}},e.strMeal)))}))),t.createElement("div",{className:"suggestion"},a.map((function(e,n){return t.createElement("div",{key:n},t.createElement("div",{className:"drink"},t.createElement("img",{src:e.strDrinkThumb}),t.createElement("p",{className:"drinkLink"},e.strDrink),t.createElement("div",{className:"drinkDown"},t.createElement(Ar,{drinkID:e.idDrink}))))}))),t.createElement("div",{className:"homeSearch"},t.createElement("div",{className:"cont"},t.createElement("p",null," Search cocktails and recipes by name, ingredients and first letter")),t.createElement("div",{className:"cont"},t.createElement(vi,null),t.createElement(yi,null)))),t.createElement("div",{className:"titleLine"},t.createElement("h1",null,"Dish category"),t.createElement("h1",null,t.createElement("hr",null))),t.createElement("div",{className:"recipe"},m.map((function(e,n){return t.createElement("div",{key:n,className:"resHome"},t.createElement("div",{className:"category"},t.createElement("div",{className:"recipeName2",onClick:function(){x(e.strCategory),window.scrollTo({top:0,behavior:"smooth"})}},e.strCategory),t.createElement("div",null,t.createElement("img",{className:"imgThumbCat",src:e.strCategoryThumb,alt:"",onClick:function(){x(e.strCategory),window.scrollTo({top:0,behavior:"smooth"})}}))),t.createElement("div",{className:"descr"},e.strCategoryDescription))}))))};function _l(e){return _l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_l(e)}function Pl(){Pl=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,a=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",l=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var o=t&&t.prototype instanceof v?t:v,i=Object.create(o.prototype),l=new _(r||[]);return a(i,"_invoke",{value:S(e,n,l)}),i}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var p="suspendedStart",f="suspendedYield",m="executing",h="completed",g={};function v(){}function y(){}function b(){}var A={};s(A,i,(function(){return this}));var w=Object.getPrototypeOf,x=w&&w(w(P([])));x&&x!==n&&r.call(x,i)&&(A=x);var k=b.prototype=v.prototype=Object.create(A);function C(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function E(e,t){function n(a,o,i,l){var c=d(e[a],e,o);if("throw"!==c.type){var s=c.arg,u=s.value;return u&&"object"==_l(u)&&r.call(u,"__await")?t.resolve(u.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(u).then((function(e){s.value=e,i(s)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var o;a(this,"_invoke",{value:function(e,r){function a(){return new t((function(t,a){n(e,r,t,a)}))}return o=o?o.then(a,a):a()}})}function S(t,n,r){var a=p;return function(o,i){if(a===m)throw Error("Generator is already running");if(a===h){if("throw"===o)throw i;return{value:e,done:!0}}for(r.method=o,r.arg=i;;){var l=r.delegate;if(l){var c=N(l,r);if(c){if(c===g)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(a===p)throw a=h,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);a=m;var s=d(t,n,r);if("normal"===s.type){if(a=r.done?h:f,s.arg===g)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(a=h,r.method="throw",r.arg=s.arg)}}}function N(t,n){var r=n.method,a=t.iterator[r];if(a===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,N(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),g;var o=d(a,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,g;var i=o.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,g):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,g)}function B(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function L(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(B,this),this.reset(!0)}function P(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var a=-1,o=function n(){for(;++a<t.length;)if(r.call(t,a))return n.value=t[a],n.done=!1,n;return n.value=e,n.done=!0,n};return o.next=o}}throw new TypeError(_l(t)+" is not iterable")}return y.prototype=b,a(k,"constructor",{value:b,configurable:!0}),a(b,"constructor",{value:y,configurable:!0}),y.displayName=s(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,s(e,c,"GeneratorFunction")),e.prototype=Object.create(k),e},t.awrap=function(e){return{__await:e}},C(E.prototype),s(E.prototype,l,(function(){return this})),t.AsyncIterator=E,t.async=function(e,n,r,a,o){void 0===o&&(o=Promise);var i=new E(u(e,n,r,a),o);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(k),s(k,c,"Generator"),s(k,i,(function(){return this})),s(k,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=P,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(L),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function a(r,a){return l.type="throw",l.arg=t,n.next=r,a&&(n.method="next",n.arg=e),!!a}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],l=i.completion;if("root"===i.tryLoc)return a("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(c&&s){if(this.prev<i.catchLoc)return a(i.catchLoc,!0);if(this.prev<i.finallyLoc)return a(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return a(i.catchLoc,!0)}else{if(!s)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return a(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,g):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),L(n),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;L(n)}return a}}throw Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),g}},t}function Ml(e,t,n,r,a,o,i){try{var l=e[o](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,a)}function Ol(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,l=[],c=!0,s=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){s=!0,a=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw a}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Tl(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Tl(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Tl(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const Fl=function(){var e=Ol((0,t.useState)(null),2),n=(e[0],e[1]),r=Ol((0,t.useState)([]),2),a=r[0],o=r[1],i=Ol((0,t.useState)([]),2),l=i[0],c=i[1],s=Ol((0,t.useState)([]),2),u=s[0],d=s[1],p=Ol((0,t.useState)(!0),2),f=p[0],m=p[1],h=fe(),g=(0,t.useContext)(gi).searchStringValue;(0,t.useEffect)((function(){v(g)}),[g]);var v=function(){var e,t=(e=Pl().mark((function e(t){var r,a,i,l,s,u,p,f,h,g,v;return Pl().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r="https://www.themealdb.com/api/json/v1/1/search.php?s=".concat(t),a="https://www.themealdb.com/api/json/v1/1/filter.php?i=".concat(t),i="https://www.themealdb.com/api/json/v1/1/search.php?f=".concat(t),l="https://www.themealdb.com/api/json/v1/1/filter.php?a=".concat(t),e.prev=4,e.next=7,or.get(r);case 7:return s=e.sent,e.next=10,or.get(a);case 10:return u=e.sent,e.next=13,or.get(i);case 13:return p=e.sent,e.next=16,or.get(l);case 16:f=e.sent,h=s.data,g=u.data,v=p.data,f.data,o(h.meals),c(g.meals),d(v.meals),m(!1),e.next=30;break;case 27:e.prev=27,e.t0=e.catch(4),n(e.t0);case 30:case"end":return e.stop()}}),e,null,[[4,27]])})),function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function i(e){Ml(o,r,a,i,l,"next",e)}function l(e){Ml(o,r,a,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}(),y=function(e){var t="recipe/".concat(e);h(t)};return f?t.createElement(ml,null):null==a&&null==l&&"no data found"==u?t.createElement(t.Fragment,null,t.createElement("div",{className:"food"},t.createElement("div",{className:"container"},t.createElement("p",null,"Nothing found"),t.createElement(vi,null))),t.createElement("div",{className:"food",style:{height:"300px"}}),t.createElement("div",{className:"footer"})):null==l&&"no data found"==u?t.createElement(t.Fragment,null,t.createElement("div",{className:"titleLineFood"},t.createElement("h1",null,"Name ",g),t.createElement("h1",null,t.createElement("hr",null))),t.createElement("div",{className:"areaMain"},a.map((function(e,n){return t.createElement("div",{key:n,className:"results"},t.createElement("div",{className:"recipeResult",onClick:function(){y(e.idMeal),window.scrollTo({top:0,behavior:"smooth"})}},e.strMeal),t.createElement("div",null,t.createElement("img",{className:"imgThumb",src:e.strMealThumb,alt:"",onClick:function(){y(e.idMeal),window.scrollTo({top:0,behavior:"smooth"})}})))}))),t.createElement("div",{className:"food",style:{height:"300px"}}),t.createElement("div",{className:"footer"})):null==a&&"no data found"==u?t.createElement(t.Fragment,null,t.createElement("div",{className:"titleLineFood"},t.createElement("h1",null,"Ingredient ",g),t.createElement("h1",null,t.createElement("hr",null))),t.createElement("div",{className:"areaMain"},l.map((function(e,n){return t.createElement("div",{key:n,className:"results"},t.createElement("div",{className:"recipeResult",onClick:function(){y(e.idMeal),window.scrollTo({top:0,behavior:"smooth"})}},e.strMeal),t.createElement("div",null,t.createElement("img",{className:"imgThumb",src:e.strMealThumb,alt:"",onClick:function(){y(e.idMeal),window.scrollTo({top:0,behavior:"smooth"})}})))}))),t.createElement("div",{className:"food",style:{height:"300px"}}),t.createElement("div",{className:"footer"})):null==a&&null==l||null==l?t.createElement(t.Fragment,null,t.createElement("div",{className:"titleLineFood"},t.createElement("h1",null,"Results by first letter ",g),t.createElement("h1",null,t.createElement("hr",null))),t.createElement("div",{className:"areaMain"},u.map((function(e,n){return t.createElement("div",{key:n,className:"results"},t.createElement("div",{className:"recipeResult",onClick:function(){y(e.idMeal),window.scrollTo({top:0,behavior:"smooth"})}},e.strMeal),t.createElement("div",null,t.createElement("img",{className:"imgThumb",src:e.strMealThumb,alt:"",onClick:function(){y(e.idMeal),window.scrollTo({top:0,behavior:"smooth"})}})))}))),t.createElement("div",{className:"food",style:{height:"300px"}}),t.createElement("div",{className:"footer"})):"no data found"==u?t.createElement(t.Fragment,null,t.createElement("div",{className:"titleLineFood"},t.createElement("h1",null,"Name ",g),t.createElement("h1",null,t.createElement("hr",null))),t.createElement("div",{className:"areaMain"},a.map((function(e,n){return t.createElement("div",{key:n,className:"results"},t.createElement("div",{className:"recipeResult",onClick:function(){y(e.idMeal),window.scrollTo({top:0,behavior:"smooth"})}},e.strMeal),t.createElement("div",null,t.createElement("img",{className:"imgThumb",src:e.strMealThumb,alt:"",onClick:function(){y(e.idMeal),window.scrollTo({top:0,behavior:"smooth"})}})))}))),t.createElement("div",{className:"titleLineFood"},t.createElement("h1",null,"Ingredient ",g),t.createElement("h1",null,t.createElement("hr",null))),t.createElement("div",{className:"areaMain"},l.map((function(e,n){return t.createElement("div",{key:n,className:"results"},t.createElement("div",{className:"recipeResult",onClick:function(){y(e.idMeal),window.scrollTo({top:0,behavior:"smooth"})}},e.strMeal),t.createElement("div",null,t.createElement("img",{className:"imgThumb",src:e.strMealThumb,alt:"",onClick:function(){y(e.idMeal),window.scrollTo({top:0,behavior:"smooth"})}})))}))),t.createElement("div",{className:"food",style:{height:"300px"}}),t.createElement("div",{className:"footer"})):t.createElement(t.Fragment,null,t.createElement("div",{className:"titleLineFood"},t.createElement("h1",null,"Name ",g),t.createElement("h1",null,t.createElement("hr",null))),t.createElement("div",{className:"areaMain"},a.map((function(e,n){return t.createElement("div",{key:n,className:"results"},t.createElement("div",{className:"recipeResult",onClick:function(){y(e.idMeal),window.scrollTo({top:0,behavior:"smooth"})}},e.strMeal),t.createElement("div",null,t.createElement("img",{className:"imgThumb",src:e.strMealThumb,alt:"",onClick:function(){y(e.idMeal),window.scrollTo({top:0,behavior:"smooth"})}})))}))),t.createElement("div",{className:"titleLineFood"},t.createElement("h1",null,"Ingredients ",g),t.createElement("h1",null,t.createElement("hr",null))),t.createElement("div",{className:"areaMain"},l.map((function(e,n){return t.createElement("div",{key:n,className:"results"},t.createElement("div",{className:"recipeResult",onClick:function(){y(e.idMeal),window.scrollTo({top:0,behavior:"smooth"})}},e.strMeal),t.createElement("div",null,t.createElement("img",{className:"imgThumb",src:e.strMealThumb,alt:"",onClick:function(){y(e.idMeal),window.scrollTo({top:0,behavior:"smooth"})}})))}))),t.createElement("div",{className:"food",style:{height:"300px"}}),t.createElement("div",{className:"footer"}))},Dl=function(e,t){var n=Math.ceil(e.length/t);return Array.from({length:n},(function(n,r){return e.slice(r*t,(r+1)*t)}))};var jl=a(2532),Rl=a(9599);const Il=["className","component"],zl=Ua("MuiBox",["root"]),$l=Pa(),Gl=function(e={}){const{themeId:n,defaultTheme:r,defaultClassName:a="MuiBox-root",generateClassName:o}=e,i=(0,jl.default)("div",{shouldForwardProp:e=>"theme"!==e&&"sx"!==e&&"as"!==e})(Pr.A);return t.forwardRef((function(e,t){const l=uo(r),c=(0,Rl.A)(e),{className:s,component:u="div"}=c,d=(0,wr.A)(c,Il);return(0,ja.jsx)(i,(0,xr.A)({as:u,ref:t,className:Cr(s,o?o(a):a),theme:n&&l[n]||l},d))}))}({themeId:Oa,defaultTheme:$l,defaultClassName:zl.root,generateClassName:$a.generate});function Yl(e){return Ya("MuiPagination",e)}Ua("MuiPagination",["root","ul","outlined","text"]);const Ul=["boundaryCount","componentName","count","defaultPage","disabled","hideNextButton","hidePrevButton","onChange","page","showFirstButton","showLastButton","siblingCount"];const Wl=t.createContext();function Hl(e){return Ya("MuiPaginationItem",e)}const ql=Ua("MuiPaginationItem",["root","page","sizeSmall","sizeLarge","text","textPrimary","textSecondary","outlined","outlinedPrimary","outlinedSecondary","rounded","ellipsis","firstLast","previousNext","focusVisible","disabled","selected","icon","colorPrimary","colorSecondary"]);function Vl(e){return Ya("MuiSvgIcon",e)}Ua("MuiSvgIcon",["root","colorPrimary","colorSecondary","colorAction","colorError","colorDisabled","fontSizeInherit","fontSizeSmall","fontSizeMedium","fontSizeLarge"]);const Ql=["children","className","color","component","fontSize","htmlColor","inheritViewBox","titleAccess","viewBox"],Kl=Ta("svg",{name:"MuiSvgIcon",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,"inherit"!==n.color&&t[`color${ao(n.color)}`],t[`fontSize${ao(n.fontSize)}`]]}})((({theme:e,ownerState:t})=>{var n,r,a,o,i,l,c,s,u,d,p,f,m;return{userSelect:"none",width:"1em",height:"1em",display:"inline-block",fill:t.hasSvgAsChild?void 0:"currentColor",flexShrink:0,transition:null==(n=e.transitions)||null==(r=n.create)?void 0:r.call(n,"fill",{duration:null==(a=e.transitions)||null==(a=a.duration)?void 0:a.shorter}),fontSize:{inherit:"inherit",small:(null==(o=e.typography)||null==(i=o.pxToRem)?void 0:i.call(o,20))||"1.25rem",medium:(null==(l=e.typography)||null==(c=l.pxToRem)?void 0:c.call(l,24))||"1.5rem",large:(null==(s=e.typography)||null==(u=s.pxToRem)?void 0:u.call(s,35))||"2.1875rem"}[t.fontSize],color:null!=(d=null==(p=(e.vars||e).palette)||null==(p=p[t.color])?void 0:p.main)?d:{action:null==(f=(e.vars||e).palette)||null==(f=f.action)?void 0:f.active,disabled:null==(m=(e.vars||e).palette)||null==(m=m.action)?void 0:m.disabled,inherit:void 0}[t.color]}})),Zl=t.forwardRef((function(e,n){const r=Ia({props:e,name:"MuiSvgIcon"}),{children:a,className:o,color:i="inherit",component:l="svg",fontSize:c="medium",htmlColor:s,inheritViewBox:u=!1,titleAccess:d,viewBox:p="0 0 24 24"}=r,f=(0,wr.A)(r,Ql),m=t.isValidElement(a)&&"svg"===a.type,h=(0,xr.A)({},r,{color:i,component:l,fontSize:c,instanceFontSize:e.fontSize,inheritViewBox:u,viewBox:p,hasSvgAsChild:m}),g={};u||(g.viewBox=p);const v=(e=>{const{color:t,fontSize:n,classes:r}=e;return Er({root:["root","inherit"!==t&&`color${ao(t)}`,`fontSize${ao(n)}`]},Vl,r)})(h);return(0,ja.jsxs)(Kl,(0,xr.A)({as:l,className:Cr(v.root,o),focusable:"false",color:s,"aria-hidden":!d||void 0,role:d?"img":void 0,ref:n},g,f,m&&a.props,{ownerState:h,children:[m?a.props.children:a,d?(0,ja.jsx)("title",{children:d}):null]}))}));Zl.muiName="SvgIcon";const Xl=Zl;function Jl(e,n){function r(t,r){return(0,ja.jsx)(Xl,(0,xr.A)({"data-testid":`${n}Icon`,ref:r},t,{children:e}))}return r.muiName=Xl.muiName,t.memo(t.forwardRef(r))}const ec=Jl((0,ja.jsx)("path",{d:"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z"}),"FirstPage"),tc=Jl((0,ja.jsx)("path",{d:"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z"}),"LastPage"),nc=Jl((0,ja.jsx)("path",{d:"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"}),"NavigateBefore"),rc=Jl((0,ja.jsx)("path",{d:"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"}),"NavigateNext"),ac=["className","color","component","components","disabled","page","selected","shape","size","slots","type","variant"],oc=(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],t[`size${ao(n.size)}`],"text"===n.variant&&t[`text${ao(n.color)}`],"outlined"===n.variant&&t[`outlined${ao(n.color)}`],"rounded"===n.shape&&t.rounded,"page"===n.type&&t.page,("start-ellipsis"===n.type||"end-ellipsis"===n.type)&&t.ellipsis,("previous"===n.type||"next"===n.type)&&t.previousNext,("first"===n.type||"last"===n.type)&&t.firstLast]},ic=Ta("div",{name:"MuiPaginationItem",slot:"Root",overridesResolver:oc})((({theme:e,ownerState:t})=>(0,xr.A)({},e.typography.body2,{borderRadius:16,textAlign:"center",boxSizing:"border-box",minWidth:32,padding:"0 6px",margin:"0 3px",color:(e.vars||e).palette.text.primary,height:"auto",[`&.${ql.disabled}`]:{opacity:(e.vars||e).palette.action.disabledOpacity}},"small"===t.size&&{minWidth:26,borderRadius:13,margin:"0 1px",padding:"0 4px"},"large"===t.size&&{minWidth:40,borderRadius:20,padding:"0 10px",fontSize:e.typography.pxToRem(15)}))),lc=Ta(ii,{name:"MuiPaginationItem",slot:"Root",overridesResolver:oc})((({theme:e,ownerState:t})=>(0,xr.A)({},e.typography.body2,{borderRadius:16,textAlign:"center",boxSizing:"border-box",minWidth:32,height:32,padding:"0 6px",margin:"0 3px",color:(e.vars||e).palette.text.primary,[`&.${ql.focusVisible}`]:{backgroundColor:(e.vars||e).palette.action.focus},[`&.${ql.disabled}`]:{opacity:(e.vars||e).palette.action.disabledOpacity},transition:e.transitions.create(["color","background-color"],{duration:e.transitions.duration.short}),"&:hover":{backgroundColor:(e.vars||e).palette.action.hover,"@media (hover: none)":{backgroundColor:"transparent"}},[`&.${ql.selected}`]:{backgroundColor:(e.vars||e).palette.action.selected,"&:hover":{backgroundColor:e.vars?`rgba(${e.vars.palette.action.selectedChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.hoverOpacity}))`:(0,Sr.X4)(e.palette.action.selected,e.palette.action.selectedOpacity+e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:(e.vars||e).palette.action.selected}},[`&.${ql.focusVisible}`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.action.selectedChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.focusOpacity}))`:(0,Sr.X4)(e.palette.action.selected,e.palette.action.selectedOpacity+e.palette.action.focusOpacity)},[`&.${ql.disabled}`]:{opacity:1,color:(e.vars||e).palette.action.disabled,backgroundColor:(e.vars||e).palette.action.selected}}},"small"===t.size&&{minWidth:26,height:26,borderRadius:13,margin:"0 1px",padding:"0 4px"},"large"===t.size&&{minWidth:40,height:40,borderRadius:20,padding:"0 10px",fontSize:e.typography.pxToRem(15)},"rounded"===t.shape&&{borderRadius:(e.vars||e).shape.borderRadius})),(({theme:e,ownerState:t})=>(0,xr.A)({},"text"===t.variant&&{[`&.${ql.selected}`]:(0,xr.A)({},"standard"!==t.color&&{color:(e.vars||e).palette[t.color].contrastText,backgroundColor:(e.vars||e).palette[t.color].main,"&:hover":{backgroundColor:(e.vars||e).palette[t.color].dark,"@media (hover: none)":{backgroundColor:(e.vars||e).palette[t.color].main}},[`&.${ql.focusVisible}`]:{backgroundColor:(e.vars||e).palette[t.color].dark}},{[`&.${ql.disabled}`]:{color:(e.vars||e).palette.action.disabled}})},"outlined"===t.variant&&{border:e.vars?`1px solid rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)`:"1px solid "+("light"===e.palette.mode?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)"),[`&.${ql.selected}`]:(0,xr.A)({},"standard"!==t.color&&{color:(e.vars||e).palette[t.color].main,border:`1px solid ${e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / 0.5)`:(0,Sr.X4)(e.palette[t.color].main,.5)}`,backgroundColor:e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / ${e.vars.palette.action.activatedOpacity})`:(0,Sr.X4)(e.palette[t.color].main,e.palette.action.activatedOpacity),"&:hover":{backgroundColor:e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / calc(${e.vars.palette.action.activatedOpacity} + ${e.vars.palette.action.focusOpacity}))`:(0,Sr.X4)(e.palette[t.color].main,e.palette.action.activatedOpacity+e.palette.action.focusOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},[`&.${ql.focusVisible}`]:{backgroundColor:e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / calc(${e.vars.palette.action.activatedOpacity} + ${e.vars.palette.action.focusOpacity}))`:(0,Sr.X4)(e.palette[t.color].main,e.palette.action.activatedOpacity+e.palette.action.focusOpacity)}},{[`&.${ql.disabled}`]:{borderColor:(e.vars||e).palette.action.disabledBackground,color:(e.vars||e).palette.action.disabled}})}))),cc=Ta("div",{name:"MuiPaginationItem",slot:"Icon",overridesResolver:(e,t)=>t.icon})((({theme:e,ownerState:t})=>(0,xr.A)({fontSize:e.typography.pxToRem(20),margin:"0 -8px"},"small"===t.size&&{fontSize:e.typography.pxToRem(18)},"large"===t.size&&{fontSize:e.typography.pxToRem(22)}))),sc=t.forwardRef((function(e,n){const r=Ia({props:e,name:"MuiPaginationItem"}),{className:a,color:o="standard",component:i,components:l={},disabled:c=!1,page:s,selected:u=!1,shape:d="circular",size:p="medium",slots:f={},type:m="page",variant:h="text"}=r,g=(0,wr.A)(r,ac),v=(0,xr.A)({},r,{color:o,disabled:c,selected:u,shape:d,size:p,type:m,variant:h}),y=(()=>{const e=t.useContext(Wl);return null!=e&&e})(),b=(e=>{const{classes:t,color:n,disabled:r,selected:a,size:o,shape:i,type:l,variant:c}=e;return Er({root:["root",`size${ao(o)}`,c,i,"standard"!==n&&`color${ao(n)}`,"standard"!==n&&`${c}${ao(n)}`,r&&"disabled",a&&"selected",{page:"page",first:"firstLast",last:"firstLast","start-ellipsis":"ellipsis","end-ellipsis":"ellipsis",previous:"previousNext",next:"previousNext"}[l]],icon:["icon"]},Hl,t)})(v),A=(y?{previous:f.next||l.next||rc,next:f.previous||l.previous||nc,last:f.first||l.first||ec,first:f.last||l.last||tc}:{previous:f.previous||l.previous||nc,next:f.next||l.next||rc,first:f.first||l.first||ec,last:f.last||l.last||tc})[m];return"start-ellipsis"===m||"end-ellipsis"===m?(0,ja.jsx)(ic,{ref:n,ownerState:v,className:Cr(b.root,a),children:"…"}):(0,ja.jsxs)(lc,(0,xr.A)({ref:n,ownerState:v,component:i,disabled:c,className:Cr(b.root,a)},g,{children:["page"===m&&s,A?(0,ja.jsx)(cc,{as:A,ownerState:v,className:b.icon}):null]}))})),uc=["boundaryCount","className","color","count","defaultPage","disabled","getItemAriaLabel","hideNextButton","hidePrevButton","onChange","page","renderItem","shape","showFirstButton","showLastButton","siblingCount","size","variant"],dc=Ta("nav",{name:"MuiPagination",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant]]}})({}),pc=Ta("ul",{name:"MuiPagination",slot:"Ul",overridesResolver:(e,t)=>t.ul})({display:"flex",flexWrap:"wrap",alignItems:"center",padding:0,margin:0,listStyle:"none"});function fc(e,t,n){return"page"===e?`${n?"":"Go to "}page ${t}`:`Go to ${e} page`}const mc=t.forwardRef((function(e,n){const r=Ia({props:e,name:"MuiPagination"}),{boundaryCount:a=1,className:o,color:i="standard",count:l=1,defaultPage:c=1,disabled:s=!1,getItemAriaLabel:u=fc,hideNextButton:d=!1,hidePrevButton:p=!1,renderItem:f=e=>(0,ja.jsx)(sc,(0,xr.A)({},e)),shape:m="circular",showFirstButton:h=!1,showLastButton:g=!1,siblingCount:v=1,size:y="medium",variant:b="text"}=r,A=(0,wr.A)(r,uc),{items:w}=function(e={}){const{boundaryCount:n=1,componentName:r="usePagination",count:a=1,defaultPage:o=1,disabled:i=!1,hideNextButton:l=!1,hidePrevButton:c=!1,onChange:s,page:u,showFirstButton:d=!1,showLastButton:p=!1,siblingCount:f=1}=e,m=(0,wr.A)(e,Ul),[h,g]=function({controlled:e,default:n,name:r,state:a="value"}){const{current:o}=t.useRef(void 0!==e),[i,l]=t.useState(n);return[o?e:i,t.useCallback((e=>{o||l(e)}),[])]}({controlled:u,default:o,name:r,state:"page"}),v=(e,t)=>{u||g(t),s&&s(e,t)},y=(e,t)=>{const n=t-e+1;return Array.from({length:n},((t,n)=>e+n))},b=y(1,Math.min(n,a)),A=y(Math.max(a-n+1,n+1),a),w=Math.max(Math.min(h-f,a-n-2*f-1),n+2),x=Math.min(Math.max(h+f,n+2*f+2),A.length>0?A[0]-2:a-1),k=[...d?["first"]:[],...c?[]:["previous"],...b,...w>n+2?["start-ellipsis"]:n+1<a-n?[n+1]:[],...y(w,x),...x<a-n-1?["end-ellipsis"]:a-n>n?[a-n]:[],...A,...l?[]:["next"],...p?["last"]:[]],C=e=>{switch(e){case"first":return 1;case"previous":return h-1;case"next":return h+1;case"last":return a;default:return null}},E=k.map((e=>"number"==typeof e?{onClick:t=>{v(t,e)},type:"page",page:e,selected:e===h,disabled:i,"aria-current":e===h?"true":void 0}:{onClick:t=>{v(t,C(e))},type:e,page:C(e),selected:!1,disabled:i||-1===e.indexOf("ellipsis")&&("next"===e||"last"===e?h>=a:h<=1)}));return(0,xr.A)({items:E},m)}((0,xr.A)({},r,{componentName:"Pagination"})),x=(0,xr.A)({},r,{boundaryCount:a,color:i,count:l,defaultPage:c,disabled:s,getItemAriaLabel:u,hideNextButton:d,hidePrevButton:p,renderItem:f,shape:m,showFirstButton:h,showLastButton:g,siblingCount:v,size:y,variant:b}),k=(e=>{const{classes:t,variant:n}=e;return Er({root:["root",n],ul:["ul"]},Yl,t)})(x);return(0,ja.jsx)(dc,(0,xr.A)({"aria-label":"pagination navigation",className:Cr(k.root,o),ownerState:x,ref:n},A,{children:(0,ja.jsx)(pc,{className:k.ul,ownerState:x,children:w.map(((e,t)=>(0,ja.jsx)("li",{children:f((0,xr.A)({},e,{color:i,"aria-label":u(e.type,e.page,e.selected),shape:m,size:y,variant:b}))},t)))})}))}));function hc(e){return hc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},hc(e)}function gc(){gc=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,a=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",l=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var o=t&&t.prototype instanceof v?t:v,i=Object.create(o.prototype),l=new _(r||[]);return a(i,"_invoke",{value:S(e,n,l)}),i}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var p="suspendedStart",f="suspendedYield",m="executing",h="completed",g={};function v(){}function y(){}function b(){}var A={};s(A,i,(function(){return this}));var w=Object.getPrototypeOf,x=w&&w(w(P([])));x&&x!==n&&r.call(x,i)&&(A=x);var k=b.prototype=v.prototype=Object.create(A);function C(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function E(e,t){function n(a,o,i,l){var c=d(e[a],e,o);if("throw"!==c.type){var s=c.arg,u=s.value;return u&&"object"==hc(u)&&r.call(u,"__await")?t.resolve(u.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(u).then((function(e){s.value=e,i(s)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var o;a(this,"_invoke",{value:function(e,r){function a(){return new t((function(t,a){n(e,r,t,a)}))}return o=o?o.then(a,a):a()}})}function S(t,n,r){var a=p;return function(o,i){if(a===m)throw Error("Generator is already running");if(a===h){if("throw"===o)throw i;return{value:e,done:!0}}for(r.method=o,r.arg=i;;){var l=r.delegate;if(l){var c=N(l,r);if(c){if(c===g)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(a===p)throw a=h,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);a=m;var s=d(t,n,r);if("normal"===s.type){if(a=r.done?h:f,s.arg===g)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(a=h,r.method="throw",r.arg=s.arg)}}}function N(t,n){var r=n.method,a=t.iterator[r];if(a===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,N(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),g;var o=d(a,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,g;var i=o.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,g):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,g)}function B(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function L(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(B,this),this.reset(!0)}function P(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var a=-1,o=function n(){for(;++a<t.length;)if(r.call(t,a))return n.value=t[a],n.done=!1,n;return n.value=e,n.done=!0,n};return o.next=o}}throw new TypeError(hc(t)+" is not iterable")}return y.prototype=b,a(k,"constructor",{value:b,configurable:!0}),a(b,"constructor",{value:y,configurable:!0}),y.displayName=s(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,s(e,c,"GeneratorFunction")),e.prototype=Object.create(k),e},t.awrap=function(e){return{__await:e}},C(E.prototype),s(E.prototype,l,(function(){return this})),t.AsyncIterator=E,t.async=function(e,n,r,a,o){void 0===o&&(o=Promise);var i=new E(u(e,n,r,a),o);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(k),s(k,c,"Generator"),s(k,i,(function(){return this})),s(k,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=P,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(L),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function a(r,a){return l.type="throw",l.arg=t,n.next=r,a&&(n.method="next",n.arg=e),!!a}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],l=i.completion;if("root"===i.tryLoc)return a("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(c&&s){if(this.prev<i.catchLoc)return a(i.catchLoc,!0);if(this.prev<i.finallyLoc)return a(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return a(i.catchLoc,!0)}else{if(!s)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return a(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,g):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),L(n),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;L(n)}return a}}throw Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),g}},t}function vc(e,t,n,r,a,o,i){try{var l=e[o](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,a)}function yc(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,l=[],c=!0,s=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){s=!0,a=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw a}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return bc(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?bc(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function bc(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const Ac=function(e){var n=yc((0,t.useState)(null),2),r=(n[0],n[1]),a=yc((0,t.useState)([]),2),o=a[0],i=a[1],l=yc((0,t.useState)(1),2),c=l[0],s=l[1],u=yc((0,t.useState)(null),2),d=u[0],p=u[1],f=e.drink;(0,t.useEffect)((function(){m(f)}),[f]);var m=function(){var e,t=(e=gc().mark((function e(t){var n,a,o;return gc().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n="https://www.thecocktaildb.com/api/json/v1/1/search.php?s=".concat(t),e.prev=1,e.next=4,or.get(n);case 4:a=e.sent,o=a.data,i(o.drinks||[]),p(o.drinks),console.log("po imenu koktela iz DrinkName",o),e.next=14;break;case 11:e.prev=11,e.t0=e.catch(1),r(e.t0);case 14:case"end":return e.stop()}}),e,null,[[1,11]])})),function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function i(e){vc(o,r,a,i,l,"next",e)}function l(e){vc(o,r,a,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}(),h=Dl(o,6),g=h[c-1];return null===d?t.createElement(t.Fragment,null):t.createElement(t.Fragment,null,t.createElement("div",{className:"titleLineDrink"},t.createElement("h1",null,"Name ",f),t.createElement("h1",null,t.createElement("hr",null))),t.createElement(Gl,null,t.createElement("div",{className:"cocktail"},g&&g.map((function(e){return t.createElement("div",{key:e.idDrink,className:"cocktails"},t.createElement("div",{className:"drink"},t.createElement("div",{className:"imgCont"},t.createElement("img",{src:e.strDrinkThumb})),t.createElement("p",{className:"drinkLink"},e.strDrink),t.createElement("div",{className:"inerShadow"}),t.createElement("div",{className:"drinkDown"},t.createElement(Ar,{drinkID:e.idDrink}))),t.createElement("hr",null))}))),t.createElement("div",{className:"recipe"},h.length>1&&t.createElement(Gl,{mt:2,display:"flex",justifyContent:"center",className:"paginDrink"},t.createElement(mc,{count:h.length,page:c,siblingCount:0,onChange:function(e,t){s(t),window.scrollTo({top:0,behavior:"smooth"})}})))))};function wc(e){return wc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},wc(e)}function xc(){xc=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,a=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",l=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var o=t&&t.prototype instanceof v?t:v,i=Object.create(o.prototype),l=new _(r||[]);return a(i,"_invoke",{value:S(e,n,l)}),i}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var p="suspendedStart",f="suspendedYield",m="executing",h="completed",g={};function v(){}function y(){}function b(){}var A={};s(A,i,(function(){return this}));var w=Object.getPrototypeOf,x=w&&w(w(P([])));x&&x!==n&&r.call(x,i)&&(A=x);var k=b.prototype=v.prototype=Object.create(A);function C(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function E(e,t){function n(a,o,i,l){var c=d(e[a],e,o);if("throw"!==c.type){var s=c.arg,u=s.value;return u&&"object"==wc(u)&&r.call(u,"__await")?t.resolve(u.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(u).then((function(e){s.value=e,i(s)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var o;a(this,"_invoke",{value:function(e,r){function a(){return new t((function(t,a){n(e,r,t,a)}))}return o=o?o.then(a,a):a()}})}function S(t,n,r){var a=p;return function(o,i){if(a===m)throw Error("Generator is already running");if(a===h){if("throw"===o)throw i;return{value:e,done:!0}}for(r.method=o,r.arg=i;;){var l=r.delegate;if(l){var c=N(l,r);if(c){if(c===g)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(a===p)throw a=h,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);a=m;var s=d(t,n,r);if("normal"===s.type){if(a=r.done?h:f,s.arg===g)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(a=h,r.method="throw",r.arg=s.arg)}}}function N(t,n){var r=n.method,a=t.iterator[r];if(a===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,N(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),g;var o=d(a,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,g;var i=o.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,g):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,g)}function B(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function L(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(B,this),this.reset(!0)}function P(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var a=-1,o=function n(){for(;++a<t.length;)if(r.call(t,a))return n.value=t[a],n.done=!1,n;return n.value=e,n.done=!0,n};return o.next=o}}throw new TypeError(wc(t)+" is not iterable")}return y.prototype=b,a(k,"constructor",{value:b,configurable:!0}),a(b,"constructor",{value:y,configurable:!0}),y.displayName=s(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,s(e,c,"GeneratorFunction")),e.prototype=Object.create(k),e},t.awrap=function(e){return{__await:e}},C(E.prototype),s(E.prototype,l,(function(){return this})),t.AsyncIterator=E,t.async=function(e,n,r,a,o){void 0===o&&(o=Promise);var i=new E(u(e,n,r,a),o);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(k),s(k,c,"Generator"),s(k,i,(function(){return this})),s(k,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=P,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(L),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function a(r,a){return l.type="throw",l.arg=t,n.next=r,a&&(n.method="next",n.arg=e),!!a}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],l=i.completion;if("root"===i.tryLoc)return a("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(c&&s){if(this.prev<i.catchLoc)return a(i.catchLoc,!0);if(this.prev<i.finallyLoc)return a(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return a(i.catchLoc,!0)}else{if(!s)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return a(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,g):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),L(n),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;L(n)}return a}}throw Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),g}},t}function kc(e,t,n,r,a,o,i){try{var l=e[o](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,a)}function Cc(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,l=[],c=!0,s=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){s=!0,a=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw a}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Ec(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ec(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ec(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const Sc=function(e){var n=Cc((0,t.useState)(null),2),r=(n[0],n[1]),a=Cc((0,t.useState)([]),2),o=a[0],i=a[1],l=Cc((0,t.useState)(1),2),c=l[0],s=l[1],u=Cc((0,t.useState)([]),2),d=(u[0],u[1]),p=e.drink;(0,t.useEffect)((function(){f(p)}),[p]);var f=function(){var e,t=(e=xc().mark((function e(t){var n,a,o;return xc().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n="https://www.thecocktaildb.com/api/json/v1/1/filter.php?i=".concat(t),e.prev=1,e.next=4,or.get(n);case 4:a=e.sent,o=a.data,i(o.drinks),d(o.length),console.log("izbor u DrinkIngrid komp",o),e.next=14;break;case 11:e.prev=11,e.t0=e.catch(1),r(e.t0);case 14:case"end":return e.stop()}}),e,null,[[1,11]])})),function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function i(e){kc(o,r,a,i,l,"next",e)}function l(e){kc(o,r,a,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}(),m=Dl(o,6),h=m[c-1];return"no data found"===o?t.createElement(t.Fragment,null):"no data found"!=o?t.createElement(t.Fragment,null,t.createElement("div",{className:"titleLineDrink"},t.createElement("h1",null,"Ingredient ",p),t.createElement("h1",null,t.createElement("hr",null))),t.createElement(Gl,null,t.createElement("div",{className:"cocktail"},h&&h.map((function(e){return t.createElement("div",{key:e.idDrink,className:"cocktails"},t.createElement("div",{className:"drink"},t.createElement("div",{className:"imgCont"},t.createElement("img",{src:e.strDrinkThumb})),t.createElement("p",{className:"drinkLink"},e.strDrink),t.createElement("div",{className:"inerShadow"}),t.createElement("div",{className:"drinkDown"},t.createElement(Ar,{drinkID:e.idDrink}))),t.createElement("hr",null))}))),t.createElement("div",{className:"recipe"},m.length>1&&t.createElement(Gl,{mt:2,display:"flex",justifyContent:"center",className:"paginDrink"},t.createElement(mc,{count:m.length,page:c,siblingCount:0,onChange:function(e,t){s(t),document.querySelector(".abow").scrollIntoView({behavior:"smooth"})}}))))):void 0};function Nc(e){return Nc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Nc(e)}function Bc(){Bc=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,a=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",l=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var o=t&&t.prototype instanceof v?t:v,i=Object.create(o.prototype),l=new _(r||[]);return a(i,"_invoke",{value:S(e,n,l)}),i}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var p="suspendedStart",f="suspendedYield",m="executing",h="completed",g={};function v(){}function y(){}function b(){}var A={};s(A,i,(function(){return this}));var w=Object.getPrototypeOf,x=w&&w(w(P([])));x&&x!==n&&r.call(x,i)&&(A=x);var k=b.prototype=v.prototype=Object.create(A);function C(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function E(e,t){function n(a,o,i,l){var c=d(e[a],e,o);if("throw"!==c.type){var s=c.arg,u=s.value;return u&&"object"==Nc(u)&&r.call(u,"__await")?t.resolve(u.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(u).then((function(e){s.value=e,i(s)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var o;a(this,"_invoke",{value:function(e,r){function a(){return new t((function(t,a){n(e,r,t,a)}))}return o=o?o.then(a,a):a()}})}function S(t,n,r){var a=p;return function(o,i){if(a===m)throw Error("Generator is already running");if(a===h){if("throw"===o)throw i;return{value:e,done:!0}}for(r.method=o,r.arg=i;;){var l=r.delegate;if(l){var c=N(l,r);if(c){if(c===g)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(a===p)throw a=h,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);a=m;var s=d(t,n,r);if("normal"===s.type){if(a=r.done?h:f,s.arg===g)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(a=h,r.method="throw",r.arg=s.arg)}}}function N(t,n){var r=n.method,a=t.iterator[r];if(a===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,N(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),g;var o=d(a,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,g;var i=o.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,g):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,g)}function B(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function L(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(B,this),this.reset(!0)}function P(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var a=-1,o=function n(){for(;++a<t.length;)if(r.call(t,a))return n.value=t[a],n.done=!1,n;return n.value=e,n.done=!0,n};return o.next=o}}throw new TypeError(Nc(t)+" is not iterable")}return y.prototype=b,a(k,"constructor",{value:b,configurable:!0}),a(b,"constructor",{value:y,configurable:!0}),y.displayName=s(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,s(e,c,"GeneratorFunction")),e.prototype=Object.create(k),e},t.awrap=function(e){return{__await:e}},C(E.prototype),s(E.prototype,l,(function(){return this})),t.AsyncIterator=E,t.async=function(e,n,r,a,o){void 0===o&&(o=Promise);var i=new E(u(e,n,r,a),o);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(k),s(k,c,"Generator"),s(k,i,(function(){return this})),s(k,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=P,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(L),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function a(r,a){return l.type="throw",l.arg=t,n.next=r,a&&(n.method="next",n.arg=e),!!a}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],l=i.completion;if("root"===i.tryLoc)return a("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(c&&s){if(this.prev<i.catchLoc)return a(i.catchLoc,!0);if(this.prev<i.finallyLoc)return a(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return a(i.catchLoc,!0)}else{if(!s)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return a(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,g):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),L(n),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;L(n)}return a}}throw Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),g}},t}function Lc(e,t,n,r,a,o,i){try{var l=e[o](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,a)}function _c(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function i(e){Lc(o,r,a,i,l,"next",e)}function l(e){Lc(o,r,a,i,l,"throw",e)}i(void 0)}))}}function Pc(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,l=[],c=!0,s=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){s=!0,a=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw a}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Mc(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Mc(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Mc(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const Oc=function(){var e=Pc((0,t.useState)(null),2),n=(e[0],e[1]),r=Pc((0,t.useState)([]),2),a=r[0],o=r[1],i=Pc((0,t.useState)(1),2),l=i[0],c=i[1],s=Pc((0,t.useState)(1),2),u=s[0],d=s[1],p=Pc((0,t.useState)([]),2),f=p[0],m=p[1],h=Pc((0,t.useState)([]),2),g=(h[0],h[1],Pc((0,t.useState)([]),2)),v=g[0],y=g[1],b=Pc((0,t.useState)(!0),2),A=b[0],w=b[1],x=Pc((0,t.useState)([]),2),k=(x[0],x[1]),C=Pc((0,t.useState)(1),2),E=C[0],S=C[1],N=Pc((0,t.useState)([]),2),B=N[0],L=N[1],_=(0,t.useContext)(gi).searchStringValue;(0,t.useEffect)((function(){P(_),M(_)}),[_]);var P=function(){var e=_c(Bc().mark((function e(t){var r,a,i,l,c,s,u,p,f,h,g,v;return Bc().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r="https://api.api-ninjas.com/v1/cocktail?name=".concat(t),a="https://list.ly/api/v4/search/image?q=".concat(t),i="https://www.thecocktaildb.com/api/json/v1/1/filter.php?i=".concat(t),l="https://www.thecocktaildb.com/api/json/v1/1/search.php?f=".concat(t),e.prev=4,e.next=7,or.get(r,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 7:return c=e.sent,e.next=10,or.get(a);case 10:return s=e.sent,e.next=13,or.get(i);case 13:return u=e.sent,e.next=16,or.get(l);case 16:p=e.sent,f=c.data,h=s.data,u.data,g=p.data,v=c.data.length,m(f),d(v),k(g.length),y(h.results),o(g.drinks),w(!1),e.next=33;break;case 30:e.prev=30,e.t0=e.catch(4),n(e.t0);case 33:case"end":return e.stop()}}),e,null,[[4,30]])})));return function(t){return e.apply(this,arguments)}}(),M=function(){var e=_c(Bc().mark((function e(t){var r,a,o,i;return Bc().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r="https://api.api-ninjas.com/v1/cocktail?ingredients=".concat(t),e.prev=1,e.next=4,or.get(r,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 4:a=e.sent,o=a.data,i=a.data.length,L(o),c(i),e.next=14;break;case 11:e.prev=11,e.t0=e.catch(1),n(e.t0);case 14:case"end":return e.stop()}}),e,null,[[1,11]])})));return function(t){return e.apply(this,arguments)}}(),O=Dl(a,9),T=O[E-1];if(A)return t.createElement(ml,null);if("no data found"===a)t.Fragment;else{if("no data found"!=a)return t.createElement(t.Fragment,null,t.createElement("div",{className:"titleLineDrink"},t.createElement("h1",null,"Cocktails by first letter ",_),t.createElement("h1",null,t.createElement("hr",null))),t.createElement(Gl,null,t.createElement("div",{className:"cocktail"},T&&T.map((function(e){return t.createElement("div",{key:e.idDrink,className:"cocktails"},t.createElement("div",{className:"drink"},t.createElement("div",{className:"imgCont"},t.createElement("img",{src:e.strDrinkThumb})),t.createElement("p",{className:"drinkLink"},e.strDrink),t.createElement("div",{className:"drinkDown"},t.createElement(Ar,{drinkID:e.idDrink}))),t.createElement("hr",null))}))),t.createElement("div",{className:"recipe"},O.length>1&&t.createElement(Gl,{mt:2,display:"flex",justifyContent:"center",className:"paginDrink"},t.createElement(mc,{color:"primary",count:O.length,page:E,siblingCount:0,onChange:function(e,t){S(t),window.scrollTo({top:0,behavior:"smooth"})}})))),t.createElement("div",{className:"drinkMain",style:{height:"300px"}}));if(0===l&&0===u)return t.createElement(t.Fragment,null,t.createElement("div",{className:"drinkMain"},t.createElement("table",null,t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",null,"Nothing found")),t.createElement("tr",null,t.createElement("th",null,t.createElement(yi,null)))))))}return t.createElement(t.Fragment,null,t.createElement("div",null,t.createElement(Ac,{drink:_})),t.createElement("div",null,t.createElement(Sc,{drink:_})),t.createElement("div",{className:"drinkGrid"},t.createElement("div",{className:"photo"},v&&t.createElement("div",{colSpan:2},v.slice(0,1).map((function(e,n){return t.createElement(t.Fragment,null,t.createElement("p",{key:n},t.createElement("img",{src:e.image,alt:""})),t.createElement("p",{className:"subtitle"},"ilustrated photo"))}))))),t.createElement("div",{className:"titleLineDrink"},t.createElement("h1",null,"Name ",_),t.createElement("h1",null,t.createElement("hr",null))),t.createElement("div",{className:"drinkGrid"},t.createElement("div",{className:"cocktailGrid"},f.map((function(e,n){return t.createElement("div",{className:"wrap",key:n},t.createElement("div",{className:"cocktailName"},e.name),t.createElement("div",{className:"cocktailCont"},e.ingredients.map((function(e,n){return t.createElement("p",{key:n},e)}))),t.createElement("div",{className:"cocktailCont"},e.instructions))}))),t.createElement("div",{className:"photo"},v&&t.createElement("div",{colSpan:2},v.slice(1,2).map((function(e,n){return t.createElement(t.Fragment,null,t.createElement("p",{key:n},t.createElement("img",{src:e.image,alt:""})),t.createElement("p",{className:"subtitle"},"ilustrated photo"))}))))),t.createElement("div",{className:"titleLineDrink"},t.createElement("h1",null,"Ingedient ",_),t.createElement("h1",null,t.createElement("hr",null))),t.createElement("div",{className:"drinkGrid"},t.createElement("div",{className:"cocktailGrid"},B.map((function(e,n){return t.createElement("div",{className:"wrap",key:n},t.createElement("div",{className:"recipeName"},e.name),t.createElement("div",{className:"cocktailCont"},e.ingredients.map((function(e,n){return t.createElement("p",{key:n},e)}))),t.createElement("div",{className:"cocktailCont"},e.instructions))})))),t.createElement("div",{className:"drinkMain",style:{height:"300px"}}))};function Tc(e){return Tc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Tc(e)}function Fc(){Fc=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,a=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",l=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var o=t&&t.prototype instanceof v?t:v,i=Object.create(o.prototype),l=new _(r||[]);return a(i,"_invoke",{value:S(e,n,l)}),i}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var p="suspendedStart",f="suspendedYield",m="executing",h="completed",g={};function v(){}function y(){}function b(){}var A={};s(A,i,(function(){return this}));var w=Object.getPrototypeOf,x=w&&w(w(P([])));x&&x!==n&&r.call(x,i)&&(A=x);var k=b.prototype=v.prototype=Object.create(A);function C(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function E(e,t){function n(a,o,i,l){var c=d(e[a],e,o);if("throw"!==c.type){var s=c.arg,u=s.value;return u&&"object"==Tc(u)&&r.call(u,"__await")?t.resolve(u.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(u).then((function(e){s.value=e,i(s)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var o;a(this,"_invoke",{value:function(e,r){function a(){return new t((function(t,a){n(e,r,t,a)}))}return o=o?o.then(a,a):a()}})}function S(t,n,r){var a=p;return function(o,i){if(a===m)throw Error("Generator is already running");if(a===h){if("throw"===o)throw i;return{value:e,done:!0}}for(r.method=o,r.arg=i;;){var l=r.delegate;if(l){var c=N(l,r);if(c){if(c===g)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(a===p)throw a=h,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);a=m;var s=d(t,n,r);if("normal"===s.type){if(a=r.done?h:f,s.arg===g)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(a=h,r.method="throw",r.arg=s.arg)}}}function N(t,n){var r=n.method,a=t.iterator[r];if(a===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,N(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),g;var o=d(a,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,g;var i=o.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,g):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,g)}function B(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function L(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(B,this),this.reset(!0)}function P(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var a=-1,o=function n(){for(;++a<t.length;)if(r.call(t,a))return n.value=t[a],n.done=!1,n;return n.value=e,n.done=!0,n};return o.next=o}}throw new TypeError(Tc(t)+" is not iterable")}return y.prototype=b,a(k,"constructor",{value:b,configurable:!0}),a(b,"constructor",{value:y,configurable:!0}),y.displayName=s(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,s(e,c,"GeneratorFunction")),e.prototype=Object.create(k),e},t.awrap=function(e){return{__await:e}},C(E.prototype),s(E.prototype,l,(function(){return this})),t.AsyncIterator=E,t.async=function(e,n,r,a,o){void 0===o&&(o=Promise);var i=new E(u(e,n,r,a),o);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(k),s(k,c,"Generator"),s(k,i,(function(){return this})),s(k,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=P,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(L),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function a(r,a){return l.type="throw",l.arg=t,n.next=r,a&&(n.method="next",n.arg=e),!!a}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],l=i.completion;if("root"===i.tryLoc)return a("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(c&&s){if(this.prev<i.catchLoc)return a(i.catchLoc,!0);if(this.prev<i.finallyLoc)return a(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return a(i.catchLoc,!0)}else{if(!s)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return a(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,g):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),L(n),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;L(n)}return a}}throw Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),g}},t}function Dc(e,t,n,r,a,o,i){try{var l=e[o](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,a)}function jc(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,l=[],c=!0,s=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){s=!0,a=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw a}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Rc(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Rc(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Rc(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const Ic=function(){var e=jc((0,t.useState)([]),2),n=e[0],r=e[1],a=jc((0,t.useState)([]),2),o=a[0],i=a[1],l=jc((0,t.useState)(null),2),c=(l[0],l[1]),s=jc((0,t.useState)(1),2),u=s[0],d=s[1],p=jc((0,t.useState)(!0),2),f=p[0],m=p[1],h=fe();(0,t.useEffect)((function(){g()}),[]);var g=function(){var e,t=(e=Fc().mark((function e(){var t,n,a,o,l;return Fc().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://www.thecocktaildb.com/api/json/v1/1/list.php?g=list",e.prev=2,e.next=5,or.get("https://www.thecocktaildb.com/api/json/v1/1/filter.php?g=Nick and Nora Glass");case 5:return n=e.sent,e.next=8,or.get(t);case 8:a=e.sent,o=n.data,l=a.data,r(o.drinks),i(l.drinks),m(!1),e.next=19;break;case 16:e.prev=16,e.t0=e.catch(2),c(e.t0);case 19:case"end":return e.stop()}}),e,null,[[2,16]])})),function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function i(e){Dc(o,r,a,i,l,"next",e)}function l(e){Dc(o,r,a,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),v=o.filter((function(e,t){return 22!==t})),y=Dl(n,6),b=y[u-1];return f?t.createElement(ml,null):t.createElement(t.Fragment,null,t.createElement("div",{className:"titleLineDrink"},t.createElement("h1",null,"Nick and Nora glass"),t.createElement("h1",null,t.createElement("hr",null))),t.createElement("div",null,t.createElement(Gl,null,t.createElement("div",{className:"cocktail"},b&&b.map((function(e){return t.createElement("div",{key:e.idDrink,className:"cocktails"},t.createElement("div",{className:"drink"},t.createElement("div",{className:"imgCont"},t.createElement("img",{src:e.strDrinkThumb,alt:""})),t.createElement("p",{className:"drinkLink"},e.strDrink),t.createElement("div",{className:"inerShadow"}),t.createElement("div",{className:"drinkDown"},t.createElement(Ar,{drinkID:e.idDrink}))),t.createElement("hr",null))}))),t.createElement("div",{className:"drinkMain"},y.length>1&&t.createElement(Gl,{mt:2,display:"flex",justifyContent:"center",className:"pagin"},t.createElement(mc,{count:y.length,page:u,siblingCount:0,onChange:function(e,t){d(t),window.scrollTo({top:0,behavior:"smooth"})}})))),t.createElement("div",{className:"titleLineDrink"},t.createElement("h1",null,"Search"),t.createElement("h1",null,t.createElement("hr",null))),t.createElement("div",{className:"drinkMain"},t.createElement("div",{className:"container"},t.createElement("p",null," Search cocktails by name, ingredients and first letter. Or chose drink by type of glass"),t.createElement(yi,null)),t.createElement("div",{className:"container"},t.createElement("div",{className:"area"},v.slice(0,30).map((function(e,n){return t.createElement("p",{key:n,className:"glass",onClick:function(){!function(e){var t="/cocktailGlass/".concat(e);h(t)}(e.strGlass),window.scrollTo({top:0,behavior:"smooth"})}},e.strGlass)}))))),t.createElement("div",{className:"drinkMain",style:{height:"300px"}})))};function zc(e){return zc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},zc(e)}function $c(){$c=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,a=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",l=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var o=t&&t.prototype instanceof v?t:v,i=Object.create(o.prototype),l=new _(r||[]);return a(i,"_invoke",{value:S(e,n,l)}),i}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var p="suspendedStart",f="suspendedYield",m="executing",h="completed",g={};function v(){}function y(){}function b(){}var A={};s(A,i,(function(){return this}));var w=Object.getPrototypeOf,x=w&&w(w(P([])));x&&x!==n&&r.call(x,i)&&(A=x);var k=b.prototype=v.prototype=Object.create(A);function C(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function E(e,t){function n(a,o,i,l){var c=d(e[a],e,o);if("throw"!==c.type){var s=c.arg,u=s.value;return u&&"object"==zc(u)&&r.call(u,"__await")?t.resolve(u.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(u).then((function(e){s.value=e,i(s)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var o;a(this,"_invoke",{value:function(e,r){function a(){return new t((function(t,a){n(e,r,t,a)}))}return o=o?o.then(a,a):a()}})}function S(t,n,r){var a=p;return function(o,i){if(a===m)throw Error("Generator is already running");if(a===h){if("throw"===o)throw i;return{value:e,done:!0}}for(r.method=o,r.arg=i;;){var l=r.delegate;if(l){var c=N(l,r);if(c){if(c===g)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(a===p)throw a=h,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);a=m;var s=d(t,n,r);if("normal"===s.type){if(a=r.done?h:f,s.arg===g)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(a=h,r.method="throw",r.arg=s.arg)}}}function N(t,n){var r=n.method,a=t.iterator[r];if(a===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,N(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),g;var o=d(a,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,g;var i=o.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,g):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,g)}function B(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function L(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(B,this),this.reset(!0)}function P(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var a=-1,o=function n(){for(;++a<t.length;)if(r.call(t,a))return n.value=t[a],n.done=!1,n;return n.value=e,n.done=!0,n};return o.next=o}}throw new TypeError(zc(t)+" is not iterable")}return y.prototype=b,a(k,"constructor",{value:b,configurable:!0}),a(b,"constructor",{value:y,configurable:!0}),y.displayName=s(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,s(e,c,"GeneratorFunction")),e.prototype=Object.create(k),e},t.awrap=function(e){return{__await:e}},C(E.prototype),s(E.prototype,l,(function(){return this})),t.AsyncIterator=E,t.async=function(e,n,r,a,o){void 0===o&&(o=Promise);var i=new E(u(e,n,r,a),o);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(k),s(k,c,"Generator"),s(k,i,(function(){return this})),s(k,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=P,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(L),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function a(r,a){return l.type="throw",l.arg=t,n.next=r,a&&(n.method="next",n.arg=e),!!a}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],l=i.completion;if("root"===i.tryLoc)return a("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(c&&s){if(this.prev<i.catchLoc)return a(i.catchLoc,!0);if(this.prev<i.finallyLoc)return a(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return a(i.catchLoc,!0)}else{if(!s)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return a(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,g):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),L(n),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;L(n)}return a}}throw Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),g}},t}function Gc(e,t,n,r,a,o,i){try{var l=e[o](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,a)}function Yc(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,l=[],c=!0,s=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){s=!0,a=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw a}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Uc(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Uc(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Uc(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const Wc=function(){var e=Yc((0,t.useState)(null),2),n=(e[0],e[1]),r=Yc((0,t.useState)([]),2),a=r[0],o=(r[1],Yc((0,t.useState)([]),2)),i=o[0],l=(o[1],Yc((0,t.useState)([]),2)),c=(l[0],l[1],me().drink);(0,t.useEffect)((function(){s(c),u(c)}),[c]);var s=function(){var e,t=(e=$c().mark((function e(t){var r;return $c().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r="https://www.thecocktaildb.com/api/json/v1/1/lookup.php?i=".concat(t),e.prev=1,e.next=4,or.get(r);case 4:e.sent.data,e.next=11;break;case 8:e.prev=8,e.t0=e.catch(1),n(e.t0);case 11:case"end":return e.stop()}}),e,null,[[1,8]])})),function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function i(e){Gc(o,r,a,i,l,"next",e)}function l(e){Gc(o,r,a,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}(),u=function(e){try{var t="https://www.thecocktaildb.com/api/json/v1/1/filter.php?g=Cocktail_glass".filter((function(t){return t.strDrink.toLowerCase().includes(e.toLowerCase())}));console.log("spisak pretrage koktela",t)}catch(e){n(e)}};return 0==a?t.createElement(t.Fragment,null,t.createElement("div",{className:"recipe"},t.createElement("table",null,t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",null,"Nothing found")))))):t.createElement(t.Fragment,null,t.createElement("div",{className:"recipe"},t.createElement("table",null,t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",{colSpan:2},"Search by Name ",c,": ",a," results"))),i.map((function(e,n){return t.createElement("tbody",{key:n},t.createElement("tr",null,t.createElement("td",{colSpan:2,className:"recipeName"},e.name)),t.createElement("tr",null,t.createElement("td",{className:"for"},"Ingredients:"),t.createElement("td",{className:"context"},e.ingredients.map((function(e,n){return t.createElement("p",{key:n},e)})))),t.createElement("tr",null,t.createElement("td",{colSpan:2,className:"for"},"Instructions:")),t.createElement("tr",null,t.createElement("td",{colSpan:2,className:"context"},e.instructions)),t.createElement("tr",null,t.createElement("td",{colSpan:2},t.createElement("hr",null))))})))))};function Hc(e){return Hc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Hc(e)}function qc(){qc=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,a=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",l=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var o=t&&t.prototype instanceof v?t:v,i=Object.create(o.prototype),l=new _(r||[]);return a(i,"_invoke",{value:S(e,n,l)}),i}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var p="suspendedStart",f="suspendedYield",m="executing",h="completed",g={};function v(){}function y(){}function b(){}var A={};s(A,i,(function(){return this}));var w=Object.getPrototypeOf,x=w&&w(w(P([])));x&&x!==n&&r.call(x,i)&&(A=x);var k=b.prototype=v.prototype=Object.create(A);function C(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function E(e,t){function n(a,o,i,l){var c=d(e[a],e,o);if("throw"!==c.type){var s=c.arg,u=s.value;return u&&"object"==Hc(u)&&r.call(u,"__await")?t.resolve(u.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(u).then((function(e){s.value=e,i(s)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var o;a(this,"_invoke",{value:function(e,r){function a(){return new t((function(t,a){n(e,r,t,a)}))}return o=o?o.then(a,a):a()}})}function S(t,n,r){var a=p;return function(o,i){if(a===m)throw Error("Generator is already running");if(a===h){if("throw"===o)throw i;return{value:e,done:!0}}for(r.method=o,r.arg=i;;){var l=r.delegate;if(l){var c=N(l,r);if(c){if(c===g)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(a===p)throw a=h,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);a=m;var s=d(t,n,r);if("normal"===s.type){if(a=r.done?h:f,s.arg===g)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(a=h,r.method="throw",r.arg=s.arg)}}}function N(t,n){var r=n.method,a=t.iterator[r];if(a===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,N(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),g;var o=d(a,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,g;var i=o.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,g):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,g)}function B(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function L(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(B,this),this.reset(!0)}function P(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var a=-1,o=function n(){for(;++a<t.length;)if(r.call(t,a))return n.value=t[a],n.done=!1,n;return n.value=e,n.done=!0,n};return o.next=o}}throw new TypeError(Hc(t)+" is not iterable")}return y.prototype=b,a(k,"constructor",{value:b,configurable:!0}),a(b,"constructor",{value:y,configurable:!0}),y.displayName=s(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,s(e,c,"GeneratorFunction")),e.prototype=Object.create(k),e},t.awrap=function(e){return{__await:e}},C(E.prototype),s(E.prototype,l,(function(){return this})),t.AsyncIterator=E,t.async=function(e,n,r,a,o){void 0===o&&(o=Promise);var i=new E(u(e,n,r,a),o);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(k),s(k,c,"Generator"),s(k,i,(function(){return this})),s(k,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=P,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(L),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function a(r,a){return l.type="throw",l.arg=t,n.next=r,a&&(n.method="next",n.arg=e),!!a}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],l=i.completion;if("root"===i.tryLoc)return a("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(c&&s){if(this.prev<i.catchLoc)return a(i.catchLoc,!0);if(this.prev<i.finallyLoc)return a(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return a(i.catchLoc,!0)}else{if(!s)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return a(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,g):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),L(n),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;L(n)}return a}}throw Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),g}},t}function Vc(e,t,n,r,a,o,i){try{var l=e[o](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,a)}function Qc(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,l=[],c=!0,s=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){s=!0,a=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw a}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Kc(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Kc(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Kc(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const Zc=function(){var e=Qc((0,t.useState)([]),2),n=e[0],r=e[1],a=Qc((0,t.useState)([]),2),o=a[0],i=a[1],l=Qc((0,t.useState)(null),2),c=(l[0],l[1]),s=Qc((0,t.useState)(1),2),u=s[0],d=s[1],p=Qc((0,t.useState)(!0),2),f=p[0],m=p[1],h=me().glass,g=fe();(0,t.useEffect)((function(){v(h)}),[h]);var v=function(){var e,t=(e=qc().mark((function e(){var t,n,a,o,l,s;return qc().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://www.thecocktaildb.com/api/json/v1/1/filter.php?g=".concat(h),n="https://www.thecocktaildb.com/api/json/v1/1/list.php?g=list",e.prev=2,e.next=5,or.get(t);case 5:return a=e.sent,e.next=8,or.get(n);case 8:o=e.sent,l=a.data,s=o.data,r(l.drinks),i(s.drinks),m(!1),e.next=19;break;case 16:e.prev=16,e.t0=e.catch(2),c(e.t0);case 19:case"end":return e.stop()}}),e,null,[[2,16]])})),function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function i(e){Vc(o,r,a,i,l,"next",e)}function l(e){Vc(o,r,a,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),y=o.filter((function(e,t){return 22!==t})),b=Dl(n,9),A=b[u-1];return f?t.createElement(ml,null):t.createElement(t.Fragment,null,t.createElement("div",{className:"titleLineDrink"},t.createElement("h1",null,h),t.createElement("h1",null,t.createElement("hr",null))),t.createElement("div",null,t.createElement(Gl,null,t.createElement("div",{className:"cocktail"},A&&A.map((function(e){return t.createElement("div",{key:e.idDrink,className:"cocktails"},t.createElement("div",{className:"drink"},t.createElement("div",{className:"imgCont"},t.createElement("img",{src:e.strDrinkThumb,alt:""})),t.createElement("p",{className:"drinkLink"},e.strDrink),t.createElement("div",{className:"inerShadow"}),t.createElement("div",{className:"drinkDown"},t.createElement(Ar,{drinkID:e.idDrink}))),t.createElement("hr",null))}))),t.createElement("div",{className:"recipe"},b.length>1&&t.createElement(Gl,{mt:2,display:"flex",justifyContent:"center",className:"paginDrink"},t.createElement(mc,{count:b.length,page:u,siblingCount:0,onChange:function(e,t){d(t),window.scrollTo({top:0,behavior:"smooth"})}})))),t.createElement("div",{className:"drinkMain"},t.createElement("div",{className:"container"},t.createElement("p",null," Search cocktails by name, ingredients and first letter. Or chose drink by tip of glass"),t.createElement(yi,null)),t.createElement("div",{className:"container"},t.createElement("div",{className:"area"},y.slice(0,30).map((function(e,n){return t.createElement("p",{key:n,className:"glass",onClick:function(){!function(e){var t="/cocktailGlass/".concat(e);g(t)}(e.strGlass),window.scrollTo({top:0,behavior:"smooth"})}},e.strGlass)}))))),t.createElement("div",{className:"drinkMain",style:{height:"300px"}})))};function Xc(e){return Xc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Xc(e)}function Jc(){Jc=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,a=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",l=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var o=t&&t.prototype instanceof v?t:v,i=Object.create(o.prototype),l=new _(r||[]);return a(i,"_invoke",{value:S(e,n,l)}),i}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var p="suspendedStart",f="suspendedYield",m="executing",h="completed",g={};function v(){}function y(){}function b(){}var A={};s(A,i,(function(){return this}));var w=Object.getPrototypeOf,x=w&&w(w(P([])));x&&x!==n&&r.call(x,i)&&(A=x);var k=b.prototype=v.prototype=Object.create(A);function C(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function E(e,t){function n(a,o,i,l){var c=d(e[a],e,o);if("throw"!==c.type){var s=c.arg,u=s.value;return u&&"object"==Xc(u)&&r.call(u,"__await")?t.resolve(u.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(u).then((function(e){s.value=e,i(s)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var o;a(this,"_invoke",{value:function(e,r){function a(){return new t((function(t,a){n(e,r,t,a)}))}return o=o?o.then(a,a):a()}})}function S(t,n,r){var a=p;return function(o,i){if(a===m)throw Error("Generator is already running");if(a===h){if("throw"===o)throw i;return{value:e,done:!0}}for(r.method=o,r.arg=i;;){var l=r.delegate;if(l){var c=N(l,r);if(c){if(c===g)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(a===p)throw a=h,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);a=m;var s=d(t,n,r);if("normal"===s.type){if(a=r.done?h:f,s.arg===g)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(a=h,r.method="throw",r.arg=s.arg)}}}function N(t,n){var r=n.method,a=t.iterator[r];if(a===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,N(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),g;var o=d(a,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,g;var i=o.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,g):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,g)}function B(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function L(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(B,this),this.reset(!0)}function P(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var a=-1,o=function n(){for(;++a<t.length;)if(r.call(t,a))return n.value=t[a],n.done=!1,n;return n.value=e,n.done=!0,n};return o.next=o}}throw new TypeError(Xc(t)+" is not iterable")}return y.prototype=b,a(k,"constructor",{value:b,configurable:!0}),a(b,"constructor",{value:y,configurable:!0}),y.displayName=s(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,s(e,c,"GeneratorFunction")),e.prototype=Object.create(k),e},t.awrap=function(e){return{__await:e}},C(E.prototype),s(E.prototype,l,(function(){return this})),t.AsyncIterator=E,t.async=function(e,n,r,a,o){void 0===o&&(o=Promise);var i=new E(u(e,n,r,a),o);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(k),s(k,c,"Generator"),s(k,i,(function(){return this})),s(k,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=P,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(L),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function a(r,a){return l.type="throw",l.arg=t,n.next=r,a&&(n.method="next",n.arg=e),!!a}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],l=i.completion;if("root"===i.tryLoc)return a("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(c&&s){if(this.prev<i.catchLoc)return a(i.catchLoc,!0);if(this.prev<i.finallyLoc)return a(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return a(i.catchLoc,!0)}else{if(!s)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return a(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,g):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),L(n),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;L(n)}return a}}throw Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),g}},t}function es(e,t,n,r,a,o,i){try{var l=e[o](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,a)}function ts(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,l=[],c=!0,s=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){s=!0,a=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw a}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return ns(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ns(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ns(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const rs=function(){var e=ts((0,t.useState)(null),2),n=(e[0],e[1]),r=ts((0,t.useState)([]),2),a=r[0],o=r[1],i=ts((0,t.useState)([]),2),l=(i[0],i[1],ts((0,t.useState)(1),2)),c=(l[0],l[1],ts((0,t.useState)(!0),2)),s=c[0],u=c[1],d=me().recipeId;(0,t.useEffect)((function(){p(d)}),[d]);var p=function(){var e,t=(e=Jc().mark((function e(t){var r,a,i;return Jc().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r="https://www.themealdb.com/api/json/v1/1/lookup.php?i=".concat(t),e.prev=1,e.next=4,or.get(r);case 4:a=e.sent,i=a.data.meals,o(i),u(!1),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),n(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})),function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function i(e){es(o,r,a,i,l,"next",e)}function l(e){es(o,r,a,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}();return s?t.createElement(ml,null):null==a?t.createElement(t.Fragment,null,t.createElement("table",{className:"areaMain"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",null,"Nothing found")))),t.createElement("div",{className:"food",style:{height:"300px"}})):t.createElement(t.Fragment,null,t.createElement("div",{className:"areaMain"},a.map((function(e,n){return t.createElement("div",{key:n},t.createElement("div",{style:{width:"100%"}},t.createElement("div",{className:"recipeName"},e.strMeal,t.createElement("p",null,e.strArea+" - "+e.strCategory)),t.createElement("div",{className:"mealImg"},t.createElement("img",{className:"imgMeal",src:e.strMealThumb,alt:""}))),t.createElement("div",{className:"ingPlace"}),t.createElement("div",{className:"ingPlace"},t.createElement("div",{style:{width:"50%"}},e.strMeasure1&&t.createElement("div",{className:"measPlace"},t.createElement("div",{className:"measure"},e.strMeasure1+" "+e.strIngredient1),t.createElement("div",null,t.createElement("img",{className:"ingImg",src:"https://www.themealdb.com/images/ingredients/".concat(e.strIngredient1,".png"),alt:""}))),e.strMeasure2&&t.createElement("div",{className:"measPlace"},t.createElement("div",{className:"measure"},e.strMeasure2+" "+e.strIngredient2),t.createElement("div",null,t.createElement("img",{className:"ingImg",src:"https://www.themealdb.com/images/ingredients/".concat(e.strIngredient2,".png"),alt:""}))),e.strMeasure3&&t.createElement("div",{className:"measPlace"},t.createElement("div",{className:"measure"},e.strMeasure3+" "+e.strIngredient3),t.createElement("div",null,t.createElement("img",{className:"ingImg",src:"https://www.themealdb.com/images/ingredients/".concat(e.strIngredient3,".png"),alt:""}))),e.strMeasure4&&t.createElement("div",{className:"measPlace"},t.createElement("div",{className:"measure"},e.strMeasure4+" "+e.strIngredient4),t.createElement("div",null,t.createElement("img",{className:"ingImg",src:"https://www.themealdb.com/images/ingredients/".concat(e.strIngredient4,".png"),alt:""}))),e.strMeasure5&&t.createElement("div",{className:"measPlace"},t.createElement("div",{className:"measure"},e.strMeasure5+" "+e.strIngredient5),t.createElement("div",null,t.createElement("img",{className:"ingImg",src:"https://www.themealdb.com/images/ingredients/".concat(e.strIngredient5,".png"),alt:""}))),e.strMeasure6&&t.createElement("div",{className:"measPlace"},t.createElement("div",{className:"measure"},e.strMeasure6+" "+e.strIngredient6),t.createElement("div",null,t.createElement("img",{className:"ingImg",src:"https://www.themealdb.com/images/ingredients/".concat(e.strIngredient6,".png"),alt:""}))),e.strMeasure7&&t.createElement("div",{className:"measPlace"},t.createElement("div",{className:"measure"},e.strMeasure7+" "+e.strIngredient7),t.createElement("div",null,t.createElement("img",{className:"ingImg",src:"https://www.themealdb.com/images/ingredients/".concat(e.strIngredient7,".png"),alt:""}))),e.strMeasure8&&t.createElement("div",{className:"measPlace"},t.createElement("div",{className:"measure"},e.strMeasure8+" "+e.strIngredient8),t.createElement("div",null,t.createElement("img",{className:"ingImg",src:"https://www.themealdb.com/images/ingredients/".concat(e.strIngredient8,".png"),alt:""}))),e.strMeasure9&&t.createElement("div",{className:"measPlace"},t.createElement("div",{className:"measure"},e.strMeasure9+" "+e.strIngredient9),t.createElement("div",null,t.createElement("img",{className:"ingImg",src:"https://www.themealdb.com/images/ingredients/".concat(e.strIngredient9,".png"),alt:""}))),e.strMeasure10&&t.createElement("div",{className:"measPlace"},t.createElement("div",{className:"measure"},e.strMeasure10+" "+e.strIngredient10),t.createElement("div",null,t.createElement("img",{className:"ingImg",src:"https://www.themealdb.com/images/ingredients/".concat(e.strIngredient10,".png"),alt:""}))),e.strMeasure11&&t.createElement("div",{className:"measPlace"},t.createElement("div",{className:"measure"},e.strMeasure11+" "+e.strIngredient11),t.createElement("div",null,t.createElement("img",{className:"ingImg",src:"https://www.themealdb.com/images/ingredients/".concat(e.strIngredient11,".png"),alt:""}))),e.strMeasure12&&t.createElement("div",{className:"measPlace"},t.createElement("div",{className:"measure"},e.strMeasure12+" "+e.strIngredient12),t.createElement("div",null,t.createElement("img",{className:"ingImg",src:"https://www.themealdb.com/images/ingredients/".concat(e.strIngredient12,".png"),alt:""}))),e.strMeasure13&&t.createElement("div",{className:"measPlace"},t.createElement("div",{className:"measure"},e.strMeasure13+" "+e.strIngredient13),t.createElement("div",null,t.createElement("img",{className:"ingImg",src:"https://www.themealdb.com/images/ingredients/".concat(e.strIngredient13,".png"),alt:""}))),e.strMeasure14&&t.createElement("div",{className:"measPlace"},t.createElement("div",{className:"measure"},e.strMeasure14+" "+e.strIngredient14),t.createElement("div",null,t.createElement("img",{className:"ingImg",src:"https://www.themealdb.com/images/ingredients/".concat(e.strIngredient14,".png"),alt:""}))),e.strMeasure15&&t.createElement("div",{className:"measPlace"},t.createElement("div",{className:"measure"},e.strMeasure15+" "+e.strIngredient15),t.createElement("div",null,t.createElement("img",{className:"ingImg",src:"https://www.themealdb.com/images/ingredients/".concat(e.strIngredient15,".png"),alt:""}))),e.strMeasure16&&t.createElement("div",{className:"measPlace"},t.createElement("div",{className:"measure"},e.strMeasure16+" "+e.strIngredient16),t.createElement("div",null,t.createElement("img",{className:"ingImg",src:"https://www.themealdb.com/images/ingredients/".concat(e.strIngredient16,".png"),alt:""})))),t.createElement("div",{style:{width:"50%"}},t.createElement("div",{className:"context"},e.strInstructions),t.createElement("p",null," watch on",t.createElement("a",{href:e.strYoutube,target:"_blank"}," YouTube")))))}))),t.createElement("div",{className:"food",style:{height:"300px"}}))};function as(e){return as="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},as(e)}function os(){os=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,a=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",l=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var o=t&&t.prototype instanceof v?t:v,i=Object.create(o.prototype),l=new _(r||[]);return a(i,"_invoke",{value:S(e,n,l)}),i}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var p="suspendedStart",f="suspendedYield",m="executing",h="completed",g={};function v(){}function y(){}function b(){}var A={};s(A,i,(function(){return this}));var w=Object.getPrototypeOf,x=w&&w(w(P([])));x&&x!==n&&r.call(x,i)&&(A=x);var k=b.prototype=v.prototype=Object.create(A);function C(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function E(e,t){function n(a,o,i,l){var c=d(e[a],e,o);if("throw"!==c.type){var s=c.arg,u=s.value;return u&&"object"==as(u)&&r.call(u,"__await")?t.resolve(u.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(u).then((function(e){s.value=e,i(s)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var o;a(this,"_invoke",{value:function(e,r){function a(){return new t((function(t,a){n(e,r,t,a)}))}return o=o?o.then(a,a):a()}})}function S(t,n,r){var a=p;return function(o,i){if(a===m)throw Error("Generator is already running");if(a===h){if("throw"===o)throw i;return{value:e,done:!0}}for(r.method=o,r.arg=i;;){var l=r.delegate;if(l){var c=N(l,r);if(c){if(c===g)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(a===p)throw a=h,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);a=m;var s=d(t,n,r);if("normal"===s.type){if(a=r.done?h:f,s.arg===g)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(a=h,r.method="throw",r.arg=s.arg)}}}function N(t,n){var r=n.method,a=t.iterator[r];if(a===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,N(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),g;var o=d(a,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,g;var i=o.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,g):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,g)}function B(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function L(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(B,this),this.reset(!0)}function P(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var a=-1,o=function n(){for(;++a<t.length;)if(r.call(t,a))return n.value=t[a],n.done=!1,n;return n.value=e,n.done=!0,n};return o.next=o}}throw new TypeError(as(t)+" is not iterable")}return y.prototype=b,a(k,"constructor",{value:b,configurable:!0}),a(b,"constructor",{value:y,configurable:!0}),y.displayName=s(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,s(e,c,"GeneratorFunction")),e.prototype=Object.create(k),e},t.awrap=function(e){return{__await:e}},C(E.prototype),s(E.prototype,l,(function(){return this})),t.AsyncIterator=E,t.async=function(e,n,r,a,o){void 0===o&&(o=Promise);var i=new E(u(e,n,r,a),o);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(k),s(k,c,"Generator"),s(k,i,(function(){return this})),s(k,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=P,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(L),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function a(r,a){return l.type="throw",l.arg=t,n.next=r,a&&(n.method="next",n.arg=e),!!a}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],l=i.completion;if("root"===i.tryLoc)return a("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(c&&s){if(this.prev<i.catchLoc)return a(i.catchLoc,!0);if(this.prev<i.finallyLoc)return a(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return a(i.catchLoc,!0)}else{if(!s)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return a(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,g):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),L(n),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;L(n)}return a}}throw Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),g}},t}function is(e,t,n,r,a,o,i){try{var l=e[o](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,a)}function ls(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,l=[],c=!0,s=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){s=!0,a=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw a}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return cs(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?cs(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function cs(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const ss=function(){var e=ls((0,t.useState)(null),2),n=(e[0],e[1]),r=ls((0,t.useState)([]),2),a=r[0],o=r[1],i=ls((0,t.useState)(!0),2),l=i[0],c=i[1],s=fe(),u=me().area;(0,t.useEffect)((function(){d(u)}),[u]);var d=function(){var e,t=(e=os().mark((function e(){var t,r,a;return os().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://www.themealdb.com/api/json/v1/1/filter.php?a=".concat(u),e.prev=1,e.next=4,or.get(t);case 4:r=e.sent,a=r.data,o(a.meals),c(!1),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),n(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})),function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function i(e){is(o,r,a,i,l,"next",e)}function l(e){is(o,r,a,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),p=function(e){var t="/home2/".concat(u,"/recipe/").concat(e);s(t)};return l?t.createElement(ml,null):t.createElement(t.Fragment,null,t.createElement("div",{className:"titleLineFood"},t.createElement("h1",null,u),t.createElement("h1",null,t.createElement("hr",null))),t.createElement("div",{className:"areaMain"},a.map((function(e,n){return t.createElement("div",{key:n,className:"results"},t.createElement("div",{className:"recipeResult",onClick:function(){p(e.idMeal),window.scrollTo({top:0,behavior:"smooth"})}},e.strMeal),t.createElement("div",null,t.createElement("img",{className:"imgThumb",src:e.strMealThumb,alt:"",onClick:function(){p(e.idMeal),window.scrollTo({top:0,behavior:"smooth"})}})))}))),t.createElement("div",{className:"food",style:{height:"300px"}}),t.createElement("div",{className:"footer"}))};function us(e){return us="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},us(e)}function ds(){ds=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,a=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",l=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var o=t&&t.prototype instanceof v?t:v,i=Object.create(o.prototype),l=new _(r||[]);return a(i,"_invoke",{value:S(e,n,l)}),i}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var p="suspendedStart",f="suspendedYield",m="executing",h="completed",g={};function v(){}function y(){}function b(){}var A={};s(A,i,(function(){return this}));var w=Object.getPrototypeOf,x=w&&w(w(P([])));x&&x!==n&&r.call(x,i)&&(A=x);var k=b.prototype=v.prototype=Object.create(A);function C(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function E(e,t){function n(a,o,i,l){var c=d(e[a],e,o);if("throw"!==c.type){var s=c.arg,u=s.value;return u&&"object"==us(u)&&r.call(u,"__await")?t.resolve(u.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(u).then((function(e){s.value=e,i(s)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var o;a(this,"_invoke",{value:function(e,r){function a(){return new t((function(t,a){n(e,r,t,a)}))}return o=o?o.then(a,a):a()}})}function S(t,n,r){var a=p;return function(o,i){if(a===m)throw Error("Generator is already running");if(a===h){if("throw"===o)throw i;return{value:e,done:!0}}for(r.method=o,r.arg=i;;){var l=r.delegate;if(l){var c=N(l,r);if(c){if(c===g)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(a===p)throw a=h,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);a=m;var s=d(t,n,r);if("normal"===s.type){if(a=r.done?h:f,s.arg===g)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(a=h,r.method="throw",r.arg=s.arg)}}}function N(t,n){var r=n.method,a=t.iterator[r];if(a===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,N(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),g;var o=d(a,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,g;var i=o.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,g):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,g)}function B(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function L(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(B,this),this.reset(!0)}function P(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var a=-1,o=function n(){for(;++a<t.length;)if(r.call(t,a))return n.value=t[a],n.done=!1,n;return n.value=e,n.done=!0,n};return o.next=o}}throw new TypeError(us(t)+" is not iterable")}return y.prototype=b,a(k,"constructor",{value:b,configurable:!0}),a(b,"constructor",{value:y,configurable:!0}),y.displayName=s(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,s(e,c,"GeneratorFunction")),e.prototype=Object.create(k),e},t.awrap=function(e){return{__await:e}},C(E.prototype),s(E.prototype,l,(function(){return this})),t.AsyncIterator=E,t.async=function(e,n,r,a,o){void 0===o&&(o=Promise);var i=new E(u(e,n,r,a),o);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(k),s(k,c,"Generator"),s(k,i,(function(){return this})),s(k,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=P,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(L),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function a(r,a){return l.type="throw",l.arg=t,n.next=r,a&&(n.method="next",n.arg=e),!!a}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],l=i.completion;if("root"===i.tryLoc)return a("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(c&&s){if(this.prev<i.catchLoc)return a(i.catchLoc,!0);if(this.prev<i.finallyLoc)return a(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return a(i.catchLoc,!0)}else{if(!s)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return a(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,g):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),L(n),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;L(n)}return a}}throw Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),g}},t}function ps(e,t,n,r,a,o,i){try{var l=e[o](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,a)}function fs(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,l=[],c=!0,s=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){s=!0,a=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw a}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return ms(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ms(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ms(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const hs=function(){var e=fs((0,t.useState)(null),2),n=(e[0],e[1]),r=fs((0,t.useState)([]),2),a=r[0],o=r[1],i=fs((0,t.useState)([]),2),l=i[0],c=i[1],s=fs((0,t.useState)(!0),2),u=s[0],d=s[1],p=fe(),f=me().groceries;(0,t.useEffect)((function(){m(f)}),[f]);var m=function(){var e,t=(e=ds().mark((function e(){var t,r,a,i,l,s;return ds().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://www.themealdb.com/api/json/v1/1/filter.php?i=".concat(f),r="https://www.themealdb.com/api/json/v1/1/search.php?s=".concat(f),e.prev=2,e.next=5,or.get(t);case 5:return a=e.sent,e.next=8,or.get(r);case 8:i=e.sent,l=a.data,s=i.data,o(l.meals),c(s.meals),d(!1),e.next=19;break;case 16:e.prev=16,e.t0=e.catch(2),n(e.t0);case 19:case"end":return e.stop()}}),e,null,[[2,16]])})),function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function i(e){ps(o,r,a,i,l,"next",e)}function l(e){ps(o,r,a,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),h=function(e){var t="/".concat(f,"/recipe/").concat(e);p(t)};return u?t.createElement(ml,null):null==a&&null==l?t.createElement(t.Fragment,null,t.createElement("div",{className:"food"},t.createElement("p",{className:"resTitle"},f," not found"),t.createElement("hr",null)),t.createElement("div",{className:"food",style:{height:"300px"}})):null==l?t.createElement(t.Fragment,null,t.createElement("div",{className:"titleLineFood"},t.createElement("h1",null,"groceries ",f),t.createElement("h1",null,t.createElement("hr",null))),t.createElement("div",{className:"areaMain"},a.map((function(e,n){return t.createElement("div",{key:n,className:"results"},t.createElement("div",{className:"recipeResult",onClick:function(){h(e.idMeal),window.scrollTo({top:0,behavior:"smooth"})}},e.strMeal),t.createElement("div",null,t.createElement("img",{className:"imgThumb",src:e.strMealThumb,alt:"",onClick:function(){h(e.idMeal),window.scrollTo({top:0,behavior:"smooth"})}})))}))),t.createElement("div",{className:"food",style:{height:"300px"}}),t.createElement("div",{className:"footer"})):null==a?t.createElement(t.Fragment,null,t.createElement("div",{className:"titleLineFood"},t.createElement("h1",null,"Dish by name ",f),t.createElement("h1",null,t.createElement("hr",null))),t.createElement("div",{className:"areaMain"},l.map((function(e,n){return t.createElement("div",{key:n,className:"results"},t.createElement("div",{className:"recipeResult",onClick:function(){h(e.idMeal),window.scrollTo({top:0,behavior:"smooth"})}},e.strMeal),t.createElement("div",null,t.createElement("img",{className:"imgThumb",src:e.strMealThumb,alt:"",onClick:function(){h(e.idMeal),window.scrollTo({top:0,behavior:"smooth"})}})))}))),t.createElement("div",{className:"food",style:{height:"300px"}}),t.createElement("div",{className:"footer"})):t.createElement(t.Fragment,null,t.createElement("div",{className:"titleLineFood"},t.createElement("h1",null,"groceries ",f),t.createElement("h1",null,t.createElement("hr",null))),t.createElement("div",{className:"areaMain"},a.map((function(e,n){return t.createElement("div",{key:n,className:"results"},t.createElement("div",{className:"recipeResult",onClick:function(){h(e.idMeal),window.scrollTo({top:0,behavior:"smooth"})}},e.strMeal),t.createElement("div",null,t.createElement("img",{className:"imgThumb",src:e.strMealThumb,alt:"",onClick:function(){h(e.idMeal),window.scrollTo({top:0,behavior:"smooth"})}})))}))),t.createElement("div",{className:"titleLineFood"},t.createElement("h1",null,"Dish by name ",f),t.createElement("h1",null,t.createElement("hr",null))),t.createElement("div",{className:"areaMain"},l.map((function(e,n){return t.createElement("div",{key:n,className:"results"},t.createElement("div",{className:"recipeResult",onClick:function(){h(e.idMeal),window.scrollTo({top:0,behavior:"smooth"})}},e.strMeal),t.createElement("div",null,t.createElement("img",{className:"imgThumb",src:e.strMealThumb,alt:"",onClick:function(){h(e.idMeal),window.scrollTo({top:0,behavior:"smooth"})}})))}))),t.createElement("div",{className:"food",style:{height:"300px"}}),t.createElement("div",{className:"footer"}))};function gs(e){return gs="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},gs(e)}function vs(){vs=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,a=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",l=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var o=t&&t.prototype instanceof v?t:v,i=Object.create(o.prototype),l=new _(r||[]);return a(i,"_invoke",{value:S(e,n,l)}),i}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var p="suspendedStart",f="suspendedYield",m="executing",h="completed",g={};function v(){}function y(){}function b(){}var A={};s(A,i,(function(){return this}));var w=Object.getPrototypeOf,x=w&&w(w(P([])));x&&x!==n&&r.call(x,i)&&(A=x);var k=b.prototype=v.prototype=Object.create(A);function C(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function E(e,t){function n(a,o,i,l){var c=d(e[a],e,o);if("throw"!==c.type){var s=c.arg,u=s.value;return u&&"object"==gs(u)&&r.call(u,"__await")?t.resolve(u.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(u).then((function(e){s.value=e,i(s)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var o;a(this,"_invoke",{value:function(e,r){function a(){return new t((function(t,a){n(e,r,t,a)}))}return o=o?o.then(a,a):a()}})}function S(t,n,r){var a=p;return function(o,i){if(a===m)throw Error("Generator is already running");if(a===h){if("throw"===o)throw i;return{value:e,done:!0}}for(r.method=o,r.arg=i;;){var l=r.delegate;if(l){var c=N(l,r);if(c){if(c===g)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(a===p)throw a=h,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);a=m;var s=d(t,n,r);if("normal"===s.type){if(a=r.done?h:f,s.arg===g)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(a=h,r.method="throw",r.arg=s.arg)}}}function N(t,n){var r=n.method,a=t.iterator[r];if(a===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,N(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),g;var o=d(a,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,g;var i=o.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,g):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,g)}function B(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function L(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(B,this),this.reset(!0)}function P(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var a=-1,o=function n(){for(;++a<t.length;)if(r.call(t,a))return n.value=t[a],n.done=!1,n;return n.value=e,n.done=!0,n};return o.next=o}}throw new TypeError(gs(t)+" is not iterable")}return y.prototype=b,a(k,"constructor",{value:b,configurable:!0}),a(b,"constructor",{value:y,configurable:!0}),y.displayName=s(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,s(e,c,"GeneratorFunction")),e.prototype=Object.create(k),e},t.awrap=function(e){return{__await:e}},C(E.prototype),s(E.prototype,l,(function(){return this})),t.AsyncIterator=E,t.async=function(e,n,r,a,o){void 0===o&&(o=Promise);var i=new E(u(e,n,r,a),o);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(k),s(k,c,"Generator"),s(k,i,(function(){return this})),s(k,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=P,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(L),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function a(r,a){return l.type="throw",l.arg=t,n.next=r,a&&(n.method="next",n.arg=e),!!a}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],l=i.completion;if("root"===i.tryLoc)return a("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(c&&s){if(this.prev<i.catchLoc)return a(i.catchLoc,!0);if(this.prev<i.finallyLoc)return a(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return a(i.catchLoc,!0)}else{if(!s)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return a(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,g):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),L(n),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;L(n)}return a}}throw Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),g}},t}function ys(e,t,n,r,a,o,i){try{var l=e[o](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,a)}function bs(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,l=[],c=!0,s=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){s=!0,a=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw a}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return As(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?As(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function As(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const ws=function(){var e=bs((0,t.useState)(null),2),n=(e[0],e[1]),r=bs((0,t.useState)([]),2),a=r[0],o=r[1],i=bs((0,t.useState)(!0),2),l=i[0],c=i[1],s=fe(),u=me().category;(0,t.useEffect)((function(){d(u)}),[u]),console.log("iz RecipeResultscategory:",u);var d=function(){var e,t=(e=vs().mark((function e(){var t,r,a;return vs().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://www.themealdb.com/api/json/v1/1/filter.php?c=".concat(u),e.prev=1,e.next=4,or.get(t);case 4:r=e.sent,a=r.data,o(a.meals),c(!1),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),n(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})),function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function i(e){ys(o,r,a,i,l,"next",e)}function l(e){ys(o,r,a,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),p=function(e){var t="/home3/".concat(u,"/recipe/").concat(e);s(t)};return l?t.createElement(ml,null):t.createElement(t.Fragment,null,t.createElement("div",{className:"titleLineFood"},t.createElement("h1",null,u),t.createElement("h1",null,t.createElement("hr",null))),t.createElement("div",{className:"areaMain"},a.map((function(e,n){return t.createElement("div",{key:n,className:"results"},t.createElement("div",{className:"recipeResult",onClick:function(){p(e.idMeal),window.scrollTo({top:0,behavior:"smooth"})}},e.strMeal),t.createElement("div",null,t.createElement("img",{className:"imgThumb",src:e.strMealThumb,alt:"",onClick:function(){p(e.idMeal),window.scrollTo({top:0,behavior:"smooth"})}})))}))),t.createElement("div",{className:"food",style:{height:"300px"}}),t.createElement("div",{className:"footer"}))},xs=a.p+"3b5136c2b5f16cecae6c224bdc759cdb.jpg",ks=a.p+"13d48f37ad6604e1934c685861d08332.jpg",Cs=a.p+"14de9fbf1bb72cce14a3f9c0e740ff1b.jpg",Es=a.p+"70e86801fe8d081747e81cd21a200bb1.jpg",Ss=a.p+"8892f4dde6ec03c202a4c9ede4689a4b.jpg",Ns=a.p+"85bedb6c960f7ba1562d07c5b5f90394.jpg",Bs=a.p+"5cf2b6e28d1848b7283e8a6a99c1e3b2.jpg";function Ls(e){return Ls="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ls(e)}function _s(){_s=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,a=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",l=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var o=t&&t.prototype instanceof v?t:v,i=Object.create(o.prototype),l=new _(r||[]);return a(i,"_invoke",{value:S(e,n,l)}),i}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var p="suspendedStart",f="suspendedYield",m="executing",h="completed",g={};function v(){}function y(){}function b(){}var A={};s(A,i,(function(){return this}));var w=Object.getPrototypeOf,x=w&&w(w(P([])));x&&x!==n&&r.call(x,i)&&(A=x);var k=b.prototype=v.prototype=Object.create(A);function C(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function E(e,t){function n(a,o,i,l){var c=d(e[a],e,o);if("throw"!==c.type){var s=c.arg,u=s.value;return u&&"object"==Ls(u)&&r.call(u,"__await")?t.resolve(u.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(u).then((function(e){s.value=e,i(s)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var o;a(this,"_invoke",{value:function(e,r){function a(){return new t((function(t,a){n(e,r,t,a)}))}return o=o?o.then(a,a):a()}})}function S(t,n,r){var a=p;return function(o,i){if(a===m)throw Error("Generator is already running");if(a===h){if("throw"===o)throw i;return{value:e,done:!0}}for(r.method=o,r.arg=i;;){var l=r.delegate;if(l){var c=N(l,r);if(c){if(c===g)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(a===p)throw a=h,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);a=m;var s=d(t,n,r);if("normal"===s.type){if(a=r.done?h:f,s.arg===g)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(a=h,r.method="throw",r.arg=s.arg)}}}function N(t,n){var r=n.method,a=t.iterator[r];if(a===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,N(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),g;var o=d(a,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,g;var i=o.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,g):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,g)}function B(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function L(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(B,this),this.reset(!0)}function P(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var a=-1,o=function n(){for(;++a<t.length;)if(r.call(t,a))return n.value=t[a],n.done=!1,n;return n.value=e,n.done=!0,n};return o.next=o}}throw new TypeError(Ls(t)+" is not iterable")}return y.prototype=b,a(k,"constructor",{value:b,configurable:!0}),a(b,"constructor",{value:y,configurable:!0}),y.displayName=s(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,s(e,c,"GeneratorFunction")),e.prototype=Object.create(k),e},t.awrap=function(e){return{__await:e}},C(E.prototype),s(E.prototype,l,(function(){return this})),t.AsyncIterator=E,t.async=function(e,n,r,a,o){void 0===o&&(o=Promise);var i=new E(u(e,n,r,a),o);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(k),s(k,c,"Generator"),s(k,i,(function(){return this})),s(k,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=P,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(L),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function a(r,a){return l.type="throw",l.arg=t,n.next=r,a&&(n.method="next",n.arg=e),!!a}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],l=i.completion;if("root"===i.tryLoc)return a("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(c&&s){if(this.prev<i.catchLoc)return a(i.catchLoc,!0);if(this.prev<i.finallyLoc)return a(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return a(i.catchLoc,!0)}else{if(!s)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return a(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,g):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),L(n),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;L(n)}return a}}throw Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),g}},t}function Ps(e,t,n,r,a,o,i){try{var l=e[o](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,a)}function Ms(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,l=[],c=!0,s=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){s=!0,a=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw a}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Os(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Os(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Os(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const Ts=function(){var e=Ms((0,t.useState)(null),2),n=(e[0],e[1]),r=Ms((0,t.useState)([]),2),a=(r[0],r[1]),o=Ms((0,t.useState)([]),2),i=(o[0],o[1]),l=Ms((0,t.useState)([]),2),c=(l[0],l[1]),s=Ms((0,t.useState)([]),2),u=s[0],d=s[1],p=Ms((0,t.useState)([]),2),f=p[0],m=p[1],h=Ms((0,t.useState)(!0),2),g=h[0],v=h[1],y=fe();(0,t.useEffect)((function(){b()}),[]);var b=function(){var e,t=(e=_s().mark((function e(){var t,r,o,l,s,u,p,f,h,g,y,b,A,w;return _s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://www.themealdb.com/api/json/v1/1/search.php?f=f",r="https://www.themealdb.com/api/json/v1/1/random.php",o="https://www.themealdb.com/api/json/v1/1/list.php?a=list",l="https://www.themealdb.com/api/json/v1/1/categories.php",e.prev=5,e.next=8,or.get("https://www.thecocktaildb.com/api/json/v1/1/random.php");case 8:return s=e.sent,e.next=11,or.get(t);case 11:return u=e.sent,e.next=14,or.get(r);case 14:return p=e.sent,e.next=17,or.get(o);case 17:return f=e.sent,e.next=20,or.get(l);case 20:h=e.sent,g=s.data,y=u.data,b=p.data.meals,A=f.data.meals,w=h.data.categories,a(g.drinks),i(y.meals),c(b),d(A),m(w),v(!1),e.next=37;break;case 34:e.prev=34,e.t0=e.catch(5),n(e.t0);case 37:case"end":return e.stop()}}),e,null,[[5,34]])})),function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function i(e){Ps(o,r,a,i,l,"next",e)}function l(e){Ps(o,r,a,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}();return g?t.createElement(ml,null):t.createElement(t.Fragment,null,t.createElement("div",{className:"food"},t.createElement("div",{className:"slide-container"},t.createElement(al,null,t.createElement("div",null,t.createElement("img",{style:{width:"100%"},src:xs})),t.createElement("div",null,t.createElement("img",{style:{width:"100%"},src:ks})),t.createElement("div",null,t.createElement("img",{style:{width:"100%"},src:Cs})),t.createElement("div",null,t.createElement("img",{style:{width:"100%"},src:Es})),t.createElement("div",null,t.createElement("img",{style:{width:"100%"},src:Ss})),t.createElement("div",null,t.createElement("img",{style:{width:"100%"},src:Ns})),t.createElement("div",null,t.createElement("img",{style:{width:"100%"},src:Bs}))))),t.createElement("div",{className:"titleLineFood"},t.createElement("h1",null,"Search"),t.createElement("h1",null,t.createElement("hr",null))),t.createElement("div",{className:"food"},t.createElement("div",{className:"container"},t.createElement("p",null," Search recipes by name, ingredients and first letter, or choose dishes by country or category "),t.createElement(vi,null)),t.createElement("div",{className:"container"},t.createElement("div",{className:"area"},t.createElement("p",{className:"countryT"},"COUNTRY:"),u.map((function(e,n){return t.createElement("p",{key:n,className:"country",onClick:function(){!function(e){var t="home2/".concat(e);y(t)}(e.strArea),window.scrollTo({top:0,behavior:"smooth"})}},e.strArea)}))),t.createElement("div",{className:"area"},t.createElement("p",{className:"countryT"},"CATEGORY:"),f.map((function(e,n){return t.createElement("p",{key:n,className:"country",onClick:function(){var t,n;t=e.strCategory,n="home3/".concat(t),y(n),window.scrollTo({top:0,behavior:"smooth"})}},e.strCategory)}))))),t.createElement("div",{className:"food",style:{height:"300px"}}))},Fs=a.p+"cffedb64fa536ddd294702ce8520d382.png",Ds=function(){var e=(new Date).getFullYear();return t.createElement(t.Fragment,null,t.createElement(Fe,{basename:"/"},t.createElement("div",{className:"navContainer"},t.createElement("div",{className:"navigation"},t.createElement(Ie,{to:"/",className:"button1",onClick:function(){return window.scrollTo({top:0,behavior:"smooth"})}},t.createElement("p",{className:"logoImg"},t.createElement("img",{src:Fs,onClick:function(){return window.scrollTo({top:0,behavior:"smooth"})}}))),t.createElement(Ie,{to:"/calories",className:"button2",onClick:function(){return window.scrollTo({top:0,behavior:"smooth"})}},"Calories"),t.createElement(Ie,{to:"/dish",className:"button3",onClick:function(){return window.scrollTo({top:0,behavior:"smooth"})}},"Dish"),t.createElement(Ie,{to:"/drink",className:"button4",onClick:function(){return window.scrollTo({top:0,behavior:"smooth"})}},"Cocktails"))),t.createElement(Ne,null,t.createElement(Ee,{path:"/",element:t.createElement(Ll,null)}),t.createElement(Ee,{path:"/calories",element:t.createElement(mr,null)}),t.createElement(Ee,{path:"/:groceries",element:t.createElement(hs,null)}),t.createElement(Ee,{path:"/recipe",element:t.createElement(Fl,null)}),t.createElement(Ee,{path:"/cocktail",element:t.createElement(Oc,null)}),t.createElement(Ee,{path:"/drink",element:t.createElement(Ic,null)}),t.createElement(Ee,{path:"/dish",element:t.createElement(Ts,null)}),t.createElement(Ee,{path:"/cocktailName/:drink",element:t.createElement(Wc,null)}),t.createElement(Ee,{path:"/cocktailGlass/:glass",element:t.createElement(Zc,null)}),t.createElement(Ee,{path:"/recipe/recipe/:recipeId",element:t.createElement(rs,null)}),t.createElement(Ee,{path:"/home/:recipeId",element:t.createElement(rs,null)}),t.createElement(Ee,{path:"dish/home2/:area",element:t.createElement(ss,null)}),t.createElement(Ee,{path:"/home2/:area/recipe/:recipeId",element:t.createElement(rs,null)}),t.createElement(Ee,{path:"/:groceries/recipe/:recipeId",element:t.createElement(rs,null)}),t.createElement(Ee,{path:"Dish/home3/:category",element:t.createElement(ws,null)}),t.createElement(Ee,{path:"home3/:category",element:t.createElement(ws,null)}),t.createElement(Ee,{path:"/home3/:category/recipe/:recipeId",element:t.createElement(rs,null)})),t.createElement("div",{className:"footer"},t.createElement("p",null,"InTerVal ©",e))))},js=function(){return t.createElement(hi,null,t.createElement(Ds,null))};r.createRoot(document.getElementById("app")).render(t.createElement(js,{number:10,title:"String from index file",text:"Text from index file"}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,